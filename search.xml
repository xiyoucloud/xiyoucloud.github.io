<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GEO和TCGA数据下载慢和下载中断的解决办法</title>
    <url>/2022/12/29/GEO%E5%92%8CTCGA%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%85%A2%E5%92%8C%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>很多同学下载GEO数据库的数据和TCGA的数据网速特别的慢，或者总是中断，生信之路的第一个跟头就摔在了数据下载</p>
<p>下面给大家分享一个下载神器——西柚云代理下载！</p>
<p><a href="https://links.jianshu.com/go?to=https://fileproxy.xiyoucloud.net/%23/">https://fileproxy.xiyoucloud.net/#/</a></p>
<span id="more"></span>

<p>首先在GEO数据库上面找到您所需要的数据，然后页面往下拉</p>
<p>找到Series Matrix File(s)，点进去</p>
<img src="/2022/12/29/GEO%E5%92%8CTCGA%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%85%A2%E5%92%8C%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/21c9e84a1f3f4aaf9137fbf25c803746.png" class="" title="img">



<p> 找到您要下载的文件，右键-复制链接地址</p>
<img src="/2022/12/29/GEO%E5%92%8CTCGA%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%85%A2%E5%92%8C%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/bd9232fab68b4e598afe3e0fa95a4403.png" class="" title="img">

<p>打开我们的代理下载网站</p>
<p><strong><a href="https://fileproxy.xiyoucloud.net/#/">https://fileproxy.xiyoucloud.net/#/</a></strong></p>
<p>输入您用于接收下载链接的邮箱</p>
<p>把上一步复制的链接粘贴到下载地址</p>
<p>点提交信息</p>
<img src="/2022/12/29/GEO%E5%92%8CTCGA%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%85%A2%E5%92%8C%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/098a89d29f85418fac593b41e14f767e.png" class="" title="img">

<p>下载完成后会自动发送到预留邮箱里面</p>
<p>tar数据直接复制粘贴进去会提示url非法，这个是因为还需要进一步提取下载链接才能下载，具体方法可以参考网站里面的教程</p>
<p>TCGA的使用教程可以看网站里面的教程，篇幅有限就不一一列举了。</p>
<p><strong>最重要的是！！！这个代理下载服务是完全免费的！！！</strong></p>
]]></content>
      <tags>
        <tag>代理下载</tag>
      </tags>
  </entry>
  <entry>
    <title>renv使用教程</title>
    <url>/2023/02/14/renv%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>官网介绍：<a href="https://rstudio.github.io/renv/">https://rstudio.github.io/renv/</a></p>
<p>renv 能够帮助我们创建一个私有包仓库，你也可以认为它是为 R 创建一个私有的 libpath。在这个 libpath 下安装的 R 包不受其他 libpath 的影响，在项目中使用 R 包也并不会受到其他 libpath 的干扰。</p>
<span id="more"></span>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在 R 的交互环境下输入以下命令查看 libpath</span>
.libPaths<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>renv 的好处:</p>
<ol>
<li><p><strong>构建了一个独立的 R 包 libpath</strong>；</p>
</li>
<li><p>下载 R 包有缓存，安装失败后再次安装会使用上次已经下载的缓存，而不用再次下载；</p>
</li>
<li><p>可以导出项目中使用的R包和版本；</p>
</li>
<li><p>可以根据导出的 R 包镜像；</p>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>require<span class="token punctuation">(</span><span class="token string">"renv"</span>, quietly <span class="token operator">=</span> TRUE<span class="token punctuation">))</span> <span class="token punctuation">&#123;</span>
  install.packages<span class="token punctuation">(</span><span class="token string">"renv"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>创建项目目录，项目目录不能为家目录，目录名可以自定义</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dir.create<span class="token punctuation">(</span><span class="token string">"~/SCP_env"</span>, recursive <span class="token operator">=</span> TRUE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>初始化项目，这一步会在项目目录中生成文件</li>
</ol>
<p>如果你使用 rstudio-server 的话，下面的命令应该在 rstudio-server 的 “Console” 中执行，这样它会自动刷新 rstudio-server 并自动创建 R project。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 项目名可以自定义</span>
renv::init<span class="token punctuation">(</span>project <span class="token operator">=</span> <span class="token string">"~/SCP_env"</span>, bare <span class="token operator">=</span> TRUE, restart <span class="token operator">=</span> TRUE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="3">
<li>激活项目进行使用</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">renv::activate<span class="token punctuation">(</span>project <span class="token operator">=</span> <span class="token string">"~/SCP_env"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>激活项目后，可以查看此时的 libpath，之后安装的 R 包都会保存在 libpath 对应的目录中。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.libPaths<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="如何安装R包"><a href="#如何安装R包" class="headerlink" title="如何安装R包"></a>如何安装R包</h2><a href="/2022/12/29/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85R%E5%8C%85/" title="如何安装R包">如何安装R包</a>

<h1 id="renv高级功能"><a href="#renv高级功能" class="headerlink" title="renv高级功能"></a>renv高级功能</h1><h2 id="1-导出指定libpath下的R包信息到lockfile中"><a href="#1-导出指定libpath下的R包信息到lockfile中" class="headerlink" title="1.导出指定libpath下的R包信息到lockfile中"></a>1.导出指定libpath下的R包信息到lockfile中</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这 3 个参数都有默认值，不用一一赋值</span>
renv::snapshot<span class="token punctuation">(</span>project, library, lockfile<span class="token punctuation">)</span>

<span class="token comment"># 示例：将 SCP_env 项目下的多个 libpath 下的 R 包信息导出到 ~/SCP.lock 文件中</span>
renv::snapshot<span class="token punctuation">(</span>project<span class="token operator">=</span><span class="token string">"~/SCP_env"</span>, <span class="token assign-left variable">lockfile</span><span class="token operator">=</span><span class="token string">"~/SCP.lock"</span><span class="token punctuation">)</span>
<span class="token comment"># 示例：将 /home/txb/SCP_env/renv/library/R-4.2/x86_64-conda-linux-gnu 目录下的 R 包信息导出到 ~/SCP.lock 文件中</span>
renv::snapshot<span class="token punctuation">(</span>library<span class="token operator">=</span><span class="token string">"/home/txb/SCP_env/renv/library/R-4.2/x86_64-conda-linux-gnu"</span>, <span class="token assign-left variable">lockfile</span><span class="token operator">=</span><span class="token string">"~/SCP.lock"</span><span class="token punctuation">)</span>
<span class="token comment"># 示例：将 SCP_env 项目下的多个 libpath 下的 R 包信息导出到项目下 renv.lock 文件中</span>
renv::snapshot<span class="token punctuation">(</span>project<span class="token operator">=</span><span class="token string">"~/SCP_env"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-根据lockfile将R包安装到某个libpath中"><a href="#2-根据lockfile将R包安装到某个libpath中" class="headerlink" title="2.根据lockfile将R包安装到某个libpath中"></a>2.根据lockfile将R包安装到某个libpath中</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这 3 个参数都有默认值，不用一一赋值</span>
renv::restore<span class="token punctuation">(</span>project, library, lockfile<span class="token punctuation">)</span>

<span class="token comment"># 示例：根据 lockfile 中记录的 R 包信息将 R 包安装在某个 libpath 中</span>
renv::restore<span class="token punctuation">(</span>library<span class="token operator">=</span><span class="token string">"/home/txb/test"</span>, <span class="token assign-left variable">lockfile</span><span class="token operator">=</span><span class="token string">"~/test.lock"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但项目不总是可重现的，详情可见官方解释：<a href="https://rstudio.github.io/renv/articles/renv.html#caveats">https://rstudio.github.io/renv/articles/renv.html#caveats</a></p>
<p>出现这种情况时需要手动处理某些安装失败的 R 包。（移除？使用其他方式安装？……）</p>
<p>restore 和 snapshot 的更多用法可以阅读他们的源码获得，以下是它们可以接收的参数以及默认参数。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">restore<span class="token punctuation">(</span>project <span class="token operator">=</span> NULL, <span class="token punctuation">..</span>., library <span class="token operator">=</span> NULL, lockfile <span class="token operator">=</span> NULL, 
    packages <span class="token operator">=</span> NULL, exclude <span class="token operator">=</span> NULL, rebuild <span class="token operator">=</span> FALSE, repos <span class="token operator">=</span> NULL, 
    clean <span class="token operator">=</span> FALSE, prompt <span class="token operator">=</span> interactive<span class="token punctuation">(</span><span class="token punctuation">))</span>
    
snapshot<span class="token punctuation">(</span>project <span class="token operator">=</span> NULL, <span class="token punctuation">..</span>., library <span class="token operator">=</span> NULL, lockfile <span class="token operator">=</span> paths<span class="token variable">$lockfile</span><span class="token punctuation">(</span>project <span class="token operator">=</span> project<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3-禁用R包缓存，这样在安装R包时会从网上重新下载"><a href="#3-禁用R包缓存，这样在安装R包时会从网上重新下载" class="headerlink" title="3.禁用R包缓存，这样在安装R包时会从网上重新下载"></a>3.禁用R包缓存，这样在安装R包时会从网上重新下载</h2><p>通常来说这个设置是不需要的，如果 R 包有更新的版本，renv 会自动下载更新的版本来替换本地缓存。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">renv::settings<span class="token variable">$use</span>.cache<span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="4-身份验证"><a href="#4-身份验证" class="headerlink" title="4.身份验证"></a>4.身份验证</h2><p><a href="https://rstudio.github.io/renv/articles/renv.html#authentication">https://rstudio.github.io/renv/articles/renv.html#authentication</a></p>
<h2 id="5-设置不同项目之间共享R包缓存"><a href="#5-设置不同项目之间共享R包缓存" class="headerlink" title="5.设置不同项目之间共享R包缓存"></a>5.设置不同项目之间共享R包缓存</h2><p><a href="https://rstudio.github.io/renv/articles/renv.html#cache-location">https://rstudio.github.io/renv/articles/renv.html#cache-location</a></p>
<p>关于renv的更多信息请查看官方介绍：<a href="https://rstudio.github.io/renv/articles/renv.html">https://rstudio.github.io/renv/articles/renv.html</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>R包</tag>
      </tags>
  </entry>
  <entry>
    <title>暂未归类的问题</title>
    <url>/2023/02/12/%E6%9A%82%E6%9C%AA%E5%BD%92%E7%B1%BB%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="libssl-so-1-0-0-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#libssl-so-1-0-0-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="libssl.so.1.0.0: cannot open shared object file: No such file or directory"></a>libssl.so.1.0.0: cannot open shared object file: No such file or directory</h1><p>这个动态链接库已经过时了，使用 conda 安装 openssl，然后给对应的动态链接库创建一个软链接即可。</p>
<p>base 环境的动态链接库通常保存在 <code>~/miniconda3/lib</code>目录，其他虚拟环境的动态链接库通常保存在<code>~/miniconda3/envs/xxx/lib</code>目录中。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> openssl

<span class="token comment"># 以虚拟环境为 xxx 为例</span>
<span class="token builtin class-name">cd</span> ~/miniconda3/envs/xxx/lib
<span class="token function">ln</span> -s libssl.so libssl.so.1.0.0

<span class="token comment"># 然后重新执行软件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决这个问题的原理是新版的 libssl.so 可能兼容旧版，所以给它创建一个别名使用。当然，如果不兼容，或许更好的方式是更新依赖旧的动态链接库的软件。</p>
<h1 id="libEGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#libEGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="libEGL.so.1: cannot open shared object file: No such file or directory"></a>libEGL.so.1: cannot open shared object file: No such file or directory</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> libegl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="configure-error-gsl-config-not-found-is-GSL-installed"><a href="#configure-error-gsl-config-not-found-is-GSL-installed" class="headerlink" title="configure: error: gsl-config not found, is GSL installed?"></a>configure: error: gsl-config not found, is GSL installed?</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> libgsl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker运行rstudio并指定R版本</title>
    <url>/2023/02/10/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Crstudio%E5%B9%B6%E6%8C%87%E5%AE%9AR%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>rstudio 官方提供了使用不同 R 版本的 rstudio 镜像，使用 docker 来运行它们就可以在容器中使用不同的 R 版本了。</p>
<p>rstudio docker 官方镜像地址：<a href="https://hub.docker.com/r/rocker/rstudio/tags">https://hub.docker.com/r/rocker/rstudio/tags</a></p>
<span id="more"></span>

<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>首先前往 rstudio docker 的官方镜像地址找到想要拉取的 rstudio 镜像，点击复制拉取镜像的命令，然后将它粘贴到终端中执行就可以拉取对应的 rstudio 镜像了。可以看到，rstudio 官方是根据 R 版本来给 rstudio 镜像打 TAG 的，如 TAG 为 4.1.1 的 rstudio 镜像中使用的就是 R 的 4.1.1 版本。</p>
<img src="/2023/02/10/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Crstudio%E5%B9%B6%E6%8C%87%E5%AE%9AR%E7%89%88%E6%9C%AC/image-20230210164225916.png" class="" title="image-20230210164225916">

<img src="/2023/02/10/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Crstudio%E5%B9%B6%E6%8C%87%E5%AE%9AR%E7%89%88%E6%9C%AC/docker.gif" class="" title="docker">

<img src="/2023/02/10/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Crstudio%E5%B9%B6%E6%8C%87%E5%AE%9AR%E7%89%88%E6%9C%AC/image-20230210202529922.png" class="" title="image-20230210202529922">

<p>这里的 5288c4999e52 就是镜像id。</p>
<h2 id="运行rstudio镜像"><a href="#运行rstudio镜像" class="headerlink" title="运行rstudio镜像"></a>运行rstudio镜像</h2><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --name 容器名 -d --restart always -p 访问端口:8787 -e <span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>容器内用户名 -e <span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span>容器内密码 -e <span class="token assign-left variable">USERID</span><span class="token operator">=</span>用户uid -e <span class="token assign-left variable">GROUPID</span><span class="token operator">=</span>用户groupid -v 宿主机目录:容器内目录 镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h3><p>密码应该足够复杂，下文中的命令应该修改“足够复杂的密码”。</p>
<p>复杂的密码应该包含数字、英文字母大小、特殊符号，且长度不少于8位。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 虽然是命令示例，但还是请你手动修改一下密码部分吧。</span>
<span class="token function">docker</span> run --name rstudio-4.1.1 -d --restart always -p <span class="token number">10397</span>:8787 -e <span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span> -e <span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span>足够复杂的密码 -e <span class="token assign-left variable">USERID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span> -e <span class="token assign-left variable">GROUPID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> -v /home/<span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span>/docker_rstudio_home:/home/<span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span>/docker_rstudio_home 5288c4999e52<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="查看rstudio运行状态"><a href="#查看rstudio运行状态" class="headerlink" title="查看rstudio运行状态"></a>查看rstudio运行状态</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看容器运行状态</span>
<span class="token function">docker</span> container <span class="token function">ls</span>
<span class="token comment"># 查看容器运行日志</span>
<span class="token function">docker</span> logs rstudio-4.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<img src="/2023/02/10/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Crstudio%E5%B9%B6%E6%8C%87%E5%AE%9AR%E7%89%88%E6%9C%AC/image-20230210190407451.png" class="" title="image-20230210190407451">

<p>这里的 fc77bf75cf5d 是容器id，5288c4999e52 就是镜像id。STATUS 下的信息是容器的运行状态，Up 表示容器正常运行，更详细的运行情况可以通过查看容器的日志来了解。NAMES 下的信息是容器名（rstudio-4.1.1），容器名是上文中的运行命令设置的。</p>
<h2 id="访问rstudio"><a href="#访问rstudio" class="headerlink" title="访问rstudio"></a>访问rstudio</h2><p>关于命令的含义可以参考上文的<a href="#%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E">命令说明</a>部分。</p>
<p>访问链接示例：</p>
<p>http://域名或IP:端口</p>
<p><a href="http://xiyouyun.gitee.io:10397/">http://xiyouyun.gitee.io:10397</a></p>
<p><a href="http://localhost:9527/">http://localhost:9527</a></p>
<p><a href="http://ip:port">http://ip:port</a></p>
<p><strong>访问时请参考以上链接将相关信息替换为自己的域名和端口</strong></p>
<p>登陆 rstudio 的用户名为运行命令中设置的用户名，登陆的密码为运行命令中设置的密码。如果你的运行命令是参考<a href="#%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B">命令示例</a>，那么登陆用户名就是运行该命令的当前用户的用户名，密码为你修改的密码。</p>
<p>你可以在终端中使用 whoami 查看当前用户的用户名</p>
<img src="/2023/02/10/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Crstudio%E5%B9%B6%E6%8C%87%E5%AE%9AR%E7%89%88%E6%9C%AC/image-20230210190233309.png" class="" title="image-20230210190233309">



<img src="/2023/02/10/%E4%BD%BF%E7%94%A8docker%E8%BF%90%E8%A1%8Crstudio%E5%B9%B6%E6%8C%87%E5%AE%9AR%E7%89%88%E6%9C%AC/image-20230210184415504.png" class="" title="image-20230210184415504">

<h2 id="宿主机与容器内的数据共享"><a href="#宿主机与容器内的数据共享" class="headerlink" title="宿主机与容器内的数据共享"></a>宿主机与容器内的数据共享</h2><p>宿主机和容器之间的文件都是独立的，互不干扰的，在容器中看不到宿主机的文件，在容器外的宿主机中也看不到容器内的文件。</p>
<p>不过通常我们会有在宿主机和容器之间传递文件的需求，上文的运行命令中，我将宿主机的 <code>/home/$(whoami)/docker_rstudio_home</code> 目录挂载到了容器的<code>/home/$(whoami)/docker_rstudio_home</code>中，因此在宿主机的<code>/home/$(whoami)/docker_rstudio_home</code>目录下的文件也可以在容器或 rstudio 的 <code>/home/$(whoami)/docker_rstudio_home</code>中看到。</p>
<p><strong>更重要的是，当容器被销毁时，容器内的其他文件都会被清空，而/home/$(whoami)/docker_rstudio_home目录下的文件仍然可以在宿主机中访问到</strong></p>
<p>因此对于代码、输入文件、运行结果……等重要文件应该将它们放在 <code>/home/$(whoami)/docker_rstudio_home</code>中，以免容器异常导致数据丢失。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在容器或宿主机中执行，可以查看目录下对应的文件</span>
<span class="token function">ls</span> /home/<span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span>/docker_rstudio_home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="管理容器"><a href="#管理容器" class="headerlink" title="管理容器"></a>管理容器</h2><p>上文中运行容器的容器名为 rstudio-4.1.1，你可以参考以下命令来管理你的容器。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 停止容器</span>
<span class="token function">docker</span> stop rstudio-4.1.1
<span class="token comment"># 启动容器</span>
<span class="token function">docker</span> start rstudio-4.1.1
<span class="token comment"># 重启容器</span>
<span class="token function">docker</span> restart rstudio-4.1.1
<span class="token comment"># 查看容器日志</span>
<span class="token function">docker</span> logs rstudio-4.1.1
<span class="token comment"># 删除容器，谨慎操作！</span>
<span class="token function">docker</span> stop rstudio-4.1.1 <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> <span class="token function">rm</span> rstudio-4.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><p>如果你对 docker 不太熟悉的话，可以查看 <a href="/2023/01/19/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="docker使用教程">docker使用教程</a> 这篇文章。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>R</tag>
        <tag>docker</tag>
        <tag>rstudio</tag>
      </tags>
  </entry>
  <entry>
    <title>安装R包-units</title>
    <url>/2023/02/09/%E5%AE%89%E8%A3%85R%E5%8C%85-units/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在安装 R 包 units 时使用正常的安装方式安装不上时，可以参考这篇文章指定一下依赖软件的位置进行安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 一般安装方式</span>
install.packages<span class="token punctuation">(</span><span class="token string">"units"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="报错截图"><a href="#报错截图" class="headerlink" title="报错截图"></a>报错截图</h2><img src="/2023/02/09/%E5%AE%89%E8%A3%85R%E5%8C%85-units/image-20230209181433017.png" class="" title="image-20230209181433017">



<p><strong>使用哪种方式安装依赖软件取决于你使用的 R 的环境。</strong></p>
<h2 id="在apt中安装依赖软件："><a href="#在apt中安装依赖软件：" class="headerlink" title="在apt中安装依赖软件："></a>在apt中安装依赖软件：</h2><p>如果是在 rstudio 中使用 conda 安装的 r-base，你就需要在 conda 中为该 R 包安装好依赖，如果使用的是全局环境中的 R，安装好依赖后参考以下安装方式就行。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在 rstudio 中使用系统环境下的 R（使用 apt 安装的），需要根据提示安装依赖软件</span>
<span class="token comment"># 如在 ubuntu 中安装 units 包的依赖软件。</span>
<span class="token function">apt</span> <span class="token function">install</span> libudunits2-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="在conda中安装依赖软件"><a href="#在conda中安装依赖软件" class="headerlink" title="在conda中安装依赖软件"></a>在conda中安装依赖软件</h2><p>在终端中执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 激活虚拟环境</span>
conda activate r-4.2
<span class="token comment"># 安装依赖环境</span>
conda <span class="token function">install</span>  udunits2 -y -vv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 R 的交互环境中执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config <span class="token operator">&lt;</span>- c<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token string">"--with-udunits2-lib=/home/txb/envs/r-4.2/lib --with-udunits2-include=/home/txb/envs/r-4.2/include"</span><span class="token punctuation">)</span>
install.packages<span class="token punctuation">(</span><span class="token string">"units"</span>, configure.args <span class="token operator">=</span> config<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="/2023/02/09/%E5%AE%89%E8%A3%85R%E5%8C%85-units/image-20230209201124780.png" class="" title="image-20230209201124780"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>R包</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>安装R包-stringi</title>
    <url>/2023/02/09/%E5%AE%89%E8%A3%85R%E5%8C%85-stringi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在安装 stringi 时出现报错时，可以参考一下这篇文章。</p>
<span id="more"></span>

<h2 id="报错截图"><a href="#报错截图" class="headerlink" title="报错截图"></a>报错截图</h2><img src="/2023/02/09/%E5%AE%89%E8%A3%85R%E5%8C%85-stringi/image-20230209175220924.png" class="" title="image-20230209175220924">

<p>从报错中我们可以看到，stringi 安装失败的原因是因为<a href="https://icu.unicode.org/">icu</a>这个软件下载不下来，这里我们可以通过代理将这个 zip 文件下载下来，然后使用 R CMD INSTALL 的方式安装。</p>
<h2 id="获取安装文件"><a href="#获取安装文件" class="headerlink" title="获取安装文件"></a>获取安装文件</h2><p>在终端中执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://cran.r-project.org/src/contrib/stringi_1.7.12.tar.gz
<span class="token comment"># 如果下载不下来可以使用代理下载</span>
<span class="token function">wget</span> https://raw.githubusercontent.com/gagolews/stringi/master/src/icu69/data/icu4c-69_1-data-bin-l.zip

<span class="token comment"># 使用代理下载</span>
<span class="token function">wget</span> https://ghproxy.com/https://raw.githubusercontent.com/gagolews/stringi/master/src/icu69/data/icu4c-69_1-data-bin-l.zip
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在终端中执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">R CMD INSTALL --configure-vars<span class="token operator">=</span><span class="token string">'ICUDT_DIR=/packages/path/'</span> stringi_1.7.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>R包</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>x86_64-conda-linux-gnu-cc not found</title>
    <url>/2023/02/08/x86-64-conda-linux-gnu-cc-not-found/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前有一篇文章给大家介绍了如何在 rstudio-server 中切换 R 的版本，在那篇文章中不同的 R 版本是用 conda 安装的。</p>
<a href="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/" title="在rstudio-server中使用R包的不同版本">在rstudio-server中使用R包的不同版本</a>

<p>最近在 rstudio 中使用 conda 中 的 R 时（在 rserver.conf 中配置的 R），发现会报错，报错截图如下：</p>
<img src="/2023/02/08/x86-64-conda-linux-gnu-cc-not-found/image-20230208224336781.png" class="" title="image-20230208224336781">

<p>可是在 conda 的对应目录中这个 x86_64-conda-linux-gnu-cc 是已经安装好的。更奇怪的是，这个包在 R 的交互环境中可以安装好（在终端中输入 R，然后执行相关的装包代码），而在 rstudio 中运行相应的装包代码是却会出现报错。根据报错提示可以看到导致报错的行是在 <code>/home/txb/miniconda3/envs/r-4.2/lib/R/etc/Makeconf</code>文件中的第 171 行代码。然后我去查看了第 171 行代码，好像描述的是一种编译文件的方式。</p>
<img src="/2023/02/08/x86-64-conda-linux-gnu-cc-not-found/image-20230208224938575.png" class="" title="image-20230208224938575">

<p>这里的 CC 看起来是一个变量，最后我在该文件的第 16 行找到了变量定义的值，它的值是 x86_64-conda-linux-gnu-cc, 我将它改为了 x86_64-conda-linux-gnu-cc 这个文件的绝对路径，这样就不会报错 <code>x86_64-conda-linux-gnu-cc not found </code>了。</p>
<p>修改前：</p>
<img src="/2023/02/08/x86-64-conda-linux-gnu-cc-not-found/image-20230208225409775.png" class="" title="image-20230208225409775">

<p>修改后：</p>
<img src="/2023/02/08/x86-64-conda-linux-gnu-cc-not-found/image-20230208225510830.png" class="" title="image-20230208225510830">

<p><strong>这个报错虽然是说的 x86_64-conda-linux-gnu-cc 没找到，不过有朝一日在 rstudio-server 中安装其他 R 包时又报其他的 xx not found，而你已经使用 conda 安装了相关软件，也可以参照此法修改 Makeconf 文件</strong></p>
<p>当然，出现这种情况还有一种可能，就是你本地没安装 x86_64-conda-linux-gnu-cc。如果是这样，你需要在你使用的 R 所在的 conda 虚拟环境中安装它。安装命令如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span>  gcc_linux-64 
conda <span class="token function">install</span>  gxx_linux-64
conda <span class="token function">install</span>  gfortran_linux-64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>conda</tag>
        <tag>rstudio-server</tag>
        <tag>R</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>conda问题汇总</title>
    <url>/2023/02/03/conda%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这篇文章汇总了使用 conda 过程中一些常见的问题。</p>
<span id="more"></span>

<h2 id="安装过程慢"><a href="#安装过程慢" class="headerlink" title="安装过程慢"></a>安装过程慢</h2><p>conda 安装过程慢有很多种可能，这里列举一下常用的几种可能：</p>
<ol>
<li>未配置国内镜像源，或软件所在软件源国内无镜像，如：<code>conda install -c hcc aspera-cli</code></li>
<li>安装时指定了官方软件源，如：<code>conda install -c bioconda sra-tools</code>；</li>
<li>待安装软件所需依赖与当前环境（这里的环境不仅仅指当前虚拟环境）中的软件包冲突过多，conda 需要大量计算分析来解决软件依赖；</li>
<li>国内软件源无法访问，详情可见 <a href="/2023/01/12/conda%E9%95%9C%E5%83%8F%E6%BA%90%E6%B1%87%E6%80%BB/" title="conda镜像源汇总">conda镜像源汇总</a></li>
</ol>
<p>对于第 1 种可能，如果未配置镜像源，可参考 <a href="/2023/01/12/conda%E9%95%9C%E5%83%8F%E6%BA%90%E6%B1%87%E6%80%BB/" title="conda镜像源汇总">conda镜像源汇总</a> 配置国内镜像源。</p>
<p>conda-forge，bioconda，main，这几个软件源在国内是有镜像的。</p>
<p>如果软件所在软件源并无国内镜像，可以开启代理后再进行软件安装、或者耐心等待、或者选择其他安装方式。</p>
<p>对于第 2 种可能，如果所指定的软件源在国内有镜像，可指定为国内镜像源。如若该软件源没有对应的国内镜像源就只能开启代理后再进行软件安装、或者耐心等待、或者选择其他安装方式。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载时指定北外的 bioconda 镜像源为最高优先级</span>
conda <span class="token function">install</span> -c <span class="token string">'https://mirrors.bfsu.edu.cn/anaconda/cloud/bioconda'</span> sra-tools
<span class="token comment"># 如果你已经配置好国内镜像源，可以在下载时不指定镜像源，默认从配置的镜像源中搜索下载</span>
conda <span class="token function">install</span> sra-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于第 3 种可能，如果待安装的软件必须安装在当前<strong>虚拟环境</strong>，那就只能耐心等待 conda 处理好环境依赖了，不过出现这种情况时，没有绝对的处理方式，你也可以修改当前环境中的软件版本来减少环境依赖的冲突。最简单的方式是新创建一个虚拟环境，在其中安装最少的依赖，然后再安装待安装的软件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个全新的虚拟环境</span>
conda create -n new_enviroment -y -vv
conda activate new_enviroment
<span class="token comment"># 安装待安装软件</span>
conda <span class="token function">install</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不过有些软件需要在创建一个全新的虚拟环境后，再在这个虚拟环境中安装一个软件依赖，这样才能顺利安装这个软件。这样说起来有点抽象，我们假设需要安装的软件是一个 R 包，那么我们就需要创建一个环境后再安装好指定版本 r-base，然后再安装 R 包。同理，如果我们需要安装的软件是一个 python 包，我们就需要在创建一个环境后在安装好指定版本的 python，然后再安装 python 包。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 示例 1</span>
conda create -n rpackage r-base<span class="token operator">==</span><span class="token number">4.0</span>.5 -y -vv
conda activate rpackage
conda <span class="token function">install</span> bioconductor-monocle<span class="token operator">==</span><span class="token number">2.18</span>.0 -y -vv

<span class="token comment"># 示例 2</span>
<span class="token comment"># 使用 conda 创建虚拟环境，并指定 python 的版本为 3.7</span>
conda create -n CellPhoneDB <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.7</span> -y -vv
conda activate CellPhoneDB 
<span class="token comment"># 安装 CellPhoneDB，这个包目前使用 conda 安装会有问题，所以用 python 的包管理工具 pip 来安装</span>
<span class="token comment"># 不过总体的思路与示例 1 是一致的</span>
pip <span class="token function">install</span> CellPhoneDB -i https://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="换源后不生效"><a href="#换源后不生效" class="headerlink" title="换源后不生效"></a>换源后不生效</h2><p>清除软件搜索使用的本地索引，然后再次执行下载。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda clean -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><em>暂时遇到的问题以及解决方式就这些，有遇到其他常见问题的小伙伴欢迎给我反馈，我会补充到文档中，让它帮助到更多的人，感谢大家的支持！​</em></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>conda</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>rstudio使用技巧</title>
    <url>/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这篇文章的目的是为了让大家关于rstudio有更多的共同语言。</p>
<p>这篇文章的结构是零散的，大家按需查看对应的段落即可。</p>
<span id="more"></span>

<h1 id="rstudio布局"><a href="#rstudio布局" class="headerlink" title="rstudio布局"></a>rstudio布局</h1><p>关于rstudio的布局可以通过rstudio界面顶部的 <strong>Worksapce Panes</strong>来设置。如无特殊说明，后文中所有的界面采用下图中红色标注的设置。</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/1674915255918.png" class="" width="1674915255918">

<h1 id="查看libpath中安装的R包"><a href="#查看libpath中安装的R包" class="headerlink" title="查看libpath中安装的R包"></a>查看libpath中安装的R包</h1><p>在rstudio右下角中选择<strong>Packages</strong>，然后再下方的搜索框中搜索。</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128221710500.png" class="" title="image-20230128221710500">

<h1 id="新建一个终端"><a href="#新建一个终端" class="headerlink" title="新建一个终端"></a>新建一个终端</h1><p>布局中左下角的位置可以查看 Console、Terminal、Background Jobs，如果不小心关掉了终端，可以这样新建一个终端。</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128222302185.png" class="" title="image-20230128222302185">

<h1 id="关闭当前Session"><a href="#关闭当前Session" class="headerlink" title="关闭当前Session"></a>关闭当前Session</h1><p>布局中右上角可以关闭当前session（会话）</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128222651523.png" class="" title="image-20230128222651523">

<h1 id="Start-New-Session"><a href="#Start-New-Session" class="headerlink" title="Start New Session"></a>Start New Session</h1><p>关闭一个session后可以创建一个新的session（会话）</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128222810092.png" class="" title="image-20230128222810092">

<h1 id="终止代码的执行"><a href="#终止代码的执行" class="headerlink" title="终止代码的执行"></a>终止代码的执行</h1><img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128223347164.png" class="" title="image-20230128223347164">

<h1 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h1><img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128223711493.png" class="" title="image-20230128223711493">

<h1 id="保存rstudio中的文件"><a href="#保存rstudio中的文件" class="headerlink" title="保存rstudio中的文件"></a>保存rstudio中的文件</h1><p>rstudio崩溃会导致文件内容丢失，因此为了防止文件内容丢失，需要养成好习惯，经常对文件内容进行保存。使用 ctrl + s 即可保存文件。对于没有创建文件名的文件，需要手动设置一下文件名，对于已经创建文件名的文件则自动将文件内容保存在文件中。</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128224329494.png" class="" title="image-20230128224329494">

<p>未保存的文件在文件名的右上角会有一个星号：</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128224511057.png" class="" title="image-20230128224511057">

<h1 id="查看R中的内存使用报告"><a href="#查看R中的内存使用报告" class="headerlink" title="查看R中的内存使用报告"></a>查看R中的内存使用报告</h1><p>在Environment中点击显示内存的下拉框按钮，然后点击 <strong>Memory Usage Report</strong> 就可以查看 R 和系统的内存使用报告了。</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/1674917407599.png" class="" width="1674917407599">

<h1 id="设置工作目录"><a href="#设置工作目录" class="headerlink" title="设置工作目录"></a>设置工作目录</h1><p>大家都知道在R中可以使用setwd()可以设置工作目录，但有时候不知道该怎样描述设置的路径，可以参考下面图片将当前项目的目录设置为工作目录。如果你需要设置其他目录为工作路径，酌情更改即可。</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230128225546717.png" class="" title="image-20230128225546717">

<h1 id="rsession异常导致工作空间数据丢失"><a href="#rsession异常导致工作空间数据丢失" class="headerlink" title="rsession异常导致工作空间数据丢失"></a>rsession异常导致工作空间数据丢失</h1><p>这里的数据丢失可能包括计算过程中的中间结果和未保存的代码。</p>
<p>避免数据丢失的方式是使用 ctrl + s 保存代码，将重要的工作空间中的变量保存带 Rdata 或 rds 文件中。</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230129221657990.png" class="" title="image-20230129221657990">

<h1 id="在终端中使用R"><a href="#在终端中使用R" class="headerlink" title="在终端中使用R"></a>在终端中使用R</h1><p>在终端（Terminal）中输入 R 进入到 R 的交互界面，可以在此交互界面执行 R 代码。</p>
<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230129222231379.png" class="" title="image-20230129222231379">

<img src="/2023/01/28/rstudio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230129222451090.png" class="" title="image-20230129222451090">

<h1 id="重启rstudio-server服务"><a href="#重启rstudio-server服务" class="headerlink" title="重启rstudio-server服务"></a>重启rstudio-server服务</h1><p>如果 rstudio-server 服务异常，比如不能正常访问，可以尝试重启 rstudio-server 服务。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重启</span>
<span class="token function">sudo</span> <span class="token function">service</span> rstudio-server restart
<span class="token comment"># 查看运行状态</span>
<span class="token function">sudo</span> <span class="token function">service</span> rstudio-server status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="杀死rsession对应的用户进程"><a href="#杀死rsession对应的用户进程" class="headerlink" title="杀死rsession对应的用户进程"></a>杀死rsession对应的用户进程</h1><p>由于 rstudio-server 的性能问题，可能会出现在网页端访问 rstudio 卡住，不能加载出数据的情况，此时可以杀死当前的session进程，然后尝试重新登陆 rstudio-server。<strong>杀死进程可能会导致 workspace 中计算产生的结果丢失</strong>，因此要养成经常将计算结果保存在本地磁盘中的好习惯（保存为Rdata或rds文件），下次使用时直接从磁盘中加载就好了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"/usr/lib/rstudio-server/bin/rsession -u <span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="清除用户rsession"><a href="#清除用户rsession" class="headerlink" title="清除用户rsession"></a>清除用户rsession</h1><p>一个 rsession 对应一个 rstudio-server 的会话，用户与 rstudio-server 建立一个连接后，会话信息会保存在一个文件中，如果出现 rstudio 卡住、不能登陆等情况时，在杀死进程后还是没有解决问题，可以清除 session 文件再重新登陆。这一操作通常要搭配<a href="#%E6%9D%80%E6%AD%BBrsession%E5%AF%B9%E5%BA%94%E7%9A%84%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B">杀死rsession对应的用户进程</a>使用，因此*<em>可能会导致 workspace 中计算产生的结果丢失</em>***。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新版 rstudio 的 session 文件的存放位置</span>
<span class="token function">ls</span> ~/.local/share/rstudio/sessions/active
<span class="token comment"># 如果有内容，则删除</span>
<span class="token function">rm</span> -rf ~/.local/share/rstudio/sessions/active

<span class="token comment"># 旧版 rstudio 的 session 文件的存放位置</span>
<span class="token function">ls</span> ~/.rstudio/sessions/active/session-*
<span class="token comment"># 如果有内容则删除</span>
<span class="token function">rm</span> -rf ~/.rstudio/sessions/active/session-*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="不在同一个浏览器界面打开多个rstudio应用"><a href="#不在同一个浏览器界面打开多个rstudio应用" class="headerlink" title="不在同一个浏览器界面打开多个rstudio应用"></a>不在同一个浏览器界面打开多个rstudio应用</h1><p>rstudio-server 使用的登陆机制会导致同一个浏览器界面打开的多个 rstudio-server 应用会互相干扰。比如：同界面的多个 rstudio 应用中，应用 A 的登陆回到应用 B 退出登陆。是否还有其他的干扰就不得而知了，因此更好的方式是使用不同的浏览器来访问不同的rstudio应用。当然，你也可以使用浏览器的私密模式。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>rstudio</tag>
        <tag>使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>singularity/apptainer使用教程</title>
    <url>/2023/01/20/singularity-apptainer%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 singularity</span>
conda create -n singularity
conda activate singularity
conda <span class="token function">install</span> -c conda-forge singularity

<span class="token comment"># 安装 apptainer</span>
conda create -n apptainer
conda activate apptainer
conda <span class="token function">install</span> -c conda-forge apptainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p><strong>Apptainer</strong>是一个相对较新的容器软件，相对于 docker 来说，它不需要 root 权限，因此更符合科研应用的场景（因为共享服务器中普通用户通常不会有root权限）。</p>
<p>Apptainer 的旧版本被称为 Singularity，关于它们之间的兼容性以及从 singularity 迁移到 apptainer 可以参考这个链接：<a href="https://apptainer.org/docs/user/main/singularity_compatibility.html">https://apptainer.org/docs/user/main/singularity_compatibility.html</a></p>
<p>通常来说，singularity 可以用 apptainer 命令代替（如果你安装了 apptainer）。</p>
<p>Singularity官方文档：<a href="https://github.com/apptainer/singularity">https://github.com/apptainer/singularity</a></p>
<p>Apptainer官方文档：<a href="https://github.com/apptainer/apptainer">https://github.com/apptainer/apptainer</a></p>
<table>
<thead>
<tr>
<th></th>
<th>Docker</th>
<th>Apptainer（使用Singularity的话，将命令中的apptainer替换为singularity）</th>
</tr>
</thead>
<tbody><tr>
<td>镜像</td>
<td>有</td>
<td>无（Apptainer没有镜像的概念，用户创建和运行的都是一个个容器）</td>
</tr>
<tr>
<td>获取镜像（容器）</td>
<td><code>docker pull busybox:latest</code></td>
<td><code>apptainer pull ./busybox.sif docker://busybox:latest</code>或者<code>apptainer build ./busybox.sif docker://busybox:latest</code></td>
</tr>
<tr>
<td>容器</td>
<td>有</td>
<td>有（Apptainer容器有两种存在形式：SIF和sandbox。SIF只读，主要用来执行用户程序；sandbox可修改，可用来开发和创建新容器）</td>
</tr>
<tr>
<td>查看运行的容器</td>
<td><code>docker ps</code></td>
<td><code>apptainer instance list</code></td>
</tr>
<tr>
<td>运行容器</td>
<td><code>docker run busybox ping www.baidu.com</code></td>
<td><code>apptainer exec busybox.sif ping www.baidu.com</code></td>
</tr>
<tr>
<td>挂载目录</td>
<td><code>-v host_path:container_path</code></td>
<td><code>-B</code>或者<code>--bind</code></td>
</tr>
<tr>
<td>交互式运行容器</td>
<td><code>docker run -it busybox</code></td>
<td><code>apptainer shell busybox.sif</code></td>
</tr>
<tr>
<td>自定义镜像（容器）</td>
<td><a href="https://www.runoob.com/docker/docker-dockerfile.html">Dockerfile文件</a></td>
<td><a href="https://docs.sylabs.io/guides/3.7/user-guide/definition_files.html">Definition Files</a></td>
</tr>
</tbody></table>
<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apptainer pull docker://ubuntu:22.04
<span class="token comment"># 拉取镜像之后指定镜像在本地保存的文件名称</span>
apptainer build ubuntu22.sif  docker://ubuntu:22.04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="转化镜像格式"><a href="#转化镜像格式" class="headerlink" title="转化镜像格式"></a>转化镜像格式</h2><p>*.sif文件是 apptainer 使用的镜像格式。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将tar包格式的docker镜像转化为sif格式</span>
singularity build hello_world.sif docker-archive://hello_world.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="在容器中执行命令"><a href="#在容器中执行命令" class="headerlink" title="在容器中执行命令"></a>在容器中执行命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式1：进入到容器，然后再终端中执行命令</span>
apptainer shell ubuntu22.sif
<span class="token comment"># 方式2：在容器中执行 pwd 命令</span>
apptainer <span class="token builtin class-name">exec</span> ubuntu22.sif <span class="token string">"pwd"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p><a href="https://apptainer.org/docs/user/main/definition_files.html#runscript">Apptainer</a>容器内部包含运行脚本。这些是构建容器是作者自定义的脚本，用于定义容器在运行时应执行的操作。runscript 可以用 <a href="https://apptainer.org/docs/user/main/cli/apptainer_run.html">run</a> 命令触发，或者简单地通过调用容器就像它是一个可执行文件一样。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式 1</span>
apptainer run ubuntu22.sif 
<span class="token comment"># 方式 2</span>
./ubuntu22.sif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>默认情况下，Apptainer 会在运行时将<code>/home/$USER</code>、 <code>/tmp</code>和绑定<code>$PWD</code>到您的容器中。当然 apptainer 也提供了其他参数可以在宿主机和容器中进行映射。详情可以参考这个链接：<a href="https://apptainer.org/docs/user/main/bind_paths_and_mounts.html">https://apptainer.org/docs/user/main/bind_paths_and_mounts.html</a></p>
<h2 id="构建容器"><a href="#构建容器" class="headerlink" title="构建容器"></a>构建容器</h2><p>构建容器有两种方式，一种是根据原有的镜像进行更改。</p>
<p>一种是根据镜像定义文件 xx.def 定义镜像的构建流程。构建 xx.def 的语法规则可以参考这个链接：<a href="https://apptainer.org/docs/user/latest/definition_files.html">https://apptainer.org/docs/user/latest/definition_files.html</a></p>
<p>apptainer镜像文件默认只可以复制和验证，如果想要自己构建镜像，需要一种可写的镜像格式，此时需要以沙箱的模式运行镜像。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 此命令在当前工作目录中创建一个名为ubuntu/整个 Ubuntu 操作系统和一些 Apptainer 元数据的目录。</span>
apptainer build --sandbox ubuntu/ docker://ubuntu

<span class="token comment"># 运行容器，并在其中对镜像进行修改（如安装软件）</span>
apptainer shell --fakeroot -w ./ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>文件内容示例 lolcow.def：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">BootStrap</span><span class="token punctuation">:</span> docker
<span class="token key atrule">From</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">:</span><span class="token number">20.04</span>

<span class="token directive important">%post</span>
    apt<span class="token punctuation">-</span>get <span class="token punctuation">-</span>y update
    apt<span class="token punctuation">-</span>get <span class="token punctuation">-</span>y install cowsay lolcat

<span class="token directive important">%environment</span>
    export LC_ALL=C
    export PATH=/usr/games<span class="token punctuation">:</span>$PATH

<span class="token directive important">%runscript</span>
    date <span class="token punctuation">|</span> cowsay <span class="token punctuation">|</span> lolcat

<span class="token directive important">%labels</span>
    Author Alice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据文件内容构建镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apptainer build lolcow.sif lolcow.def<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="apptainer容器内后台运行程序"><a href="#apptainer容器内后台运行程序" class="headerlink" title="apptainer容器内后台运行程序"></a>apptainer容器内后台运行程序</h2><h3 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~
<span class="token function">mkdir</span> pyscenic
<span class="token builtin class-name">cd</span> pyscenic
<span class="token function">wget</span> https://ghproxy.com/https://raw.githubusercontent.com/aertslab/scenic-nf/master/example/expr_mat.tsv
<span class="token function">wget</span> https://ghproxy.com/https://raw.githubusercontent.com/aertslab/scenic-nf/master/example/allTFs_hg38.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们先来看看如何使用 apptainer 或 docker 在<strong>前台</strong>运行 pyscenic容器。</p>
<h3 id="示例1（使用-apptainer-运行-pyscenic）："><a href="#示例1（使用-apptainer-运行-pyscenic）：" class="headerlink" title="示例1（使用 apptainer 运行 pyscenic）："></a>示例1（使用 apptainer 运行 pyscenic）：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apptainer run -B <span class="token environment constant">$PWD</span>:/data/ pyscenic_0.10.0.sif pyscenic grn --num_workers <span class="token number">5</span> --output /data/expr_mat.adjacencies.apptainer.tsv /data/expr_mat.tsv /data/allTFs_hg38.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="示例2（使用-docker运行-pyscenic-的命令）："><a href="#示例2（使用-docker运行-pyscenic-的命令）：" class="headerlink" title="示例2（使用 docker运行 pyscenic 的命令）："></a>示例2（使用 docker运行 pyscenic 的命令）：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -it --rm -v <span class="token environment constant">$PWD</span>:/data aertslab/pyscenic:0.10.0 pyscenic grn --num_workers <span class="token number">5</span> -o /data/expr_mat.adjacencies.docker.tsv /data/expr_mat.tsv /data/allTFs_hg38.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参考以上两个示例，我们可以写出在容器内部后台执行命令的方式。</p>
<p>首先运行一个容器，然后进入到容器内部，将对应的命令使用 nohup 挂起运行。</p>
<p>如果你想了解如何让程序后台运行的方式可以参考这个链接：<a href="#">Post not found: 进程的后台运行-bg-fg-nohup</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器让命令后台运行</span>
singularity instance start pyscenic_0.10.0.sif pyscenic
<span class="token comment">## 查看运行中的容器</span>
singularity instance list
<span class="token comment">## 进入容器内部</span>
singularity shell instance://pyscenic
<span class="token comment">## 后台执行命令</span>
<span class="token function">nohup</span> pyscenic grn --num_workers <span class="token number">16</span> -o <span class="token environment constant">$PWD</span>/expr_mat.adjacencies.docker.tsv <span class="token environment constant">$PWD</span>/expr_mat.tsv <span class="token environment constant">$PWD</span>/allTFs_hg38.txt <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="在容器中安装和使用软件"><a href="#在容器中安装和使用软件" class="headerlink" title="在容器中安装和使用软件"></a>在容器中安装和使用软件</h2><p>在沙箱容器中安装的软件只能在容器中使用。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 构建沙箱环境的保存目录</span>
apptainer build --sandbox ubuntu/ ubuntu22.sif
<span class="token comment"># 进入到容器中</span>
apptainer shell --fakeroot -w ./ubuntu

<span class="token comment"># 安装软件并使用，容器内用户拥有 root 权限</span>
<span class="token function">apt</span> update
<span class="token function">apt</span> <span class="token function">install</span> r-base
<span class="token comment"># 在容器中运行软件</span>
R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>apptainer</tag>
        <tag>singularity</tag>
      </tags>
  </entry>
  <entry>
    <title>docker使用教程</title>
    <url>/2023/01/19/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>docker 安装教程：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p>
<span id="more"></span>

<p>docker 中有两个很重要的概念，明白它们能帮助明白 docker 的工作原理。</p>
<p>镜像是一种文件，你可以根据<a href="http://www.dockerinfo.net/dockerfile%E4%BB%8B%E7%BB%8D">Dockfile</a>进一步了解这种文件，在 Dockerfile 中，每做一步操作就给镜像文件增加了一层内容。镜像文件可以和 tar 格式的文件相互转化。使用 docker 可以把镜像文件运行起来成为一个 <strong>docker 进程</strong>，我们把这个进程称为容器，因此通常也把容器称为“运行的镜像”。</p>
<p>关于对镜像和容器的操作可以查看以下内容。</p>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h3><p>镜像名 = REPOSITORY + : + TAG</p>
<p>如：redis:latest</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images

<span class="token comment"># 从远程仓库搜索镜像信息</span>
<span class="token function">docker</span> search 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 docker save 保存的镜像使用 load 的方式加载</span>
<span class="token function">docker</span> load <span class="token operator">&lt;</span> xx.tar
<span class="token function">docker</span> load -i xx.tar
<span class="token comment"># 使用 docker export 保存的容器使用 import 的方式加载</span>
<span class="token function">docker</span> <span class="token function">import</span> xx.tart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><h4 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save -o xx.tar 镜像名称
<span class="token function">docker</span> save -o xx.tar 镜像id
<span class="token comment"># 举例</span>
<span class="token function">docker</span> save -o xx.tar answerdev/answer:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<img src="/2023/01/19/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230120105502988.png" class="" title="image-20230120105502988">

<h4 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">export</span> -o xx.tar 容器名
<span class="token function">docker</span> <span class="token builtin class-name">export</span> -o xx.tar 容器id
<span class="token comment"># 容器导出为镜像，镜像名举例：redis:latest</span>
<span class="token function">docker</span> commit -a <span class="token string">"作者"</span> -m <span class="token string">"comment"</span> 容器id 镜像名
<span class="token comment"># 举例</span>
<span class="token function">docker</span> <span class="token builtin class-name">export</span> -o xx.tar 5e49f33018e4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="/2023/01/19/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230120111129235.png" class="" title="image-20230120111129235">

<h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><p>拉取镜像是如果不指定标签，则默认拉取最新的的镜像，大部分情况下，最新的镜像标签为 latest</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull 镜像名
<span class="token comment"># 举例</span>
<span class="token function">docker</span> pull ubuntu:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>默认根据当前目录下的 Dockerfile 来构建一个镜像，关于 Dockerfile 的语法可以参考这个链接：<a href="http://www.dockerinfo.net/dockerfile%E4%BB%8B%E7%BB%8D">http://www.dockerinfo.net/dockerfile%E4%BB%8B%E7%BB%8D</a></p>
<p>构建 docker 镜像时可以通过参数对镜像进行设置，详情可以参考这个链接：<a href="https://www.runoob.com/docker/docker-build-command.html">https://www.runoob.com/docker/docker-build-command.html</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build -t <span class="token builtin class-name">.</span>
<span class="token function">docker</span> build -f Dockfile所在的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi 镜像名
<span class="token function">docker</span> rmi 镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看运行中的容器</span>
<span class="token function">docker</span> container <span class="token function">ls</span>
<span class="token comment"># 查看系统中所有的容器信息</span>
<span class="token function">docker</span> <span class="token function">ps</span> -a
<span class="token comment"># 查看容器的元信息</span>
<span class="token function">docker</span> inspect 容器名
<span class="token function">docker</span> inspect 容器id
<span class="token comment"># 查看容器中运行的进程</span>
<span class="token function">docker</span> <span class="token function">top</span> 容器id
<span class="token comment"># 查看容器的输出日志</span>
<span class="token function">docker</span> logs 容器名
<span class="token comment"># 查看容器的端口映射</span>
<span class="token function">docker</span> port 容器id
<span class="token comment"># 查看容器的资源状态</span>
<span class="token function">docker</span> stats
<span class="token comment"># 查看容器中的文件结构更改</span>
<span class="token function">docker</span> <span class="token function">diff</span> 容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>更多参数的使用方法请查看这个链接：<a href="https://www.runoob.com/docker/docker-run-command.html">https://www.runoob.com/docker/docker-run-command.html</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 让容器后台运行，退出容器后，容器不会立即停止运行</span>
<span class="token function">docker</span> run -d --name 容器名 镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>运行后的容器就处于 running 状态了，但容器可能因为一些情况终止运行，此时需要将容器重新启动。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start 容器名
<span class="token function">docker</span> restart 容器 <span class="token function">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop 容器id
<span class="token function">docker</span> stop 容器名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器id /bin/bash
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器名 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="容器与宿主机"><a href="#容器与宿主机" class="headerlink" title="容器与宿主机"></a>容器与宿主机</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 容器与宿主机之间文件拷贝</span>
<span class="token function">docker</span> <span class="token function">cp</span> 宿主机文件路径 容器id:容器文件路径
<span class="token comment"># 拷贝文件举例</span>
<span class="token function">docker</span> <span class="token function">cp</span> /xiyou 96f7f14e99ab:/xiyou/
<span class="token function">docker</span> <span class="token function">cp</span> 96f7f14e99ab:/xiyou/ /xiyou<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="docker服务管理"><a href="#docker服务管理" class="headerlink" title="docker服务管理"></a>docker服务管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动 docker 服务</span>
<span class="token function">service</span> <span class="token function">docker</span> start
<span class="token comment"># 停止 docker 服务</span>
<span class="token function">service</span> <span class="token function">docker</span> stop
<span class="token comment"># 重启 docker 服务</span>
<span class="token function">service</span> <span class="token function">docker</span> restart

<span class="token comment"># 查看 docker 服务信息</span>
<span class="token function">docker</span> info
<span class="token comment"># 查看 docker 版本</span>
<span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装python包</title>
    <url>/2023/01/19/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85python%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这篇文章将介绍 4 种安装 python 包的方式。</p>
<span id="more"></span>

<h2 id="通过conda安装"><a href="#通过conda安装" class="headerlink" title="通过conda安装"></a>通过conda安装</h2><a href="/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/" title="conda的安装和卸载">conda的安装和卸载</a>

<p>在这个链接中搜conda包：<a href="https://anaconda.org/search">https://anaconda.org/search</a>?</p>
<p>如何确定搜到的 conda 包就是你在 <a href="https://pypi.org/">python官网</a> 找到的python包呢？</p>
<ol>
<li>看包对应的github链接</li>
<li>看包对应的官网链接</li>
</ol>
<p>如果一致就表示是同一个包，另一方面，下载量也能从一定程度上反映出该包是否是比较常用的python包。</p>
<img src="/2023/01/19/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85python%E5%8C%85/image-20230119195518538.png" class="" title="image-20230119195518538">

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="通过pip安装"><a href="#通过pip安装" class="headerlink" title="通过pip安装"></a>通过pip安装</h2><p>pip 工具可以通过 conda 安装，如果你有 root 权限的话，也可以通过 apt 安装。</p>
<p><strong>所有</strong> python 包都可以在官网搜索到：<a href="https://pypi.org/">https://pypi.org/</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="pip镜像源"><a href="#pip镜像源" class="headerlink" title="pip镜像源"></a>pip镜像源</h3><table>
<thead>
<tr>
<th align="left">源名称</th>
<th align="left">源地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">清华大学</td>
<td align="left"><a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></td>
</tr>
<tr>
<td align="left">中国科学技术大学</td>
<td align="left"><a href="https://pypi.mirrors.ustc.edu.cn/simple">https://pypi.mirrors.ustc.edu.cn/simple</a></td>
</tr>
<tr>
<td align="left">阿里云</td>
<td align="left"><a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></td>
</tr>
<tr>
<td align="left">华为云</td>
<td align="left"><a href="https://repo.huaweicloud.com/repository/pypi/simple">https://repo.huaweicloud.com/repository/pypi/simple</a></td>
</tr>
<tr>
<td align="left">豆瓣</td>
<td align="left"><a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></td>
</tr>
</tbody></table>
<p>使用不同镜像源安装python包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从 python 官网安装 requests 包</span>
pip <span class="token function">install</span> requests
<span class="token comment"># 从豆瓣源安装 requests 包</span>
pip <span class="token function">install</span> requests -i https://pypi.douban.com/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="通过whl文件安装"><a href="#通过whl文件安装" class="headerlink" title="通过whl文件安装"></a>通过whl文件安装</h2><p>whl 文件是 python 包的另一种保存格式，你可以把他理解为一个压缩包，看起来它跟源码压缩包没什么两样，不过有的作者会提供针对不同平台编译好的 whl 版本，这样如果我们下载符合我们平台（win/mac/linux、python版本）的 whl 文件，就可以直接安装而不会遇到可能会发生的软件依赖报错了。</p>
<p>从官网或其他途径（如 github）可获得某个python 包的 whl 版本。</p>
<p>举个例子，通过这个链接可以下载 requests 包的不同版本的源码和whl文件：<a href="https://pypi.doubanio.com/simple/requests">https://pypi.doubanio.com/simple/requests</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> xx.whl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="通过源码安装"><a href="#通过源码安装" class="headerlink" title="通过源码安装"></a>通过源码安装</h2><p>源码可能通过多种形式打包，如 zip，tar，xx.gz…。源码解压后通常包含一个 setup.py 文件，进入到setup.py文件所在的目录，然后使用以下命令安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="如何选择安装方式"><a href="#如何选择安装方式" class="headerlink" title="如何选择安装方式"></a>如何选择安装方式</h2><p><strong>按优先级从高到低依次排序如下：</strong></p>
<ol>
<li>在 conda 虚拟环境中优先使用 conda 安装</li>
<li>使用 pip 从官网或官网镜像中安装</li>
<li>从源码安装</li>
<li>从 whl 文件安装，有些作者会针对不同平台（mac，linux，win）发布编译好的 whl 文件，这样安装就不用处理软件的依赖了。</li>
</ol>
<h2 id="如何安装指定版本的Python包"><a href="#如何安装指定版本的Python包" class="headerlink" title="如何安装指定版本的Python包"></a>如何安装指定版本的Python包</h2><ol>
<li>使用 pip 安装时指定版本</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token assign-left variable">requests</span><span class="token operator">==</span><span class="token number">2.28</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>下载对应版本的 whl 文件安装</li>
<li>下载对应版本的源码进行安装</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新Python包</span>
pip <span class="token function">install</span> -U jupyter_server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="如何卸载Python"><a href="#如何卸载Python" class="headerlink" title="如何卸载Python"></a>如何卸载Python</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>python</tag>
        <tag>python包</tag>
      </tags>
  </entry>
  <entry>
    <title>动态链接库的查找</title>
    <url>/2023/01/19/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>动态链接库是一个共享函数集合。我们编写程序时，可以利用其他人或自己编译好的动态链接库中的函数。当然，动态链接库之间也可以互相依赖，比如：动态链接库A在执行时可能需要使用动态链接库B中的函数。此时需要<strong>动态链接器</strong>在执行A中调用动态链接库B的代码时链接到B来执行代码。</p>
<span id="more"></span>

<p>那么<strong>动态链接器</strong>是怎样找到动态链接库B的呢？它通常是按照这个顺序去找动态链接库的：</p>
<ol>
<li>编译代码时通过<code>-Wl -rpath=&quot;&quot;</code>指定的rpath路径</li>
<li>通过环境变量<code>LD_LIBRARY_PATH</code>指定的动态库搜索路径</li>
<li>通过<code>xx.so</code>文件中的<code>RUNPATH</code>或<code>RPATH</code>指定的路径</li>
<li>动态链接器的配置文件中配置的路径<code>/etc/ld.so.conf</code></li>
<li>默认寻找路径<code>/lib</code>和<code>/usr/lib</code></li>
</ol>
<p>如果没找到就报类似下面这样的错误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error <span class="token keyword">while</span> loading shared libraries: libxxx.so: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>动态链接库在 Linux 系统中是通常以 .so 结尾。通常，我们可以通过 patchelf 设置 xx.so文件中配置的 rpath 信息来设置查找动态链接库的位置（RPATH的优先级高于系统默认配置的路径）</p>
<h2 id="查看动态链接器找到的动态链接库位置"><a href="#查看动态链接器找到的动态链接库位置" class="headerlink" title="查看动态链接器找到的动态链接库位置"></a>查看动态链接器找到的动态链接库位置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看动态链接器找到的动态链接库位置</span>
ldd xx.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="/2023/01/19/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E6%9F%A5%E6%89%BE/image-20230119143708466.png" class="" title="image-20230119143708466">

<h2 id="查看rpath"><a href="#查看rpath" class="headerlink" title="查看rpath"></a>查看rpath</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 xx.so 文件中设置的 RPATH</span>
readelf -d xx.so <span class="token operator">|</span> <span class="token function">grep</span> <span class="token environment constant">PATH</span>
patchelf --print-rpath xx.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>RPATH 中的 $ORIGIN 表示的是当前 xx.so 文件所在的目录，”..” 表示的是当前目录的父目录。</p>
<img src="/2023/01/19/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E6%9F%A5%E6%89%BE/image-20230119152119799.png" class="" title="image-20230119152119799">

<p>可以看到 _igraph.abi3.so 中的 RPATH 为 <code>$ORIGIN/../../../</code>，翻译过来为<code>/home/txb/miniconda3/lib</code>，因为 _igraph.abi3.so 所在的目录为 <code>/home/txb/miniconda3/lib/python3.9/site-packages/igraph</code>，因此该动态链接库需要的其他动态链接库都是优先在 <code>/home/txb/miniconda3/lib</code>目录下找到的，当然，根据前文讲到的动态链接器的查找顺序，如果在该目录下没有找到对应的动态链接库，则会根据上文中提到的动态链接库查找顺序继续查找，如上文中的 libc.so.6 是在 /lib 目录下找到的。</p>
<h2 id="设置rpath"><a href="#设置rpath" class="headerlink" title="设置rpath"></a>设置rpath</h2><p>有时动态链接器在非预期的目录去找动态链接库，为了让动态链接器优先在某个目录下寻找动态链接库，可以通过设置 rpath 路径的方式来实现。因为在查找动态链接库时，rpath 的优先级高于 /etc/ld.so.conf 中配置的目录，也高于 /lib 和 /usr/lib 目录。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置动态链接库中的 rpath</span>
patchelf --set-rpath /lib xx.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上文中的<code>_igraph.abi3.so</code> 的 RPATH 刚开始指向的是 <code>/home/txb/miniconda3/lib</code> 目录，如果将 rpath 修改为<code>/lib</code>目录，再次使用 <code>ldd _igraph.abi3.so</code> 查看各动态链接库的位置，发现动态链接器是优先在 <code>/lib</code>目录下找的。</p>
<img src="/2023/01/19/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E6%9F%A5%E6%89%BE/image-20230119153945148.png" class="" title="image-20230119153945148">

<h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><p>使用 conda 安装：</p>
<p><a href="https://anaconda.org/search?q=patchelf">patchelf安装链接</a></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果 xx.so 文件设置了 RUNPATH，RPATH 设置的目录会被忽略。此时需要通过设置 LD_LIBRARY_PATH 这个环境变量来让动态链接器优先查找某个目录。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>报错</tag>
        <tag>动态链接库</tag>
      </tags>
  </entry>
  <entry>
    <title>报错-python</title>
    <url>/2023/01/17/%E6%8A%A5%E9%94%99-python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="没有import命令？"><a href="#没有import命令？" class="headerlink" title="没有import命令？"></a>没有import命令？</h2><span id="more"></span>

<h3 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h3><p>import xxx 是 python 导入包的语法，并不能被 bash 解释执行。</p>
<h3 id="报错截图："><a href="#报错截图：" class="headerlink" title="报错截图："></a>报错截图：</h3><img src="/2023/01/17/%E6%8A%A5%E9%94%99-python/image-20230117194238450.png" class="" title="image-20230117194238450">

<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>在 python 脚本或 python 交互环境中运行。</p>
<img src="/2023/01/17/%E6%8A%A5%E9%94%99-python/image-20230117194511329.png" class="" title="image-20230117194511329"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>报错</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>安装LESYMAP</title>
    <url>/2023/01/17/%E5%AE%89%E8%A3%85LESYMAP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境信息说明"><a href="#环境信息说明" class="headerlink" title="环境信息说明"></a>环境信息说明</h1><table>
<thead>
<tr>
<th>R版本</th>
<th>4.1.2</th>
</tr>
</thead>
<tbody><tr>
<td>libpath</td>
<td>/home/txb/lesymap (可自行修改)</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>如何使用指定 libpath 下的 R 包可以参考 <a href="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/" title="在rstudio-server中使用R包的不同版本">在rstudio-server中使用R包的不同版本</a></p>
<p>这个教程会将 R 包安装在 /home/txb/lesymap 中，因此需要添加这个 libpath，代码如下：</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R"># 添加 libpath: &#x2F;home&#x2F;txb&#x2F;lesymap
.libPaths(c(&quot;&#x2F;home&#x2F;txb&#x2F;lesymap&quot;, .libPaths()))

# 添加后该 libpath 只在当前 session 暂时被添加
# 如果需要每次启动 R 时自动添加，需要将以上代码写入 ~&#x2F;.Rprofile 中，然后关闭当前 session，再 Start New Session 即可生效
file.edit(&quot;~&#x2F;.Rprofile&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以下步骤如果下载 github 相关文件太慢，可以参考我这篇文章使用 github 代理：<a href="/2022/12/31/github%E8%AE%BF%E9%97%AE%E5%87%BA%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/" title="github访问出错的解决办法">github访问出错的解决办法</a></p>
<img src="/2023/01/17/%E5%AE%89%E8%A3%85LESYMAP/image-20230118121422537.png" class="" title="image-20230118121422537">



<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1.安装依赖包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 Rcpp 等依赖包</span>
mylist <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"Rcpp"</span>, <span class="token string">"RcppArmadillo"</span>, <span class="token string">"graphics"</span>, <span class="token string">"grDevices"</span>, 
           <span class="token string">"magic"</span>, <span class="token string">"magrittr"</span>, <span class="token string">"misc3d"</span>, <span class="token string">"pixmap"</span>,
           <span class="token string">"psych"</span>, <span class="token string">"rsvd"</span>, <span class="token string">"stats"</span>, <span class="token string">"utils"</span>, 
           <span class="token string">"lmPerm"</span>, <span class="token string">"nparcomp"</span> <span class="token punctuation">)</span>
needindx <span class="token operator">=</span>  <span class="token operator">!</span> mylist %in% installed.packages<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>any<span class="token punctuation">(</span>needindx<span class="token punctuation">))</span> install.packages<span class="token punctuation">(</span>mylist<span class="token punctuation">[</span>needindx<span class="token punctuation">]</span>, lib <span class="token operator">=</span> <span class="token string">"/home/txb/lesymap"</span><span class="token punctuation">)</span>

<span class="token comment"># 安装 remotes</span>
install.packages<span class="token punctuation">(</span><span class="token string">"remotes"</span>, lib <span class="token operator">=</span> <span class="token string">"/home/txb/lesymap"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-安装ITKR"><a href="#2-安装ITKR" class="headerlink" title="2.安装ITKR"></a>2.安装ITKR</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 ITKR</span>
library<span class="token punctuation">(</span><span class="token string">"remotes"</span>, lib <span class="token operator">=</span> <span class="token string">"/home/txb/lesymap"</span><span class="token punctuation">)</span>
install_github<span class="token punctuation">(</span><span class="token string">"stnava/ITKR"</span>, lib <span class="token operator">=</span> <span class="token string">"/home/txb/lesymap"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="3-安装ANTsRCore"><a href="#3-安装ANTsRCore" class="headerlink" title="3.安装ANTsRCore"></a>3.安装ANTsRCore</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 RcppEigen</span>
install.packages<span class="token punctuation">(</span><span class="token string">"RcppEigen"</span>, lib <span class="token operator">=</span> <span class="token string">"/home/txb/testmap"</span><span class="token punctuation">)</span>

<span class="token comment"># ANTsRCore，可根据实际情况指定软件版本 https://github.com/ANTsX/ANTsRCore/releases/</span>
<span class="token function">wget</span> -O ANTsRCore.tar.gz https://github.com/ANTsX/ANTsRCore/releases/download/v0.7.4.9/ANTsRCore_0.7.4.9_R_x86_64-pc-linux-gnu_R4.1.tar.gz
R CMD INSTALL ANTsRCore.tar.gz --library<span class="token operator">=</span><span class="token string">"/home/txb/lesymap"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-安装ANTsR"><a href="#4-安装ANTsR" class="headerlink" title="4.安装ANTsR"></a>4.安装ANTsR</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 ANTsR</span>
<span class="token function">wget</span> -O ANTsR.tar.gz https://github.com/ANTsX/ANTsR/releases/download/v0.5.7.4/ANTsR_0.5.7.4_R_x86_64-pc-linux-gnu_R4.1.tar.gz
R CMD INSTALL ANTsR.tar.gz --library<span class="token operator">=</span><span class="token string">"/home/txb/lesymap"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="5-安装LESYMAP"><a href="#5-安装LESYMAP" class="headerlink" title="5.安装LESYMAP"></a>5.安装LESYMAP</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 lesymap</span>
library<span class="token punctuation">(</span><span class="token string">"RcppEigen"</span><span class="token punctuation">)</span>
remotes::install_git<span class="token punctuation">(</span><span class="token string">"https://github.com/dorianps/LESYMAP"</span>, lib <span class="token operator">=</span> <span class="token string">"/home/txb/lesymap"</span><span class="token punctuation">)</span>

<span class="token comment"># 如果安装 lesymap 报错 “RcppEigen 包 not found”，再次安装 RcppEigen 并 library 它</span>
install.packages<span class="token punctuation">(</span><span class="token string">"RcppEigen"</span>, lib <span class="token operator">=</span> <span class="token string">"/home/txb/lesymap"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="安装成功截图"><a href="#安装成功截图" class="headerlink" title="安装成功截图"></a>安装成功截图</h2><img src="/2023/01/17/%E5%AE%89%E8%A3%85LESYMAP/image-20230118101417295.png" class="" title="image-20230118101417295">

<img src="/2023/01/17/%E5%AE%89%E8%A3%85LESYMAP/image-20230118101338295.png" class="" title="image-20230118101338295">

<img src="/2023/01/17/%E5%AE%89%E8%A3%85LESYMAP/image-20230118102125916.png" class="" title="image-20230118102125916">

<img src="/2023/01/17/%E5%AE%89%E8%A3%85LESYMAP/image-20230118104134386.png" class="" title="image-20230118104134386">

<img src="/2023/01/17/%E5%AE%89%E8%A3%85LESYMAP/image-20230118105615953.png" class="" title="image-20230118105615953"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>R包</tag>
      </tags>
  </entry>
  <entry>
    <title>permission denied</title>
    <url>/2023/01/12/permission-denied/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>造成 permission denied 的原因有很多，这个报错的意识其实就是操作不被许可，我们也可以通俗的理解为权限不足。</p>
<p>而在 Linux 你主要操作的对象就是文件了，因此<strong>通常此类报错与文件的权限有关</strong>。说到文件的权限，你可以去看看我的另一篇文章，其中是搭配有视频演示的。<a href="/2022/12/30/%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%92%8C%E5%B1%9E%E6%80%A7-chmod-chown/" title="文件的权限和属性(chmod,chown)">文件的权限和属性(chmod,chown)</a></p>
<p>这里我就不系统地说了，系统的论述你可以查看上面的链接。</p>
<span id="more"></span>

<h2 id="目录的权限："><a href="#目录的权限：" class="headerlink" title="目录的权限："></a>目录的权限：</h2><p>对于目录来说，如果你不能 cd（change work directory）到这个目录，说明你没有对这个目录的可执行权限。</p>
<p>如果你不能使用 ls 查看目录下的内容，说明你对这个目录没有可读权限。</p>
<p>如果你不能使用 vim/nano，重定向的方式在该目录下创建文件，说明你对这个目录没有可写权限。</p>
<p>以上 3 种情况，都会报错 <strong>Permission Denied</strong>。</p>
<img src="/2023/01/12/permission-denied/image-20230113230214256.png" class="" title="image-20230113230214256">

<p>如果目录的所有者是你，以上 3 种情况下产生的报错都可以通过给自己加上对应的权限来解决。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给目录的所有者加上可读权限</span>
<span class="token function">chmod</span> u+r directory
<span class="token comment"># 给目录的所有者加上可写权限</span>
<span class="token function">chmod</span> u+w directory
<span class="token comment"># 给目录的所有者加上可执行权限</span>
<span class="token function">chmod</span> u+x directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="/2023/01/12/permission-denied/image-20230113230819793.png" class="" title="image-20230113230819793">

<img src="/2023/01/12/permission-denied/image-20230113231058436.png" class="" title="image-20230113231058436">

<img src="/2023/01/12/permission-denied/image-20230113231256491.png" class="" title="image-20230113231256491">

<p>使用 ls -l 可以查看文件的权限信息，对于 ls -l 的输出结果的说明可以查看这篇文章 <a href="/2022/12/30/%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%92%8C%E5%B1%9E%E6%80%A7-chmod-chown/" title="文件的权限和属性(chmod,chown)">文件的权限和属性(chmod,chown)</a></p>
<h2 id="文件的权限："><a href="#文件的权限：" class="headerlink" title="文件的权限："></a>文件的权限：</h2><p>对于文件来说，如果你不能读取到一个文件的内容，说明你对该文件没有可读的权限。</p>
<p>如果你不能向一个文件写入内容，说明你对该文件没有可写的权限。</p>
<p>如果你不能执行 1 个文件，说明你对该文件没有可执行的权限。</p>
<img src="/2023/01/12/permission-denied/image-20230113231941275.png" class="" title="image-20230113231941275">

<p>同理如果你是该文件的所有者的话，你也可以通过给自己加上权限来解决 <strong>Permission denied</strong> 的报错。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给文件的所有者加上可读权限</span>
<span class="token function">chmod</span> u+r <span class="token function">file</span>
<span class="token comment"># 给文件的所有者加上可写权限</span>
<span class="token function">chmod</span> u+w <span class="token function">file</span>
<span class="token comment"># 给文件的所有者加上可执行权限</span>
<span class="token function">chmod</span> u+x <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="关于文件的可执行"><a href="#关于文件的可执行" class="headerlink" title="关于文件的可执行"></a>关于文件的可执行</h2><p>值得一提的是，这里的文件的可执行描述的是将文件的路径的以命令的方式输入在终端中执行，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./xiyou.txt
/tmp/xiyouyun/xiyou/xiyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果你将文件所在的目录加入到 PATH 环境变量后，你也可以直接输入文件名来执行文件，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/tmp/xiyouyun/xiyou
<span class="token comment"># 注意它于 ./xiyou.txt 的区别</span>
xiyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<img src="/2023/01/12/permission-denied/image-20230113232954719.png" class="" title="image-20230113232954719">

<p>关于 PATH 的原理你可以查看这篇文章 <a href="/2023/01/02/command-not-found/" title="command not found">command not found</a></p>
<p>而如果你使用另一个可执行程序来解释 1 个文件，此时只需要对该文件具有可读权限，就能对该文件进行解释了，此时你需要对该解释程序就有可执行权限，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python xiyou.py
perl xiyou.pl
Rscript xiyou.R
<span class="token function">bash</span> xiyou.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 python 来解释一个 xiyou.py 文件，只要你对 python 这个解释器具有可执行权限，又对 xiyou.py 具有可执行权限，就不会抛出 “Permission denied” 的报错，反之就会抛出 “Permission denied” 的错误。</p>
<h2 id="如何查看一个解释程序的权限"><a href="#如何查看一个解释程序的权限" class="headerlink" title="如何查看一个解释程序的权限"></a>如何查看一个解释程序的权限</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可以查看一个解释程序文件的位置</span>
<span class="token function">which</span> python
<span class="token comment"># 查看解释程序对应文件的权限</span>
<span class="token function">ls</span> -l <span class="token variable"><span class="token variable">`</span><span class="token function">which</span> python<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>











<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>报错</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>conda镜像源汇总</title>
    <url>/2023/01/12/conda%E9%95%9C%E5%83%8F%E6%BA%90%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="conda换源教程"><a href="#conda换源教程" class="headerlink" title="conda换源教程"></a>conda换源教程</h1><p>conda 为什么要换源？有两个原因，一是因为官方源对应的服务器位于国外，下载速度慢，或者根本访问不了，需要添加国内镜像源。二是因为就算添加了国内镜像源，已知的国内镜像源没有一个是绝对稳定的，都有崩溃不能访问的记录，此时需要切换为其他的国内镜像源。</p>
<span id="more"></span>

<p>下图是中科大源崩溃不能使用的记录，重试多次后稳定出现 HTTP error：</p>
<img src="/2023/01/12/conda%E9%95%9C%E5%83%8F%E6%BA%90%E6%B1%87%E6%80%BB/image-20230111191522768.png" class="" title="image-20230111191522768">

<h2 id="1-删除之前配置的镜像源"><a href="#1-删除之前配置的镜像源" class="headerlink" title="1.删除之前配置的镜像源"></a>1.删除之前配置的镜像源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --remove-key channels<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="2-新增镜像源-以北京外国语大学源为例"><a href="#2-新增镜像源-以北京外国语大学源为例" class="headerlink" title="2.新增镜像源(以北京外国语大学源为例)"></a>2.新增镜像源(以北京外国语大学源为例)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="3-清除之前本地保存的镜像索引"><a href="#3-清除之前本地保存的镜像索引" class="headerlink" title="3.清除之前本地保存的镜像索引"></a>3.清除之前本地保存的镜像索引</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda clean -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h1 id="清华大学"><a href="#清华大学" class="headerlink" title="清华大学"></a>清华大学</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="北京大学"><a href="#北京大学" class="headerlink" title="北京大学"></a>北京大学</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels conda config --add channels https://mirrors.pku.edu.cn/anaconda/pkgs/main/
conda config --add channels conda config --add channels https://mirrors.pku.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels conda config --add channels https://mirrors.pku.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="南京大学"><a href="#南京大学" class="headerlink" title="南京大学"></a>南京大学</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirror.nju.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirror.nju.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirror.nju.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="哈尔滨工业大学"><a href="#哈尔滨工业大学" class="headerlink" title="哈尔滨工业大学"></a>哈尔滨工业大学</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.hit.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.hit.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.hit.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="西安交通大学"><a href="#西安交通大学" class="headerlink" title="西安交通大学"></a>西安交通大学</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.xjtu.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.xjtu.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.xjtu.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="北京交通大学"><a href="#北京交通大学" class="headerlink" title="北京交通大学"></a>北京交通大学</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirror.bjtu.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirror.bjtu.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirror.bjtu.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="重庆邮电大学"><a href="#重庆邮电大学" class="headerlink" title="重庆邮电大学"></a>重庆邮电大学</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.cqupt.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.cqupt.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.cqupt.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="南方科技大学"><a href="#南方科技大学" class="headerlink" title="南方科技大学"></a>南方科技大学</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.sustech.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.sustech.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.sustech.edu.cn/anaconda/cloud/bioconda/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/free
conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/main
conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/conda-forge
conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/bioconda
conda config --set show_channel_urls <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="中科大"><a href="#中科大" class="headerlink" title="中科大"></a>中科大</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>conda</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter使用技巧</title>
    <url>/2023/01/10/jupyter%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jupyter识别kernel"><a href="#jupyter识别kernel" class="headerlink" title="jupyter识别kernel"></a>jupyter识别kernel</h1><p>jupyter 是借助 kernel 来运行程序的，在创建文件的时候，我们可以选择已经安装的kernel来运行文件。</p>
<p>如：<a href="https://anaconda.org/conda-forge/r-irkernel">r-irkernel 1.3.1</a>、<a href="https://anaconda.org/conda-forge/ipykernel">ipykernel 6.20.1</a>。</p>
<span id="more"></span>

<p>kernel 可以调用当前环境中安装的解释器（R，python）来执行程序，以下的命令在 jupyter 所在的虚拟环境中执行，jupyter可以自动识别到本环境下的 kernel 。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> r-base<span class="token operator">=</span><span class="token number">4.0</span>.1 -y -vv
conda <span class="token function">install</span> r-irkernel -y -vv
<span class="token comment"># 如果使用 jupyter lab 的话还需要安装 nodejs 和 text-shortcuts 插件</span>
conda <span class="token function">install</span> nodejs -y -vv
jupyter labextension <span class="token function">install</span> @techrah/text-shortcuts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="重启Jupyter的方法"><a href="#重启Jupyter的方法" class="headerlink" title="重启Jupyter的方法"></a>重启Jupyter的方法</h1><p>所谓重启，其实包含两步，杀死之前的 jupyter 进程，再次运行 jupyter 进程</p>
<ol>
<li>杀死之前运行的 jupyter 进程</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ux <span class="token operator">|</span> <span class="token function">grep</span> jupyter <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>启动 jupyter：在终端执行命令</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果 jupyter 安装在 conda 的 jupyter 环境中，需要使用下面这条命令激活虚拟环境，然后再运行 jupyter</span>
<span class="token comment"># 如果 jupyter 安装在 xxx 环境，则运行 conda activate xxx</span>
conda activate jupyter
<span class="token comment"># 后台运行 jupyter notebook 的方式</span>
<span class="token function">nohup</span> jupyter notebook <span class="token operator">></span>~/jupyter.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>

<span class="token comment"># 后台运行 jupyter lab 的方式</span>
<span class="token function">nohup</span> jupyter lab <span class="token operator">></span>~/jupyterlab.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="jupyter使用其他conda环境中的kernel"><a href="#jupyter使用其他conda环境中的kernel" class="headerlink" title="jupyter使用其他conda环境中的kernel"></a>jupyter使用其他conda环境中的kernel</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>如果想要在 jupyter 中使用其他 conda 环境中的kernel（如：ipykernel，r-irkernel），需要在安装 jupyter 对应的虚拟环境下安装 nb_conda 插件，然后在其他的虚拟环境中安装对应的 kernel。nb_conda 可以识别到其他 conda 虚拟环境中的 kernel。</p>
<pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">conda activate jupyter
conda install nb_conda -y -vv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>安装 nb_conda 后需要重启 jupyter，否则点击 Conda 栏会报错。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 杀死当前的 jupyter 进程</span>
<span class="token function">ps</span> -ux <span class="token operator">|</span> <span class="token function">grep</span> jupyter <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9
<span class="token comment"># 运行 jupyter notebook（以下两个命令根据实际情况选择）</span>
<span class="token comment">## 运行 jupyter notebook</span>
<span class="token function">nohup</span> jupyter notebook <span class="token operator">></span>~/jupyter.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span> 
<span class="token comment">## 运行 jupyter lab</span>
<span class="token function">nohup</span> jupyter lab <span class="token operator">></span>~/jupyterlab.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="/2023/01/10/jupyter%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230111184314824.png" class="" title="image-20230111184314824">

<p>上图中显示的效果是在 jupyter 所在的虚拟环境中安装 nb_conda 后，jupyter 识别到了各虚拟环境中的 kernel。选择不同的 kernel 即可实现切换软件版本的效果。如在虚拟环境 A 中安装 r4.0.1，在虚拟环境 B 中安装 r4.2.2，切换到 A 环境中的 r-irkernel 就使用 r4.0.1来运行代码，切换到 B 环境中的 r-irkernel 就使用 r4.2.2来运行代码。当然，能够识别的前提是你应该在 A 和 B 中 分别安装了 r-base 和 r-irkernel。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建两个虚拟环境，分别名为 A 和 B</span>
conda create -n A -y -vv
conda create -n B -y -vv
<span class="token comment"># 安装 r-base 和 r-irkernel</span>
conda <span class="token function">install</span> -n A r-base<span class="token operator">=</span><span class="token number">4.0</span>.1 r-irkernel -y -vv
conda <span class="token function">install</span> -n B r-base<span class="token operator">=</span><span class="token number">4.2</span>.2 r-irkernel -y -vv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看虚拟环境 A 中对应的 R 版本信息：</p>
<img src="/2023/01/10/jupyter%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230111195258514.png" class="" title="image-20230111195258514">



<p>切换 kernel 为虚拟环境 B 的 r-irkernel：</p>
<img src="/2023/01/10/jupyter%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230111195459384.png" class="" title="image-20230111195459384">

<p>查看虚拟环境 B 中对应的 R 版本信息：</p>
<img src="/2023/01/10/jupyter%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230111195612310.png" class="" title="image-20230111195612310">

<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>对于 ipykernel, 还有另一种方式让 jupyter 识别到它。想要使用哪个 conda 虚拟环境中的 python，就在哪个环境安装ipykernel（<strong>不需要重启</strong>），不过如果同时想要在 jupyter 使用 R 和 python，推荐使用 nb_conda。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如我想要在jupyter中使用sradownload的环境，其中安装了numpy作为演示</span>
conda activate sradownload

conda <span class="token function">install</span> ipykernel -y -vv

<span class="token comment"># 如果安装 ipykernel 后 jupyter 没有识别到，可以在安装 jupyter 的 conda 环境中执行类似下面的命令</span>
<span class="token comment"># 这个命令会让 jupyter 识别到虚拟环境 sradownload, 并在jupyter 中显示为 Python [conda env:sradownload]</span>
python -m ipykernel <span class="token function">install</span> --user --name sradownload --display-name <span class="token string">"Python [conda env:sradownload]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter部署教程</title>
    <url>/2023/01/06/jupyter%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>jupyter 分为 jupyter notebook 和 jupyter lab，两者选其一配置即可。</strong></p>
<p>jupyter 官网：<a href="https://jupyter.org/">https://jupyter.org/</a></p>
<span id="more"></span>

<iframe src="//player.bilibili.com/player.html?aid=820076722&bvid=BV1PG4y1A7rD&cid=960113408&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h2 id="jupyter-notebook-样例："><a href="#jupyter-notebook-样例：" class="headerlink" title="jupyter notebook 样例："></a>jupyter notebook 样例：</h2><p><a href="https://jupyter.org/try-jupyter/retro/notebooks/?path=notebooks/Intro.ipynb">https://jupyter.org/try-jupyter/retro/notebooks/?path=notebooks/Intro.ipynb</a></p>
<img src="/2023/01/06/jupyter%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/image-20230106135908462.png" class="" title="image-20230106135908462">

<h2 id="jupyter-lab-样例："><a href="#jupyter-lab-样例：" class="headerlink" title="jupyter lab 样例："></a>jupyter lab 样例：</h2><p><a href="https://jupyter.org/try-jupyter/lab/">https://jupyter.org/try-jupyter/lab/</a></p>
<img src="/2023/01/06/jupyter%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/image-20230106135742564.png" class="" title="image-20230106135742564">

<h2 id="1-1-使用pip安装"><a href="#1-1-使用pip安装" class="headerlink" title="1-1.使用pip安装"></a>1-1.使用pip安装</h2><p>安装 jupyter notebook：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> jupyter -i https://pypi.douban.com/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装 jupyter lab：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 jupyter lab 的方式</span>
pip <span class="token function">install</span> jupyterlab -i https://pypi.douban.com/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="1-2-使用conda安装"><a href="#1-2-使用conda安装" class="headerlink" title="1-2.使用conda安装"></a>1-2.使用conda安装</h2><p>如果你需要使用多个虚拟环境，推荐使用 conda 安装 jupyter notebook。</p>
<p>安装 jupyter notebook：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 jupyter notebook, python版本可以自行指定</span>
conda create -n jupyter <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span> -y -vv
conda activate jupyter
conda <span class="token function">install</span> jupyter -y -vv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>安装 jupyter lab：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 jupyter lab, python版本可以自行指定</span>
conda create -n jupyterlab <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span> -y -vv
conda activate jupyterlab
conda <span class="token function">install</span> jupyterlab -y -vv
<span class="token comment"># jupyter lab 中有些很好用的插件，编译插件需要安装 nodejs，版本可以根据情况自行设置</span>
conda <span class="token function">install</span> nodejs -y -vv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你可能会想到在 conda 的虚拟环境中使用 pip 安装，因为它的安装速度更快。如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n jupyter <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span> -y -vv
conda activate jupyter
<span class="token comment"># 安装 jupyter notebook</span>
pip <span class="token function">install</span> jupyter -i https://pypi.douban.com/simple
<span class="token comment"># 安装 jupyter lab</span>
pip <span class="token function">install</span> jupyterlab -i https://pypi.douban.com/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>conda 官方建议在 conda 中尽可能使用 conda install 的方式来安装包，jupyter 官方提供的安装方式是使用 pip 安装的，见仁见智吧，我认为两种方式都可以，使用 conda install 安装符合 conda 的使用规范，使用 pip 安装更快。如果使用 pip 安装后部署报错，可以新建一个虚拟环境，然后用 conda 安装。</p>
<h2 id="2-生成jupyter配置文件"><a href="#2-生成jupyter配置文件" class="headerlink" title="2.生成jupyter配置文件"></a>2.生成jupyter配置文件</h2><p>为 jupyter notebook 生成配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter notebook --generate-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>为 jupyter lab 生成配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter lab --generate-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="3-设置jupyter访问密码（推荐12位）"><a href="#3-设置jupyter访问密码（推荐12位）" class="headerlink" title="3.设置jupyter访问密码（推荐12位）"></a>3.设置jupyter访问密码（推荐12位）</h2><p>为了安全，密码需要设置得复杂点，包含数字，英文字母大小写和特殊字符。</p>
<p>为 jupyter notebook 设置访问密码，需要两次输入密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter notebook password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>为 jupyter lab 设置访问密码，需要两次输入密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter lab password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="4-设置jupyter运行端口"><a href="#4-设置jupyter运行端口" class="headerlink" title="4.设置jupyter运行端口"></a>4.设置jupyter运行端口</h2><p>jupyter notebook 设置运行端口：</p>
<p><strong>以下代码中的 9527 表示运行端口，需要自行修改为你想要分配的端口</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置 jupyter notebook 运行端口，以下 5 行是一条完整的命令，执行一次就行</span>
<span class="token function">cat</span> <span class="token operator">>></span> ~/.jupyter/jupyter_notebook_config.py <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
c.NotebookApp.ip='*'  # 允许远程连接
c.NotebookApp.open_browser = False 
c.NotebookApp.port = 9527  # jupyter notebook 运行端口，根据实际情况设置
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>jupyter lab 设置运行端口：</p>
<p><strong>以下代码中的 9527 表示运行端口，需要自行修改为你想要分配的端口</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置 jupyter lab 运行端口，以下 6 行是一条完整的命令，执行一次就行</span>
<span class="token function">cat</span> <span class="token operator">>></span> ~/.jupyter/jupyter_lab_config.py <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
c.ServerApp.allow_remote_access = True  # 
c.LabServerApp.open_browser = False
c.ServerApp.ip = '*'
c.ServerApp.port = 9527 # jupyter lab 运行端口，根据实际情况设置
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="5-运行"><a href="#5-运行" class="headerlink" title="5.运行"></a>5.运行</h2><p>如果你之前有运行 jupyter 的话，为了防止干扰后面的运行，可以使用这个命令杀死之前运行的 jupyter 进程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ux <span class="token operator">|</span> <span class="token function">grep</span> jupyter <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>jupyter notebook 运行命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> jupyter notebook <span class="token operator">></span>~/jupyter.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>jupyter lab 运行命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> jupyter lab <span class="token operator">></span>~/jupyterlab.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="6-查看jupyter运行状态"><a href="#6-查看jupyter运行状态" class="headerlink" title="6.查看jupyter运行状态"></a>6.查看jupyter运行状态</h2><p>查看 jupyter notebook 运行状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/jupyter.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看 jupyter notebook 运行状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/jupyterlab.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="7-访问jupyter"><a href="#7-访问jupyter" class="headerlink" title="7.访问jupyter"></a>7.访问jupyter</h2><p>访问链接为 http://域名:端口，如:</p>
<ul>
<li><a href="http://localhost:8888/">http://localhost:8888</a></li>
<li><a href="http://xiyoucloud.net:8888/">http://xiyoucloud.net:8888</a></li>
</ul>
<p><strong>开启 jupyter 的远程访问是不安全的，密码或token并不能保证安全，因此建议使用完毕后关闭jupyter服务</strong></p>
<p>这里的不安全是指双方通信的数据可能会被第三方窃取。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭开启的 jupyter 进程</span>
<span class="token function">ps</span> -ux <span class="token operator">|</span> <span class="token function">grep</span> jupyter <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>如果运行后端口并未改变，说明之前配置文件时操作方式不对，导致配置未生效，此时应该重新从<a href="#2.%E7%94%9F%E6%88%90jupyter%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2.生成jupyter配置文件</a>开始配置</strong></p>
<p>运行报错截图：</p>
<img src="/2023/01/06/jupyter%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/image-20230111193255920.png" class="" title="image-20230111193255920">

<p>正确的配置文件后5行:</p>
<p><strong>注意：以下图片中的 9527 应该显示为你实际配置的端口号</strong></p>
<p>jupyter notebook:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -n <span class="token number">5</span> ~/.jupyter/jupyter_lab_config.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="/2023/01/06/jupyter%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/image-20230111193622294.png" class="" title="image-20230111193622294">

<p>jupyter lab:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -n <span class="token number">5</span> ~/.jupyter/jupyter_notebook_config.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="/2023/01/06/jupyter%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/image-20230111193745282.png" class="" title="image-20230111193745282">

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>软件安装</tag>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>无root权限如何安装软件</title>
    <url>/2023/01/05/%E6%97%A0root%E6%9D%83%E9%99%90%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="无-root-权限安装软件的好处"><a href="#无-root-权限安装软件的好处" class="headerlink" title="无 root 权限安装软件的好处"></a>无 root 权限安装软件的好处</h2><ul>
<li><p>不同用户可以使用不同的软件版本</p>
</li>
<li><p>软件可以随意安装和卸载，不会影响到其他用户</p>
</li>
<li><p>不需要 root 权限</p>
</li>
</ul>
<span id="more"></span>

<h2 id="1-使用conda安装"><a href="#1-使用conda安装" class="headerlink" title="1.使用conda安装"></a>1.使用conda安装</h2><p>能够用conda安装的软件都能在该链接中搜索到：<a href="https://anaconda.org/search?q=">https://anaconda.org/search?q=</a></p>
<ul>
<li><a href="/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/" title="conda的安装和卸载">conda的安装和卸载</a></li>
<li><a href="/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="conda使用教程">conda使用教程</a></li>
</ul>
<p>推荐使用conda安装软件的几大原因：</p>
<ol>
<li>conda 在安装软件时会自动解决软件的依赖问题；</li>
<li>可以在系统安装同一软件的多个版本（如R3.6，R4.1，R4.2），需要安装在不同的虚拟环境中；</li>
<li>不需要 root 权限；</li>
</ol>
<img src="/2023/01/05/%E6%97%A0root%E6%9D%83%E9%99%90%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/image-20230105163701739.png" class="" title="image-20230105163701739">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装命令示例</span></span><br><span class="line">conda create -n py39 -y -vv</span><br><span class="line">conda activate py39</span><br><span class="line">conda install python=3.9 -y -vv</span><br><span class="line"></span><br><span class="line">conda create -n r422 -y -vv</span><br><span class="line">conda activate r422</span><br><span class="line">conda install r-base=4.2.2 -y -vv</span><br></pre></td></tr></table></figure>

<h2 id="2-使用编译好的软件"><a href="#2-使用编译好的软件" class="headerlink" title="2.使用编译好的软件"></a>2.使用编译好的软件</h2><p>有些软件作者会提供不同平台的编译好的软件，使用者可以下载对应平台的编译好的软件版本使用。</p>
<p>这种程序的特点是不用编译就可以直接使用，下面以安装 vina 为例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前使用系统的 operating-system 和 hardware-platform</span></span><br><span class="line"><span class="built_in">uname</span> -io</span><br><span class="line"><span class="comment"># 如 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<p>这个链接中有 vina 根据不同平台编译好的软件版本 <a href="https://github.com/ccsb-scripps/AutoDock-Vina/releases/">https://github.com/ccsb-scripps/AutoDock-Vina/releases/</a>，我们可以根据自己使用的操作系统平台下载使用。</p>
<img src="/2023/01/05/%E6%97%A0root%E6%9D%83%E9%99%90%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/image-20230105221254297.png" class="" title="image-20230105221254297">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将软件下载到家目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/ccsb-scripps/AutoDock-Vina/releases/download/v1.2.3/vina_1.2.3_linux_x86_64</span><br><span class="line"><span class="comment"># 创建 bin 目录用于存放可执行程序</span></span><br><span class="line"><span class="built_in">mkdir</span> bin</span><br><span class="line"><span class="comment"># 将程序移动到 bin 目录中，并给它赋上可执行权限，为了方便使用，这里还将 vina_1.2.3_linux_x86_64 重命名为 vina</span></span><br><span class="line"><span class="built_in">mv</span> vina_1.2.3_linux_x86_64 ~/bin/vina</span><br><span class="line"><span class="built_in">chmod</span> u+x ~/bin/vina</span><br><span class="line"><span class="comment"># 执行 .profile 文件</span></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用软件</span></span><br><span class="line">vina --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<img src="/2023/01/05/%E6%97%A0root%E6%9D%83%E9%99%90%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/image-20230105230828774.png" class="" title="image-20230105230828774">

<p>执行 .profile 文件的原因是因为 .profile 脚本内部将家目录下的 bin 目录加入到 PATH 中，如果你的家目录下没有 .profile 文件可以参考 <a href="/2023/01/02/command-not-found/" title="command not found">command not found</a> 中的误删 .profile 创建它。如果你讲可执行程序下载到其他路径，你也可以参考 <a href="/2023/01/02/command-not-found/" title="command not found">command not found</a> 将对应的路径添加到 PATH 中。</p>
<p>上文中如果使用 wget 下载 github 中的文件太慢，可以考虑使用 github 代理。参考：<a href="/2022/12/31/github%E8%AE%BF%E9%97%AE%E5%87%BA%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/" title="github访问出错的解决办法">github访问出错的解决办法</a></p>
<h2 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3.编译安装"></a>3.编译安装</h2><p>如果某些软件需要进行编译安装的，也不一定必须使用 root 权限安装到<code>/usr/local/bin</code>等需要 root 权限才能操作的目录，可以将其安装到自己的家目录下，这样更安全（因为使用root权限安装的软件拥有root权限，可以在系统里面为所欲为，如果安装了一个来路不明的病毒软件，那么系统就很危险了）。</p>
<p>下面以安装 mwget 为例，mwget 是多线程版本的 wget。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到家目录，下载软件源码</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rayylee/mwget.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 bin 目录用于存放可执行程序</span></span><br><span class="line"><span class="built_in">mkdir</span> bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入源码所在的目录</span></span><br><span class="line"><span class="built_in">cd</span> mwget</span><br><span class="line"></span><br><span class="line"><span class="comment"># 免root的关键是在configure的时候指定prefix参数，指定软件的安装目录</span></span><br><span class="line"><span class="comment"># 可能报错 configure: error: Your intltool is too old.  You need intltool 0.35.0 or later，这是由于缺乏软件依赖导致的</span></span><br><span class="line"><span class="comment"># 联系管理员执行：sudo apt-get install intltool，然后重新执行 configure 命令</span></span><br><span class="line">./configure --prefix=<span class="variable">$HOME</span>/bin</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 .profile 文件</span></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用软件</span></span><br><span class="line">mwget --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<img src="/2023/01/05/%E6%97%A0root%E6%9D%83%E9%99%90%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/image-20230105233736634.png" class="" title="image-20230105233736634">

<p>截图信息略去了 make 和 make install 产生的编译信息（太长了……）</p>
<img src="/2023/01/05/%E6%97%A0root%E6%9D%83%E9%99%90%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/image-20230105234007559.png" class="" title="image-20230105234007559">

<p>执行 .profile 文件的原因是因为 .profile 脚本内部将家目录下的 bin 目录加入到 PATH 中，如果你的家目录下没有 .profile 文件可以参考 <a href="/2023/01/02/command-not-found/" title="command not found">command not found</a> 中的误删 .profile 创建它。如果你讲可执行程序下载到其他路径，你也可以参考 <a href="/2023/01/02/command-not-found/" title="command not found">command not found</a> 将对应的路径添加到 PATH 中。</p>
<p>上文中如果使用 wget 下载 github 中的文件太慢，可以考虑使用 github 代理。参考：<a href="/2022/12/31/github%E8%AE%BF%E9%97%AE%E5%87%BA%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/" title="github访问出错的解决办法">github访问出错的解决办法</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>软件安装</tag>
        <tag>Linux小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>在ubuntu20.04LTS上安装图形化界面</title>
    <url>/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ubuntu 有两种常用的系统 ubuntu desktop 和 ubuntu server。</p>
<p>ubuntu desktop 常用于个人电脑，是有图形化界面的，用户可以通过图形化界面与计算机交互。</p>
<p>ubuntu server 常用于服务器，是没有图形化界面的，用户通过终端与计算机交互。</p>
<span id="more"></span>

<p>ubuntu server 常用于服务器的一个重要原因是ubuntu server 占用更低的硬件资源。</p>
<p>ubuntu desktop 虽然更易于使用，但占用更多的服务器资源，因为服务器的硬件资源宝贵，所以服务器大多安装 ubuntu server。</p>
<p>然而使用 ubuntu server 的用户可能也有使用图形化界面的需求，下面介绍一下在 ubuntu server 20.04LTS 中安装图形化界面的方式。</p>
<pre class="mermaid">graph LR
A(ubuntu) --> B(ubuntu desktop)
A(ubuntu) --> C(ubuntu server)</pre>

<h1 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h1><p>VNC (Virtual Network Computer)是<a href="http://baike.baidu.com/view/747782.htm">虚拟网络</a>计算机的缩写。它是基于 unix 和 linux 操作系统的免费的<a href="http://baike.baidu.com/view/444964.htm">开源软件</a>。</p>
<p><a href="https://www.tightvnc.com/">tightvnc</a> 是 VNC 的一个实现。在服务端运行 tightvncserver 后你可以使用它去运行一个桌面系统，然后使用软件连接并显示这个桌面系统，这样就能<strong>看到远程计算机的桌面并</strong>使用本地鼠标和键盘控制它，就像您坐在那台计算机的前面一样。</p>
<h2 id="1-安装vncserver"><a href="#1-安装vncserver" class="headerlink" title="1.安装vncserver"></a>1.安装vncserver</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tightvncserver</span><br></pre></td></tr></table></figure>

<h2 id="2-1安装桌面-xfce（两个桌面系统2选1）"><a href="#2-1安装桌面-xfce（两个桌面系统2选1）" class="headerlink" title="2.1安装桌面-xfce（两个桌面系统2选1）"></a>2.1安装桌面-xfce（两个桌面系统2选1）</h2><p>xfce 是一个轻量级的类UNIX桌面系统：<a href="https://www.xfce.org/?lang=zh_CN">https://www.xfce.org/?lang=zh_CN</a></p>
<p><a href="https://docs.xfce.org/">xfce使用指南</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install xfce4 xfce4-goodies</span><br></pre></td></tr></table></figure>

<h2 id="2-2安装桌面gnome（两个桌面系统2选1）"><a href="#2-2安装桌面gnome（两个桌面系统2选1）" class="headerlink" title="2.2安装桌面gnome（两个桌面系统2选1）"></a>2.2安装桌面gnome（两个桌面系统2选1）</h2><p>gnome 是一个简单且容易使用的桌面系统：<a href="https://www.gnome.org/getting-gnome/">https://www.gnome.org/getting-gnome/</a></p>
<p><a href="https://help.gnome.org/users/">gnome使用指南</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome -y</span><br></pre></td></tr></table></figure>

<h2 id="3-安装autocutsel"><a href="#3-安装autocutsel" class="headerlink" title="3.安装autocutsel"></a>3.安装autocutsel</h2><p>autocutsel 让用户可以在vncview内外之前复制粘贴。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install autocutsel</span><br></pre></td></tr></table></figure>

<h2 id="4-1为vncserver配置桌面环境xfce4（两个桌面系统2选1）"><a href="#4-1为vncserver配置桌面环境xfce4（两个桌面系统2选1）" class="headerlink" title="4.1为vncserver配置桌面环境xfce4（两个桌面系统2选1）"></a>4.1为vncserver配置桌面环境xfce4（两个桌面系统2选1）</h2><p>编辑 ~/.vnc/xstartup 文件，在文件末尾增加内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> SESSION_MANAGER</span><br><span class="line"><span class="built_in">unset</span> DBUS_SESSION_BUS_ADDRESS</span><br><span class="line">startxfce4 &amp;</span><br><span class="line"><span class="comment"># 让桌面系统支持vncview内外之间的复制粘贴</span></span><br><span class="line">autocutsel -f &amp;</span><br></pre></td></tr></table></figure>

<h2 id="4-2为vncserver配置桌面环境gnome（两个桌面系统2选1）"><a href="#4-2为vncserver配置桌面环境gnome（两个桌面系统2选1）" class="headerlink" title="4.2为vncserver配置桌面环境gnome（两个桌面系统2选1）"></a>4.2为vncserver配置桌面环境gnome（两个桌面系统2选1）</h2><p>编辑 ~/.vnc/xstartup 文件，在文件末尾增加内容：</p>
<p>如果之前添加了 xfce4 的相关行，需要删除后再添加下面内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> XKL_XMODMAP_DISABLE=1</span><br><span class="line"><span class="built_in">export</span> XDG_CURRENT_DESKTOP=<span class="string">&quot;GNOME-Flashback:GNOME&quot;</span></span><br><span class="line"><span class="built_in">export</span> XDG_MENU_PREFIX=<span class="string">&quot;gnome-flashback-&quot;</span></span><br><span class="line">gnome-session --session=gnome-flashback-metacity --disable-acceleration-check &amp;</span><br><span class="line"><span class="comment"># 让桌面系统支持vncview内外之间的复制粘贴</span></span><br><span class="line">autocutsel -f &amp;</span><br></pre></td></tr></table></figure>

<h2 id="5-启动vncserver"><a href="#5-启动vncserver" class="headerlink" title="5.启动vncserver"></a>5.启动vncserver</h2><p>vncserver默认运行在 5900 端口，不过 5900 并不是 vncserver 的连接端口。连接 vncserver 的端口根据vncserver运行桌面时的命令决定。如果使用<code>vncserver :9527</code> 运行桌面，那么使用软件<a href="https://www.realvnc.com/en/">vncview</a>连接桌面系统使用的端口就是$5900+9527=15427$。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为当前用户设置 vncserver 连接密码，初次运行时会让用户设置一个 8 位的密码</span></span><br><span class="line">vncpasswd</span><br><span class="line"><span class="comment"># 停止运行在 5901 端口的桌面系统</span></span><br><span class="line">vncserver -<span class="built_in">kill</span> :1</span><br><span class="line"><span class="comment"># 让桌面系统运行在 5901 端口</span></span><br><span class="line">vncserver :1</span><br><span class="line"><span class="comment"># 运行桌面系统时指定屏幕分辨率</span></span><br><span class="line">vncserver -<span class="built_in">kill</span> :1</span><br><span class="line">vncserver -geometry 1920x1080 :1</span><br></pre></td></tr></table></figure>

<p>5900配置在文件/usr/bin/vncserver中，你也可以手动修改它。</p>
<img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/image-20230104185944866.png" class="" title="image-20230104185944866">

<h2 id="6-使用vncview连接vncserver运行的桌面系统"><a href="#6-使用vncview连接vncserver运行的桌面系统" class="headerlink" title="6.使用vncview连接vncserver运行的桌面系统"></a>6.使用vncview连接vncserver运行的桌面系统</h2><p><a href="https://www.realvnc.com/en/connect/download/viewer/">vncview下载链接</a></p>
<img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/image-20230103231325307.png" class="" title="image-20230103231325307">

<p>使用vncview连接vncserver的链接为 ip:port，如：xiyoucloud.net:9527，编辑好连接信息后双击OK后生成的连接信息，再输入之前设置的 VNC 连接密码就能连接上 vncserver 了。</p>
<img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/image-20230104150353620.png" class="" title="image-20230104150353620">

<img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/image-20230104150529264.png" class="" title="image-20230104150529264">

<p>从下面这张截图可以看到我们使用的第三方 vncserver（tightvncserver）使用 vncview 连接是没有完整的端到端会话加密的，而使用vncview 官方的 vncserver 可以提供这些功能，不过这是<strong>付费</strong>的。<strong>总的来说，如果你对数据的安全性要求较高，就不要使用vnc这一套工具。</strong></p>
<img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/image-20230104123633129.png" class="" title="image-20230104123633129">

<h2 id="7-使用远程桌面系统"><a href="#7-使用远程桌面系统" class="headerlink" title="7.使用远程桌面系统"></a>7.使用远程桌面系统</h2><p>具体细节请参考桌面系统的使用指南：</p>
<p><a href="https://docs.xfce.org/">xfce使用指南</a></p>
<img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/desktop.png" class="" title="desktop">

<p><a href="https://help.gnome.org/users/">gnome使用指南</a></p>
<img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/gnome.png" class="" title="gnome">

<p><strong>常用快捷键：</strong></p>
<ul>
<li>CTRL + ALT + T：打开一个终端</li>
</ul>
<p>你也可以使用其他软件连接 tightvncserver。</p>
<h2 id="其他连接tightvncserver的软件"><a href="#其他连接tightvncserver的软件" class="headerlink" title="其他连接tightvncserver的软件"></a>其他连接tightvncserver的软件</h2><p><a href="https://remoteripple.com/download/">Remote Ripple</a></p>
<a href="https://remoteripple.com/download/">

<img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/rrpanel.png" class="" title="远程纹波">

</a>

<p><a href="https://mightyviewer.com/">MightyViewer</a></p>
<p><a href="https://mightyviewer.com/"><img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/mvpanel.png" class="" title="强大的浏览器"></a></p>
<p><a href="https://unidostup.com/">Unidostup</a></p>
<p><a href="https://unidostup.com/"><img src="/2023/01/03/%E5%9C%A8ubuntu20-04LTS%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/udpe.png" class="" title="独角兽"></a></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="忘记密码怎么办？"><a href="#忘记密码怎么办？" class="headerlink" title="忘记密码怎么办？"></a>忘记密码怎么办？</h3><p>使用 vncpasswd 重置密码，设置的密码最多 8 位，如果输入超过 8 位密码会自动被截取为 8 位。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncpasswd</span><br></pre></td></tr></table></figure>

<p>其他问题和解决方式欢迎在评论区补充，如果比较常见的话我会补充到文章中，感谢支持~</p>
<blockquote>
<p>参考链接：</p>
<p><a href="https://help.aliyun.com/document_detail/59330.html">https://help.aliyun.com/document_detail/59330.html</a></p>
</blockquote>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>vncserver</tag>
        <tag>图形化界面</tag>
      </tags>
  </entry>
  <entry>
    <title>command not found</title>
    <url>/2023/01/02/command-not-found/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h2><p>我们运行 1 个命令，shell解释程序（以下用bash代替）首先需要知道命令对应的程序的位置，也就是程序文件对应的路径。</p>
<p>计算机如何找到命令对应的程序的位置呢？这是通过 PATH 这个系统变量来实现的。</p>
<p>使用 echo $PATH 可以查看 PATH 这个系统变量的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/txb/.local/bin:/home/txb/miniconda3/bin:/home/txb/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/</span><br></pre></td></tr></table></figure>

<p>PATH 变量中使用使用 “:” 来分割路径，执行命令时，bash 会去每个路径对应的目录中去找可执行程序，如果找到1个名称匹配的可执行程序，就执行这个程序，不再继续往下找了。而如果找遍PATH中配置的所有目录也找不到名称匹配的可执行程序，就会报错 “command not found xxx” </p>
<span id="more"></span>

<h2 id="导致“xxx-command-not-found”的原因"><a href="#导致“xxx-command-not-found”的原因" class="headerlink" title="导致“xxx command not found”的原因"></a>导致“xxx command not found”的原因</h2><p>导致 command not found xxx 的原因大致有 2 种：</p>
<h3 id="1-软件未安装"><a href="#1-软件未安装" class="headerlink" title="1.软件未安装"></a>1.软件未安装</h3><h3 id="2-软件已安装，但软件对应的可执行程序所在的目录未配置在-PATH-中"><a href="#2-软件已安装，但软件对应的可执行程序所在的目录未配置在-PATH-中" class="headerlink" title="2.软件已安装，但软件对应的可执行程序所在的目录未配置在 PATH 中"></a>2.软件已安装，但软件对应的可执行程序所在的目录未配置在 PATH 中</h3><p>第 1 种情况的解决办法就是在系统中安装对应的软件。<a href="/2022/12/31/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-apt/" title="软件包管理工具-apt">软件包管理工具-apt</a></p>
<img src="/2023/01/02/command-not-found/image-20230102105936051.png" class="" title="image-20230102105936051">

<p>第 2 种情况的解决办法就是将可执行程序所在的目录加入到 PATH 中，具体可以参考一下步骤。</p>
<h2 id="向PATH添加路径"><a href="#向PATH添加路径" class="headerlink" title="向PATH添加路径"></a>向PATH添加路径</h2><h3 id="1-在PATH的最前面添加目录"><a href="#1-在PATH的最前面添加目录" class="headerlink" title="1.在PATH的最前面添加目录"></a>1.在PATH的最前面添加目录</h3><p>执行后<strong>暂时</strong>添加，退出登陆后失效，如果想登陆后立即生效，需要写入 ~/.bashrc 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=/hom/txb/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<h3 id="2-在PATH的最后面添加目录"><a href="#2-在PATH的最后面添加目录" class="headerlink" title="2.在PATH的最后面添加目录"></a>2.在PATH的最后面添加目录</h3><p>执行后<strong>暂时</strong>添加，退出登陆后失效，如果想登陆后立即生效，需要写入 ~/.bashrc 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/home/txb/bin:</span><br></pre></td></tr></table></figure>

<h3 id="3-在PATH的任意位置添加目录"><a href="#3-在PATH的任意位置添加目录" class="headerlink" title="3.在PATH的任意位置添加目录"></a>3.在PATH的任意位置添加目录</h3><p>执行后<strong>暂时</strong>添加，退出登陆后失效，如果想登陆后立即生效，需要写入 ~/.bashrc 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">insert_path</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 第 1 个参数为插入的序号，从 1 开始</span></span><br><span class="line">	<span class="comment"># 第 2 个参数为插入的目录</span></span><br><span class="line">	index=<span class="variable">$1</span></span><br><span class="line">	directory=<span class="variable">$2</span></span><br><span class="line">	<span class="built_in">export</span> PATH=$(<span class="built_in">echo</span> <span class="variable">$PATH</span> | awk -F <span class="string">&quot;:&quot;</span> -v directory=<span class="string">&quot;<span class="variable">$directory</span>&quot;</span> -v insert_index=<span class="string">&quot;<span class="variable">$index</span>&quot;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++)&#123;if(i==insert_index)&#123;printf(&quot;%s%s&quot;, directory, &quot;:&quot;)&#125;;if(i==NF)&#123;printf(&quot;%s&quot;,$i);break&#125;;printf(&quot;%s%s&quot;, $i, &quot;:&quot;)&#125;&#125;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">insert_path 2 /home/txb/bin</span><br></pre></td></tr></table></figure>

<h3 id="4-删除PATH对应位置的目录"><a href="#4-删除PATH对应位置的目录" class="headerlink" title="4.删除PATH对应位置的目录"></a>4.删除PATH对应位置的目录</h3><p>执行后<strong>暂时</strong>删除，退出登陆后失效，如果想登陆后立即生效，需要写入 ~/.bashrc 文件</p>
<p><strong>注意：delete_path 是根据目录的序号删除目录，因此在不清楚待删除目录的序号时应该避免使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">delete_path</span></span>() &#123;</span><br><span class="line">	<span class="comment"># 第 1 个参数为删除的目录的序号，从 1 开始</span></span><br><span class="line">	index=<span class="variable">$1</span></span><br><span class="line">	<span class="built_in">export</span> PATH=$(<span class="built_in">echo</span> <span class="variable">$PATH</span> | awk -F <span class="string">&quot;:&quot;</span> -v directory=<span class="string">&quot;<span class="variable">$directory</span>&quot;</span> -v insert_index=<span class="string">&quot;<span class="variable">$index</span>&quot;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++)&#123;if(i==insert_index)&#123;continue&#125;;printf(&quot;%s%s&quot;, $i, &quot;:&quot;)&#125;&#125;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">delete_path 2</span><br></pre></td></tr></table></figure>

<p>将目录添加到PATH的位置决定了目录中软件的优先级，因为bash按照顺序在目录中查找可执行程序，一旦找到就不继续往后找了。</p>
<h2 id="误删-bashrc"><a href="#误删-bashrc" class="headerlink" title="误删.bashrc"></a>误删.bashrc</h2><p>误删 .bashrc 文件，发现之前安装的软件全都不能使用了。 </p>
<p>原因：用户登陆系统时会自动执行 .bashrc 脚本，执行脚本时会设置一些环境变量，如PATH变量。PATH变量未设置或者可执行程序所在的目录没有添加到PATH变量中都会导致软件已经安装，但对应的程序却不能执行，报错信息：command not found xxx</p>
<p>这种情况如果你之前的 .bashrc 没有备份的话就无法补救了，这里我提供一份原始的 .bashrc 文件吧，你可以在这份文件的基础上重新编写 .bashrc 文件，.bashrc 文件位于家目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.bashrc: executed by bash(1) for non-login shells.</span></span><br><span class="line"><span class="comment"># see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</span></span><br><span class="line"><span class="comment"># for examples</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If not running interactively, don&#x27;t do anything</span></span><br><span class="line"><span class="keyword">case</span> $- <span class="keyword">in</span></span><br><span class="line">    *i*) ;;</span><br><span class="line">      *) <span class="built_in">return</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># don&#x27;t put duplicate lines or lines starting with space in the history.</span></span><br><span class="line"><span class="comment"># See bash(1) for more options</span></span><br><span class="line">HISTCONTROL=ignoreboth</span><br><span class="line"></span><br><span class="line"><span class="comment"># append to the history file, don&#x27;t overwrite it</span></span><br><span class="line"><span class="built_in">shopt</span> -s histappend</span><br><span class="line"></span><br><span class="line"><span class="comment"># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span></span><br><span class="line">HISTSIZE=1000</span><br><span class="line">HISTFILESIZE=2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the window size after each command and, if necessary,</span></span><br><span class="line"><span class="comment"># update the values of LINES and COLUMNS.</span></span><br><span class="line"><span class="built_in">shopt</span> -s checkwinsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># If set, the pattern &quot;**&quot; used in a pathname expansion context will</span></span><br><span class="line"><span class="comment"># match all files and zero or more directories and subdirectories.</span></span><br><span class="line"><span class="comment">#shopt -s globstar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make less more friendly for non-text input files, see lesspipe(1)</span></span><br><span class="line">[ -x /usr/bin/lesspipe ] &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(SHELL=/bin/sh lesspipe)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set variable identifying the chroot you work in (used in the prompt below)</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;debian_chroot:-&#125;</span>&quot;</span> ] &amp;&amp; [ -r /etc/debian_chroot ]; <span class="keyword">then</span></span><br><span class="line">    debian_chroot=$(<span class="built_in">cat</span> /etc/debian_chroot)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    xterm-color|*-256color) color_prompt=<span class="built_in">yes</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment for a colored prompt, if the terminal has the capability; turned</span></span><br><span class="line"><span class="comment"># off by default to not distract the user: the focus in a terminal window</span></span><br><span class="line"><span class="comment"># should be on the output of commands, not on the prompt</span></span><br><span class="line"><span class="comment">#force_color_prompt=yes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$force_color_prompt</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># We have color support; assume it&#x27;s compliant with Ecma-48</span></span><br><span class="line">        <span class="comment"># (ISO/IEC-6429). (Lack of such support is extremely rare, and such</span></span><br><span class="line">        <span class="comment"># a case would tend to support setf rather than setaf.)</span></span><br><span class="line">        color_prompt=<span class="built_in">yes</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        color_prompt=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$color_prompt</span>&quot;</span> = <span class="built_in">yes</span> ]; <span class="keyword">then</span></span><br><span class="line">    PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> color_prompt force_color_prompt</span><br><span class="line"></span><br><span class="line"><span class="comment"># If this is an xterm set the title to user@host:dir</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">xterm*|rxvt*)</span><br><span class="line">    PS1=<span class="string">&quot;\[\e]0;<span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h: \w\a\]<span class="variable">$PS1</span>&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable color support of ls and also add handy aliases</span></span><br><span class="line"><span class="keyword">if</span> [ -x /usr/bin/dircolors ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">test</span> -r ~/.dircolors &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b ~/.dircolors)</span>&quot;</span> || <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b)</span>&quot;</span></span><br><span class="line">    <span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias dir=&#x27;dir --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias vdir=&#x27;vdir --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># colored GCC warnings and errors</span></span><br><span class="line"><span class="comment">#export GCC_COLORS=&#x27;error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># some more ls aliases</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an &quot;alert&quot; alias for long running commands.  Use like so:</span></span><br><span class="line"><span class="comment">#   sleep 10; alert</span></span><br><span class="line"><span class="built_in">alias</span> alert=<span class="string">&#x27;notify-send --urgency=low -i &quot;$([ $? = 0 ] &amp;&amp; echo terminal || echo error)&quot; &quot;$(history|tail -n1|sed -e &#x27;</span>\<span class="string">&#x27;&#x27;</span>s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//<span class="string">&#x27;\&#x27;</span><span class="string">&#x27;)&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alias definitions.</span></span><br><span class="line"><span class="comment"># You may want to put all your additions into a separate file like</span></span><br><span class="line"><span class="comment"># ~/.bash_aliases, instead of adding them here directly.</span></span><br><span class="line"><span class="comment"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bash_aliases ]; <span class="keyword">then</span></span><br><span class="line">    . ~/.bash_aliases</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable programmable completion features (you don&#x27;t need to enable</span></span><br><span class="line"><span class="comment"># this, if it&#x27;s already enabled in /etc/bash.bashrc and /etc/profile</span></span><br><span class="line"><span class="comment"># sources /etc/bash.bashrc).</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">shopt</span> -oq posix; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /usr/share/bash-completion/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /usr/share/bash-completion/bash_completion</span><br><span class="line">  <span class="keyword">elif</span> [ -f /etc/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/bash_completion</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h2 id="误删-profile"><a href="#误删-profile" class="headerlink" title="误删.profile"></a>误删.profile</h2><p>误删 .profile 文件，发现 .bashrc 中配置的软件不能使用了。用户登陆系统时会执行 .bashrc 文件是因为登陆时会执行 .profile 脚本，而在 .profile 脚本内部会调用执行 .bashrc 脚本。因此如果误删 .profile，在登陆时就不会执行 .bashrc 文件了。此时可以手动执行 .bashrc 文件，当然这样只是暂时生效，下次登陆后就失效了。如果想让 .bashrc文件在登陆后被执行，你需要新建 .profile 并向其中写入调用 ~/.bashrc 的语句。（<strong>参考下方.profile文件的内容</strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>如果误删 ~/.profile 文件，可以根据我下方提供的文件内容在系统中创建对应的文件。.profile位于用户家目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.profile: executed by the command interpreter for login shells.</span></span><br><span class="line"><span class="comment"># This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login</span></span><br><span class="line"><span class="comment"># exists.</span></span><br><span class="line"><span class="comment"># see /usr/share/doc/bash/examples/startup-files for examples.</span></span><br><span class="line"><span class="comment"># the files are located in the bash-doc package.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the default umask is set in /etc/profile; for setting the umask</span></span><br><span class="line"><span class="comment"># for ssh logins, install and configure the libpam-umask package.</span></span><br><span class="line"><span class="comment">#umask 022</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if running bash</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$BASH_VERSION</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># include .bashrc if it exists</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$HOME</span>/.bashrc&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">&quot;<span class="variable">$HOME</span>/.bashrc&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set PATH so it includes user&#x27;s private bin if it exists</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$HOME</span>/bin&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    PATH=<span class="string">&quot;<span class="variable">$HOME</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set PATH so it includes user&#x27;s private bin if it exists</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$HOME</span>/.local/bin&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>报错</tag>
        <tag>.bashrc和.profile</tag>
      </tags>
  </entry>
  <entry>
    <title>安装monocle 2.18</title>
    <url>/2023/01/01/%E5%AE%89%E8%A3%85monocle-2-18/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-安装conda"><a href="#1-安装conda" class="headerlink" title="1.安装conda"></a>1.安装conda</h3><a href="/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/" title="conda的安装和卸载">conda的安装和卸载</a>

<h3 id="2-使用conda安装monocle2-18"><a href="#2-使用conda安装monocle2-18" class="headerlink" title="2.使用conda安装monocle2.18"></a>2.使用conda安装monocle2.18</h3><p><strong>小技巧，在安装monocle2.18之前需要先安装 r-base 4.0.5</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">conda create -n rpackage r-base==4.0.5 -y -vv</span><br><span class="line">conda activate rpackage</span><br><span class="line">conda install bioconductor-monocle==2.18.0 -y -vv</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="3-在rstudio-server中使用monocle2-18"><a href="#3-在rstudio-server中使用monocle2-18" class="headerlink" title="3.在rstudio-server中使用monocle2.18"></a>3.在rstudio-server中使用monocle2.18</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 R 语言的执行环境中执行</span></span><br><span class="line">.libPaths(c(<span class="string">&quot;/home/txb/miniconda3/envs/rpackage/lib/R/library&quot;</span>, .libPaths()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 R 中 load monocle</span></span><br><span class="line">library(monocle,lib.loc=<span class="string">&quot;/home/txb/miniconda3/envs/rpackage/lib/R/library&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-配置libpath永久生效"><a href="#4-配置libpath永久生效" class="headerlink" title="4.配置libpath永久生效"></a>4.配置libpath永久生效</h3><p>将以下内容写入 ~/.Rprofile，然后 Start New Session，其中 /home/txb/miniconda3/envs/rpackage/lib/R/library 就是R包的安装路径，也就是所谓的 libpath。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.libPaths(c(<span class="string">&quot;/home/txb/miniconda3/envs/rpackage/lib/R/library&quot;</span>, .libPaths()))</span><br></pre></td></tr></table></figure>

<img src="/2023/01/01/%E5%AE%89%E8%A3%85monocle-2-18/image-20230101162318775.png" class="" title="image-20230101162318775">

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>conda</tag>
        <tag>rstudio-server</tag>
        <tag>R包</tag>
      </tags>
  </entry>
  <entry>
    <title>github访问出错的解决办法</title>
    <url>/2022/12/31/github%E8%AE%BF%E9%97%AE%E5%87%BA%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=390903031&bvid=BV1Hd4y1s7XC&cid=915054365&page=1"style="width:100%;height:500px;min-width:375px;min-height:200px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>你还在因为 github 访问太慢而感到焦虑吗？<br>你还在因为无法访问 github 导致的一系列问题而感到苦恼吗？<br>克隆仓库报错？<br>安装 R 包失败？<br>github 抽风了？</p>
<p><strong>解决github访问出错的终极方式——使用github代理</strong></p>
<h2 id="使用git访问github出错"><a href="#使用git访问github出错" class="headerlink" title="使用git访问github出错"></a>使用git访问github出错</h2><h3 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a><strong>报错信息：</strong></h3><p>fatal：unable to access ‘<a href="https://github.com/wu-yc/scMetabolism.git/&#39;">https://github.com/wu-yc/scMetabolism.git/&#39;</a>: gnutls_handshake() failed: Error in the pull function</p>
<img src="/2022/12/31/github%E8%AE%BF%E9%97%AE%E5%87%BA%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/f581cc3dc3264f05ae5e60b06fc467c4.png" class="" title="在这里插入图片描述">

<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a><strong>解决办法：</strong></h3><p>使用github代理：<br><a href="https://ghproxy.com/">https://ghproxy.com</a> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wu-yc/scMetabolism.git</span><br><span class="line">git <span class="built_in">clone</span> https://ghproxy.com/https://github.com/wu-yc/scMetabolism.git</span><br></pre></td></tr></table></figure>

<h2 id="安装R包出错"><a href="#安装R包出错" class="headerlink" title="安装R包出错"></a>安装R包出错</h2><h3 id="报错信息：-1"><a href="#报错信息：-1" class="headerlink" title="报错信息："></a><strong>报错信息：</strong></h3><p>Error: Failed to install ‘unknown package’ from GitHub:<br>gnutls_handshake() failed: Error in the pull function.</p>
<img src="/2022/12/31/github%E8%AE%BF%E9%97%AE%E5%87%BA%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/4a44870deba845aba6e57b6c64be5883.png" class="" title="在这里插入图片描述">

<h3 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a><strong>解决办法：</strong></h3><p>使用github代理，以 <a href="https://phproxy.com为例：">https://phproxy.com为例：</a><br><a href="https://ghproxy.com/">https://ghproxy.com</a> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可能因为网络问题而导致下载 R 包失败</span></span><br><span class="line">devtools::install_github(<span class="string">&quot;wu-yc/scMetabolism&quot;</span>)</span><br><span class="line"><span class="comment"># 使用代理下载 R 包</span></span><br><span class="line">remotes::install_git(<span class="string">&quot;https://ghproxy.com/https://github.com/wu-yc/scMetabolism.git&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>使用 wget，curl 访问 github 相关的链接失败也可以参照此法！</strong></p>
<p>看看我的其他文章呗：<br><a href="https://blog.csdn.net/weixin_64316191/article/details/128046805">网络的连通性之ping和github代理</a><br><a href="https://blog.csdn.net/weixin_64316191/article/details/127536791">如何安装 R包：内含使用github代理的方式</a></p>
<h3 id="更多github代理："><a href="#更多github代理：" class="headerlink" title="更多github代理："></a>更多github代理：</h3><p>github 代理使用方式需要点击链接查看网站详情。</p>
<p><a href="https://hub.yzuu.cf/">https://hub.yzuu.cf/</a><br><a href="https://hub.njuu.cf/">https://hub.njuu.cf/</a><br><a href="https://ghproxy.com/">https://ghproxy.com/</a><br><a href="https://github.moeyy.xyz/">https://github.moeyy.xyz/</a><br><a href="https://kgithub.com/">https://kgithub.com/</a><br><a href="https://gitclone.com/">https://gitclone.com/</a></p>
<p>在此对所有 github 代理的站长表示衷心的感谢！</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>代理</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>软件包管理工具-apt</title>
    <url>/2022/12/31/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-apt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=903804972&bvid=BV1yP4y1D787&cid=926416540&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>apt 是 ubuntu 系统默认的软件包管理工具，就好像 centos 的 yum，不过 yum 只能在 centos 中使用，在 ubuntu 中应该使用 apt 来管理包。</p>
<h2 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h2><p>软件包是从哪里下载到的呢？答案是软件源，顾名思义软件的来源称为软件源。</p>
<p>软件源实际上是一个链接，链接中包含了很多的软件资源。</p>
<p>系统默认是配置好软件源的，它保存在 /etc/apt/sources.list 和 /etc/apt/sources.list.d/xiyou.list 的文件中</p>
<p><strong>值得一提的是不同的操作系统版本使用的软件源是不一样的，因此配置源时需要配置操作系统版本对应的源</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> edit-sources

<span class="token comment"># 查看操作系统版本</span>
lsb_release -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>好习惯是如果你手动修改 /etc/apt/sources.list 文件，你最好对它建立一个备份，然后再编辑它，这样能够防止自己改错文件后可以从备份中恢复文件。 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak
<span class="token function">vi</span> /etc/apt/sources.list

<span class="token comment"># 让配置的源生效</span>
<span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-增加-修改软件源（以修改文件的方式）"><a href="#1-增加-修改软件源（以修改文件的方式）" class="headerlink" title="1.增加/修改软件源（以修改文件的方式）"></a>1.增加/修改软件源（以修改文件的方式）</h3><p>清华软件源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a> （可以手动选择到合适的系统版本）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ubuntu 20.04 修改官方软件源为清华源</span>
<span class="token function">sudo</span> <span class="token function">sed</span> -i <span class="token string">"s@http://.*archive.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g"</span> /etc/apt/sources.list
<span class="token function">sudo</span> <span class="token function">sed</span> -i <span class="token string">"s@http://.*security.ubuntu.com@https://mirrors.tuna.tsinghua.edu.cn@g"</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<img src="/2022/12/31/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-apt/23aa7b97d6264c48bf19768c1f3e9585.png" class="" title="在这里插入图片描述">


<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释， 这是 ubuntu 20.04 的软件源</span>
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span>
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span>
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span>
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse
<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-增加软件源-以命令的方式"><a href="#2-增加软件源-以命令的方式" class="headerlink" title="2.增加软件源 (以命令的方式)"></a>2.增加软件源 (以命令的方式)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt-add-repository <span class="token string">'deb http://myserver/path/to/repo stable myrepo'</span>
apt-add-repository <span class="token string">'http://myserver/path/to/repo myrepo'</span>
apt-add-repository <span class="token string">'https://packages.medibuntu.org free non-free'</span>
apt-add-repository http://extras.ubuntu.com/ubuntu
apt-add-repository ppa:user/repository
apt-add-repository ppa:user/distro/repository
apt-add-repository multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-删除软件源"><a href="#3-删除软件源" class="headerlink" title="3.删除软件源"></a>3.删除软件源</h3><p>以修改文件的方式：使用“#”注释掉不想要的软件源 vi /etc/apt/sources.list</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在文件的每一行的前面加 #，即注释掉该文件中所有的源</span>
<span class="token function">sed</span> -i <span class="token string">"s/^/#/"</span> /etc/apt/sources.list
<span class="token comment"># 删除刚刚添加的 #，撤销上一步操作</span>
<span class="token function">sed</span> -i <span class="token string">'s/.//'</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用命令的方式删除源：<code>apt-add-repository -r &#39;https://packages.medibuntu.org free non-free&#39;</code></p>
<h2 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h2><p>dpkg 用于安装本地的 .deb 包，处理依赖的能力较差。</p>
<p>apt 是基于 dpkg 封装好的软件包管理工具，它从软件源安装软件，并能较好地处理软件依赖，使用起来更加方便。</p>
<p><strong>以下命令以 wget 软件为例</strong></p>
<h3 id="更新存储库"><a href="#更新存储库" class="headerlink" title="更新存储库"></a>更新存储库</h3><p>apt 从软件源安装软件，它需要在本地维护一个软件源的存储库，这样就能在存储库中搜索软件包了。但软件源中的软件包信息是频繁更新的，如果你想使用更新版本的软件，你就需要先更新本地的存储库，再进行软件安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="搜索软件包"><a href="#搜索软件包" class="headerlink" title="搜索软件包"></a>搜索软件包</h3><p>支持正则表达式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 能搜索到的软件包才能被 apt 安装</span>
<span class="token function">apt</span> search ^wget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果搜索不到某软件，就去 google “xx install in ubuntu”</p>
<h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">wget</span>

<span class="token comment"># 使用 dpkg 安装软件包</span>
dpkg -i xx.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看软件包"><a href="#查看软件包" class="headerlink" title="查看软件包"></a>查看软件包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看本地是否安装 wget</span>
<span class="token function">apt</span> list <span class="token operator">|</span> <span class="token function">grep</span> ^wget
<span class="token comment"># 查看软件包的具体信息</span>
<span class="token function">apt</span> show <span class="token function">wget</span>

<span class="token comment"># 查看软件包对应的文件信息</span>
dpkg -L rstudio-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载软件，保留相关文件</span>
<span class="token function">apt</span> remove rstudio-server
<span class="token comment"># 卸载软件并删除相关文件</span>
<span class="token function">apt</span> autoremove rstudio-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先更新存储库，确保获取到更新的版本包信息</span>
<span class="token function">apt</span> update
<span class="token comment"># 更新系统中所有的软件包，使用 installing/upgrading packages 的方式来处理依赖</span>
<span class="token function">apt</span> upgrade
<span class="token comment"># 更新系统中所有的软件包，使用 removing/installing/upgrading packages 的方式来处理依赖</span>
<span class="token function">apt</span> full-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="apt-和-apt-get-的关系："><a href="#apt-和-apt-get-的关系：" class="headerlink" title="apt 和 apt-get 的关系："></a>apt 和 apt-get 的关系：</h2><p>在 shell 中通常使用 apt，因为可以少打 4 个字符。在脚本中安装软件通常使用 apt-get，兼容性更好，通常在脚本中使用。</p>
<p><strong>WARNING: apt does not have a stable CLI interface. Use with caution in scripts.</strong></p>
<table>
<thead>
<tr>
<th>apt</th>
<th>apt-get</th>
<th>命令含义</th>
</tr>
</thead>
<tbody><tr>
<td>apt install 包名</td>
<td>apt-get install 包名</td>
<td>安装软件包</td>
</tr>
<tr>
<td>apt remove 包名</td>
<td>apt-get remove 包名</td>
<td>移除软件包</td>
</tr>
<tr>
<td>apt purge 包名</td>
<td>apt-get purge 包名</td>
<td>移除软件包及配置文件</td>
</tr>
<tr>
<td>apt update</td>
<td>apt-get update</td>
<td>刷新存储库索引</td>
</tr>
<tr>
<td>apt upgrade</td>
<td>apt-get upgrade</td>
<td>升级所有可升级的软件包</td>
</tr>
<tr>
<td>apt autoremove 包名</td>
<td>apt-get autoremove 包名</td>
<td>自动删除所有不需要的软件包</td>
</tr>
<tr>
<td>apt full-upgrade</td>
<td>apt-get dist-upgrade</td>
<td>在升级软件包时自动处理依赖关系</td>
</tr>
<tr>
<td>apt search 正则表达式</td>
<td>apt-cache search 正则表达式</td>
<td>搜索应用程序</td>
</tr>
<tr>
<td>apt show 包名</td>
<td>apt-cache show 包名</td>
<td>显示安装细节</td>
</tr>
<tr>
<td>apt clean</td>
<td>apt-get clean</td>
<td>清理已下载的软件包，不会影响软件的正常使用</td>
</tr>
<tr>
<td>apt autoclean</td>
<td>apt-get autoclean</td>
<td>删除已经卸载的软件的软件包备份</td>
</tr>
</tbody></table>
<h2 id="E-Unable-to-locate-package-xxx"><a href="#E-Unable-to-locate-package-xxx" class="headerlink" title="E:Unable to locate package xxx"></a>E:Unable to locate package xxx</h2><p>有两种可能，一种可能是你要搜索的软件在软件源中并不存在。如果你没有添加其他的软件源，说明该软件在官方原中不存在，如果你知道该软件在那个软件源的话可以通过添加第三方软件源来安装该软件。</p>
<p>另一种可能是本地的软件源没有该软件的信息，这种情况下您可以使用以下命令更新一下本地的软件信息，然后再次执行安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title>切换rstudio-server中的R</title>
    <url>/2022/12/31/%E5%88%87%E6%8D%A2rstudio-server%E4%B8%AD%E7%9A%84R/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在Linux系统中安装多个R"><a href="#在Linux系统中安装多个R" class="headerlink" title="在Linux系统中安装多个R"></a>在Linux系统中安装多个R</h2><p>在系统中使用 apt 安装的 R 是全局安装的，无法使用 apt 安装多个版本的 R。</p>
<p>使用apt安装好R后会在 /usr/bin 目录下回生成一个 R 的可执行文件。</p>
<p>如果想要在系统中安装多个版本的 R，推荐使用 conda 在不同的虚拟环境中安装不同的 R。在终端中可以通过激活虚拟环境来使用不同的虚拟环境中的R。在 rstudio-server 中可以通过修改 /etc/rstudio/rserver.conf 文件来指定使用的R。</p>
<img src="/2022/12/31/%E5%88%87%E6%8D%A2rstudio-server%E4%B8%AD%E7%9A%84R/image-20221231104655339.png" class="" title="image-20221231104655339">

<span id="more"></span>

<p>关于 conda 的安装和使用可以参考我写的conda教程：</p>
<a href="/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/" title="conda的安装和卸载">conda的安装和卸载</a>



<a href="/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="conda使用教程">conda使用教程</a>

<h2 id="使用conda安装R"><a href="#使用conda安装R" class="headerlink" title="使用conda安装R"></a>使用conda安装R</h2><p>搜索可以使用的R版本:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 搜索 conda 软件源中的 r-base 版本</span>
conda search r-base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="/2022/12/31/%E5%88%87%E6%8D%A2rstudio-server%E4%B8%AD%E7%9A%84R/image-20221231112003765.png" class="" title="image-20221231112003765">

<p>使用 conda 安装 R，推荐每安装1个R就使用conda创建一个虚拟环境并在其中安装，R版本直接在虚拟环境的名称中体现。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建虚拟环境 r-4.2 的同时安装 R4.2.2 版本</span>
conda create -n r-4.2 r-base<span class="token operator">=</span><span class="token number">4.2</span>.2 -y -vv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="指定rstudio-server中的R"><a href="#指定rstudio-server中的R" class="headerlink" title="指定rstudio-server中的R"></a>指定rstudio-server中的R</h2><p>编辑 /etc/rstudio/rserver.conf 文件来指定 rstudio-server 中使用的 R。</p>
<p><strong>rserver.conf文件示例：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Server Configuration File</span>
<span class="token comment"># 设置rstudio-server 运行端口</span>
www-port<span class="token operator">=</span><span class="token number">8787</span>
<span class="token comment"># 设置 rstudio-server 中使用的 R</span>
rsession-which-r<span class="token operator">=</span>/home/txb/miniconda3/envs/r-4.2/bin/R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>还没完</strong>，如果你想在 rstudio-server 中使用该版本的需要重启一下 rstudio-server，然后在 rstudio-server 中开启一个新的 R project 使用，在新的 R project 中使用 rserver.conf 中指定的 R。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 停止 rstudio-server 服务</span>
<span class="token function">sudo</span> rstudio-server stop
<span class="token comment"># 运行 rstudio-server 服务</span>
<span class="token function">sudo</span> rstudio-server start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要新创建 1 个 R project 的原因是之前的 R project 中<strong>可能</strong>会保留之前的 libpath 信息，这样在安装 R 包时会导致混乱。</p>
<pre class="mermaid">flowchart LR
A(File)-->B(New Project) --> C(New Directory) --> D(New Project) --> E(Create Project)</pre>

<img src="/2022/12/31/%E5%88%87%E6%8D%A2rstudio-server%E4%B8%AD%E7%9A%84R/rproject-2.png" class="" title="rproject-2">

<h2 id="在指定的libpath中安装R包"><a href="#在指定的libpath中安装R包" class="headerlink" title="在指定的libpath中安装R包"></a>在指定的libpath中安装R包</h2><p>参考教程：<a href="/2022/12/29/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85R%E5%8C%85/" title="如何安装R包">如何安装R包</a></p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R"># 通过指定 lib 参数来设置 R 包的安装位置，使用 remotes,devtools,BiocManager 安装 R 包同理
install.packages(&quot;devtools&quot;, lib &#x3D; &quot;&#x2F;home&#x2F;txb&#x2F;miniconda3&#x2F;envs&#x2F;r-4.2&#x2F;lib&#x2F;R&#x2F;library&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="不能混用不同版本的R安装的R包"><a href="#不能混用不同版本的R安装的R包" class="headerlink" title="不能混用不同版本的R安装的R包"></a>不能混用不同版本的R安装的R包</h2><p>如果R版本相同，可以将另一个 R 的 libpath 加入到当前 R 的 libpath 中。</p>
<p>参考教程：<a href="/2022/12/29/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85R%E5%8C%85/" title="如何安装R包">如何安装R包</a></p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R"># xxx 为加入的 libpath
.libPaths(c(&quot;xxx&quot;, .libPaths()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用新版本的 R 后，如果还使用原来旧版本R编译的R包<strong>可能</strong>会导致报错。同理，如果使用旧版本的 R 在 libpath 中包含新版本的 R 安装的 R 包的 libpath 也<strong>可能</strong>会导致报错。</p>
<img src="/2022/12/31/%E5%88%87%E6%8D%A2rstudio-server%E4%B8%AD%E7%9A%84R/image-20221231124911323.png" class="" title="image-20221231124911323">

<p>此时需要在当前的 R 环境中剔除其他 R 版本的包使用的 libpath，然后重新在当前R的 libpath 中安装 R 包后才能使用该R包。如果 libpath 是在 ~/.Rprofile 中配置的，需要删除相关语句。<a href="#%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%9A%84libpath%E4%B8%AD%E5%AE%89%E8%A3%85R%E5%8C%85">在指定的libpath中安装R包</a></p>
<img src="/2022/12/31/%E5%88%87%E6%8D%A2rstudio-server%E4%B8%AD%E7%9A%84R/image-20221231133952608.png" class="" title="image-20221231133952608">

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>rstudio-server</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>bash教程</title>
    <url>/2022/12/30/bash%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=775634812&bvid=BV1114y1n7Ei&cid=906225871&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>shell 是一个命令解释程序，解释用户输入的命令，Linux 系统最常用的 shell 是 bash，不同的 shell 程序会有细微的差别，这里我们学习的也是 bash。</p>
<p>推荐教程：阮一峰老师的《Bash 脚本教程》：<a href="https://wangdoc.com/bash/intro">https://wangdoc.com/bash/intro</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统中包含的 shell 程序</span></span><br><span class="line"><span class="built_in">cat</span> /etc/shells</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前系统中使用的 shell 程序</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 bash 解释脚本</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo hello xiyouyun&quot;</span> &gt; xiyou.sh</span><br><span class="line">bash xiyou.sh</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是一串字符，它代表一个值，可以通过 “$变量名” 的方式获得变量的值。如上文中的 $SHELL，SHELL 是一个变量，可以通过$SHELL的方式获得它代表的值。</p>
<p>变量命名规则：</p>
<ol>
<li>只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>
<li>中间不能有空格，可以使用下划线_。</li>
<li>不能使用标点符号。</li>
<li>不能使用<strong>bash</strong>里的关键字（可用help命令查看保留关键字）</li>
</ol>
<h3 id="0-echo（单引号、双引号、转义）"><a href="#0-echo（单引号、双引号、转义）" class="headerlink" title="0.echo（单引号、双引号、转义）"></a>0.echo（单引号、双引号、转义）</h3><p>使用 echo 可以输出字符串或变量。</p>
<p>好习惯是使用 echo 输出时给要输出的字符串打上引号，这样看起来更直观。</p>
<p>单引号和双引号是不同的，单引号中的特殊字符不会被解释（保持原样输出），双引号中的部分特殊字符会被解释。</p>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>$</td>
<td>读取变量的值</td>
</tr>
<tr>
<td>``</td>
<td>读取命令的输出</td>
</tr>
<tr>
<td>$()</td>
<td>读取命令的输出</td>
</tr>
<tr>
<td>$(())</td>
<td>读取数学运算的结果（只支持整数）</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\\</td>
<td>不解释转义字符</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出字符串（不加引号）</span></span><br><span class="line"><span class="built_in">echo</span> hello, xiyouyun</span><br><span class="line"><span class="comment"># 输出字符串（单引号）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;$USER&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$((2+2))&#x27;</span></span><br><span class="line"><span class="comment"># 输出字符串（双引号）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;<span class="variable">$USER</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$((2+2)</span>)&quot;</span></span><br><span class="line"><span class="comment"># 启用反斜杠转义</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;hello\nxiyouyun&#x27;</span></span><br><span class="line"><span class="comment"># \\ 不解释转义字符，保持原样输出</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;hello\\nxiyouyun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对特殊字符的解释并不是 echo 的功能，而是 bash 的功能，使用 echo 来演示是因为它更直观</span></span><br><span class="line"><span class="built_in">sleep</span> <span class="string">&quot;<span class="subst">$((2+2)</span>)&quot;</span>  <span class="comment"># 让终端卡住 4 秒</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$((2+2)</span>)&quot;</span> </span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;&lt; `<span class="built_in">ls</span>`</span><br></pre></td></tr></table></figure>

<h3 id="1-环境变量（USER-PATH-PWD-HOME-printenv-env）"><a href="#1-环境变量（USER-PATH-PWD-HOME-printenv-env）" class="headerlink" title="1.环境变量（USER, PATH, PWD, HOME, printenv, env）"></a>1.环境变量（USER, PATH, PWD, HOME, printenv, env）</h3><p>环境变量是一种可以在当前 bash 环境和在当前 bash 环境中创建的 bash 子环境中都能访问到的变量。我们使用的终端就是一个 bash 环境，在终端中通过命令运行的其他 bash 进程都是它的子进程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$USER</span> <span class="variable">$PATH</span> <span class="variable">$PWD</span> <span class="variable">$HOME</span></span><br><span class="line"><span class="comment"># 输出环境变量</span></span><br><span class="line"><span class="built_in">printenv</span></span><br><span class="line"><span class="built_in">env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个环境变量的值，以 PATH为例</span></span><br><span class="line"><span class="built_in">env</span> | grep PATH</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo <span class="variable">$USER</span>&quot;</span> &gt; user.sh</span><br><span class="line"><span class="comment"># 在子 bash 环境中访问环境变量</span></span><br><span class="line">bash user.sh</span><br></pre></td></tr></table></figure>

<h3 id="2-自定义变量-declare-export"><a href="#2-自定义变量-declare-export" class="headerlink" title="2.自定义变量(=, declare, export)"></a>2.自定义变量(=, declare, export)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个普通变量，注意“=”两边不能有空格</span></span><br><span class="line">sayhello=<span class="string">&quot;hello,xiyouyun&quot;</span></span><br><span class="line"><span class="comment"># 定义一个普通变量</span></span><br><span class="line"><span class="built_in">declare</span> saygood=<span class="string">&quot;good xiyouyun&quot;</span></span><br><span class="line"><span class="comment"># 将自定义变量暴露为环境变量</span></span><br><span class="line"><span class="built_in">env</span> | grep say</span><br><span class="line"><span class="built_in">export</span> sayhi=<span class="string">&quot;hi,xiyouyun&quot;</span></span><br><span class="line"><span class="built_in">declare</span> -x saygood</span><br><span class="line"><span class="built_in">env</span> | grep say</span><br></pre></td></tr></table></figure>
<p>普通变量和环境变量的区别是环境变量可以在当前 bash 和当前 bash 创建的子 bash 中被读取到，而普通变量只能在当前的 bash 中被读取。</p>
<p>在当前的 bash 环境中创建 1 个子 bash，两者是父进程和子进程的关系。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程树</span></span><br><span class="line">pstree -antp </span><br><span class="line">ps -ef</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$USER</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sayhello</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;echo &quot;$sayhello $USER&quot;&#x27;</span> &gt; xiyou.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用这种方式可以执行一个 bash 脚本</span></span><br><span class="line">bash xiyou.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露 sayhello 为环境变量，再次执行脚本</span></span><br><span class="line"><span class="built_in">export</span> sayhello</span><br><span class="line">bash xiyou.sh</span><br></pre></td></tr></table></figure>

<h3 id="3-删除一个变量-unset"><a href="#3-删除一个变量-unset" class="headerlink" title="3.删除一个变量(unset)"></a>3.删除一个变量(unset)</h3><p>删除一个变量后，就不能通过 $+变量 的方式获得变量代表的值了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除一个变量，可以是普通变量，也可以是环境变量</span></span><br><span class="line"><span class="built_in">unset</span> sayhello</span><br><span class="line"><span class="comment"># 让变量等于空字符串，不等价于 unset，但是可以这么用</span></span><br><span class="line">sayhello=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-变量的数据类型"><a href="#4-变量的数据类型" class="headerlink" title="4.变量的数据类型"></a>4.变量的数据类型</h3><p>我们来看看 declare 的参数。</p>
<ul>
<li><code>-a</code>：声明数组变量。</li>
<li><code>-i</code>：声明整数变量。</li>
<li><code>-l</code>：声明变量为小写字母。</li>
<li><code>-r</code>：声明只读变量。</li>
<li><code>-u</code>：声明变量为大写字母。</li>
<li><code>-x</code>：该变量输出为环境变量。</li>
</ul>
<p>虽然它能够声明这么多类型的变量，但总的来说变量的类型只有两类：字符串和数组。</p>
<ul>
<li><p>字符串</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xiyouyun=<span class="string">&#x27;西柚云&#x27;</span></span><br><span class="line">xiyou=西柚</span><br><span class="line">yun=<span class="string">&quot;云&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$xiyouyun</span> <span class="variable">$xiyou</span> <span class="variable">$yun</span></span><br></pre></td></tr></table></figure></li>
<li><p>数组</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数组</span></span><br><span class="line">a=(1 2 3 4 5)</span><br><span class="line">b=(<span class="string">&quot;1&quot;</span> <span class="string">&quot;2&quot;</span> <span class="string">&quot;3&quot;</span> <span class="string">&quot;4&quot;</span> <span class="string">&quot;5&quot;</span>)</span><br><span class="line">c=(<span class="string">&#x27;x&#x27;</span> <span class="string">&#x27;i&#x27;</span> <span class="string">&#x27;o&#x27;</span> <span class="string">&#x27;u&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数组单个元素，数组的序号是从 0 开始的</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a[0]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数组的全部元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;c[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;c[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组的长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;#c[*]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组的序号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;!c[*]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组切片：从序号 1 开始，截取一个长度为 3 的序列</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a[@]:1:3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在数组的末尾添加几个元素</span></span><br><span class="line">c+=(<span class="string">&quot;y&quot;</span> <span class="string">&quot;u&quot;</span> <span class="string">&quot;n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数组对应的变量</span></span><br><span class="line"><span class="built_in">unset</span> a b c</span><br></pre></td></tr></table></figure></li>
<li><p>关联数组</p>
<p>  数组其实有点像关联数组的另一种形式，关联数组是将一个字符串与另一个字符串关联起来，构成的一个序列。</p>
<p>  数组是将一个序号与一个字符串关联起来。 </p>
<p>  我们将关联字符串和被关联的字符串分别称为 key 和 value。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建关联数组</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line">map=([<span class="string">&quot;xiyou&quot;</span>]=<span class="string">&quot;西柚&quot;</span> [<span class="string">&quot;xiyouyun&quot;</span>]=<span class="string">&quot;西柚云&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 key 获得 value 的值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;map[&quot;xiyou&quot;]&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;map[&quot;xiyouyun&quot;]&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 读取关联数组的 value 序列</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;map[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;map[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取关联数组的长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;#map[*]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取关联数组的 key 的序列</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;!map[*]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向关联数组中追加元素</span></span><br><span class="line">map+=([<span class="string">&quot;hello&quot;</span>]=<span class="string">&quot;你好&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除关联数组</span></span><br><span class="line"><span class="built_in">unset</span> map</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="补充内容（变量）"><a href="#补充内容（变量）" class="headerlink" title="补充内容（变量）"></a>补充内容（变量）</h3><p><strong>一条命令输出多行内容</strong></p>
<p>怎么判断命令是否支持标准输入？</p>
<ol>
<li>在终端输入命令并按回车后，终端会暂停并等待输入（cat，md5sum）</li>
<li>支持使用管道符(|)将标准输出数据流入为标准输入的命令（grep）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;&lt; 可以给支持标准输入的命令提供字符串参数</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">_EOF_</span></span><br><span class="line"><span class="string">hello,</span></span><br><span class="line"><span class="string">$USER,</span></span><br><span class="line"><span class="string">xiyouyun;</span></span><br><span class="line"><span class="string">_EOF_</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;&lt;&lt; 可以给支持标准输入的命令提供字符串参数</span></span><br><span class="line"><span class="built_in">md5sum</span> &lt;&lt;&lt; <span class="string">&quot;hello, xiyouyun&quot;</span></span><br><span class="line">grep -E xiyou &lt;&lt;&lt; <span class="string">&quot;hello, xiyouyun&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将多行文本写入文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; xiyou.txt &lt;&lt; <span class="string">_EOF_</span></span><br><span class="line"><span class="string">hello,</span></span><br><span class="line"><span class="string">xiyou,</span></span><br><span class="line"><span class="string">xiyouyun;</span></span><br><span class="line"><span class="string">_EOF_</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 \n 来做标准的多行内容的输出</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello\nxiyouyun&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本是一个包含代码的文件。</p>
<h3 id="1-脚本的执行原理"><a href="#1-脚本的执行原理" class="headerlink" title="1.脚本的执行原理"></a>1.脚本的执行原理</h3><p>脚本的执行原理就是让<strong>解释程序</strong>去解释脚本的内容，让计算机做某种操作。</p>
<p>解释程序：bash，python，perl，Rscript ……</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行 1 个 bash 脚本</span></span><br><span class="line">bash xx.sh</span><br><span class="line"><span class="comment"># 执行 1 个 python 脚本</span></span><br><span class="line">python xx.py</span><br><span class="line"><span class="comment"># 执行 1 个 perl 脚本</span></span><br><span class="line">perl xx.pl</span><br><span class="line"><span class="comment"># 执行 1 个 R 脚本</span></span><br><span class="line">Rscript xx.R</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Shebang 和注释</p>
<p>  Shebang：代码的“#!”，为 Shebang，它帮助 bash 定位到解释该文件的程序，它只有在脚本以不显式声明解释程序的情况下执行才有用。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment">#! /bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐使用这种方式定位到解释程序的位置会更加灵活，它会让 env 去解释在当前的 bash 环境中 python 对应的是哪个可执行程序</span></span><br><span class="line"><span class="comment">#! /bin/env python</span></span><br><span class="line"><span class="comment">#! /bin/env “perl” -w</span></span><br></pre></td></tr></table></figure>

<p>  注释：以’#’开头的行，这些行不会被 bash 解释，不会执行。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; xiyou.sh &lt;&lt; <span class="string">_xiyou_</span></span><br><span class="line"><span class="string"># pwd</span></span><br><span class="line"><span class="string"># ls</span></span><br><span class="line"><span class="string">echo &quot;hello, xiyouyun&quot;</span></span><br><span class="line"><span class="string">_xiyou_</span></span><br><span class="line"><span class="comment"># 不会执行脚本中被注释的内容</span></span><br><span class="line">bash xiyou.sh</span><br></pre></td></tr></table></figure></li>
<li><p>脚本的返回值和 $?</p>
<p>  在终端中输出的内容不是脚本的返回值，脚本的返回值保存在特殊变量 $? 中</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令执行成功了</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 输出 0 表示上一条命令被正确执行</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将工作目录切换到一个在系统中不存在的目录</span></span><br><span class="line"><span class="built_in">cd</span> /not_exists_path</span><br><span class="line"><span class="comment"># 输出 1 表示上一条命令执行失败</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cd /not_exists_path &quot;</span> &gt; xiyou.sh</span><br><span class="line"><span class="comment"># 这也可以看做一条命令，所以我们可以通过 $? 来判断脚本是否能够正确被解释</span></span><br><span class="line">bash xiyou.sh</span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure>
<p>  脚本执行后的返回值可以通过一个特殊的变量$?获取到</p>
<table>
<thead>
<tr>
<th>$?</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>脚本/命令内容被 bash 正确解释了</td>
</tr>
<tr>
<td>其他</td>
<td>脚本/命令执行出错</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-bash脚本的执行方式"><a href="#2-bash脚本的执行方式" class="headerlink" title="2.bash脚本的执行方式"></a>2.bash脚本的执行方式</h3><p>无论执行方式是怎样，都是使用 bash 去解释脚本文件内容。</p>
<ul>
<li><p>source(在当前的 bash 环境中执行)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个文件中通常配置了很多环境变量，因此我们想要它们在当前的 bash 环境中生效。</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export hello=&#x27;hello, xiyouyun&#x27;&quot;</span> &gt;&gt; xiyouyun.sh</span><br><span class="line"><span class="comment"># 在 bash 子环境中定义一个环境变量，这样是不能被当前的 bash 环境读到的</span></span><br><span class="line">bash xiyouyun.sh</span><br><span class="line"><span class="built_in">env</span> | grep hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 source 执行会让环境变量在当前的环境中可读</span></span><br><span class="line"><span class="built_in">source</span> xiyouyun.sh</span><br><span class="line"><span class="built_in">env</span> | grep hello</span><br></pre></td></tr></table></figure></li>
<li><p>bash xx.sh</p>
<p>  用户只要保证对 bash 具有可执行权限，并且用户具有 xx.sh 的可读权限就可以执行脚本了，不需要让 xx.sh 文件本身就有可执行权限。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 bash 可执行程序的位置</span></span><br><span class="line"><span class="built_in">which</span> bash</span><br><span class="line"><span class="comment"># 查看 bash 的文件权限</span></span><br><span class="line"><span class="built_in">ls</span> -l $(<span class="built_in">which</span> bash)</span><br><span class="line"><span class="comment"># 去除文件的可执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> u-x xiyou.sh</span><br><span class="line"><span class="comment"># 查看文件的权限</span></span><br><span class="line"><span class="built_in">ls</span> -l xiyou.sh</span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">bash xiyou.sh</span><br></pre></td></tr></table></figure></li>
<li><p>./xx.sh 配合 Shebang 可以执行所有类型的脚本。</p>
<p>  使用这种方式执行脚本如果使用 Shebang 指定了解释的程序，则根据这个程序来解释脚本的内容。否则默认使用 bash 来解释脚本的内容。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向文件中写入脚本内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo hello xiyouyun&quot;</span> &gt;&gt; xiyou.sh</span><br><span class="line"><span class="comment"># 使用 ./xx.sh 的方式执行脚本，会报错</span></span><br><span class="line">./xiyou.sh</span><br><span class="line"><span class="comment"># 给脚本赋予可执行权限，在Linux课程的《文件的权限和属性》讲到过</span></span><br><span class="line"><span class="built_in">chmod</span> u+x xiyou.sh</span><br><span class="line">./xiyou.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不指定 Shebang，它默认被 bash 解释</span></span><br><span class="line"><span class="built_in">cat</span> &gt; xiyouyun.sh &lt;&lt; <span class="string">_xiyou_</span></span><br><span class="line"><span class="string">#! /bin/env python</span></span><br><span class="line"><span class="string">print(&quot;hello, xiyouyun&quot;)</span></span><br><span class="line"><span class="string">_xiyou_</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果指定错误的 Shebang，执行时会报错</span></span><br><span class="line"><span class="built_in">cat</span> &gt; bad.sh &lt;&lt; <span class="string">_xiyou_</span></span><br><span class="line"><span class="string">#! /a_not_exists_interpreter</span></span><br><span class="line"><span class="string">print(&quot;hello, xiyouyun&quot;)</span></span><br><span class="line"><span class="string">_xiyou_</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> u+x xiyouyun.sh bad.sh</span><br><span class="line"><span class="comment"># 执行该脚本会通过 Shebang 找到 python 程序，然后使用 python 程序来解释脚本内容</span></span><br><span class="line">./xiyouyun.sh </span><br><span class="line">./bad.sh</span><br><span class="line"><span class="comment"># 可以看到 Linux 中程序的执行只跟文件内容和用来解释文件的程序有关，而跟文件后缀无关</span></span><br><span class="line">bash xiyouyun.sh</span><br><span class="line"><span class="comment"># 当然，我们可以改一下文件后缀，方便知道文件应该让哪个程序来解释</span></span><br><span class="line"><span class="built_in">mv</span> xiyouyun.sh xiyouyun.py</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果将拥有可执行权限的脚本所在的目录加入到 PATH 变量中，这样就可以直接使用文件名来执行文件了，否则需要使用文件的相对路径或者绝对路径来执行脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> jupyter</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">jupyter</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/bash%E6%95%99%E7%A8%8B/03a2138de3124f7bb3030d031897af4c.png" class="" title="在这里插入图片描述">


<h3 id="3-bash-脚本的参数（-0）"><a href="#3-bash-脚本的参数（-0）" class="headerlink" title="3.bash 脚本的参数（$0）"></a>3.bash 脚本的参数（$0）</h3><p>执行脚本时，我们可以给脚本传入参数，然后在脚本内部读取传入的</p>
<table>
<thead>
<tr>
<th>特殊变量（参数）</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>$0</td>
<td>脚本文件名称</td>
</tr>
<tr>
<td>$1 ~ $9</td>
<td>脚本的第1~9个参数</td>
</tr>
<tr>
<td>$#</td>
<td>参数的总数</td>
</tr>
<tr>
<td>$@</td>
<td>全部参数，使用空格分割</td>
</tr>
<tr>
<td>$*</td>
<td>全部参数，使用 $IFS 分割，IFS是一个环境变量</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo -e \&quot; \$1 \$2 \$3 \$4 \$5 \$6 \\n \$@ \\n \$* \&quot;&quot;</span> &gt; xiyou.sh</span><br><span class="line"><span class="built_in">cat</span> &gt; xiyou.sh &lt;&lt; <span class="string">_xiyou_</span></span><br><span class="line"><span class="string">echo &quot;\$1 \$2 \$3 \$4 \$5 \$6 &quot;</span></span><br><span class="line"><span class="string">echo &quot;\$@&quot;</span></span><br><span class="line"><span class="string">echo &quot;\$*&quot;</span></span><br><span class="line"><span class="string">echo &quot;参数的长度为 \$#&quot;</span></span><br><span class="line"><span class="string">_xiyou_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> u+x xiyou.sh</span><br><span class="line">./xiyou.sh x i y o u y u n</span><br></pre></td></tr></table></figure>

<p>我们见到的很多命令的参数前面通常是有名称的，这可以帮助脚本和使用者更好地理解各个参数的含义，比如说 wget。那么我们怎么通过指定不同名称的参数来影响脚本的执行过程和结果呢？</p>
<p>这里就涉及到一些逻辑判断的问题。</p>
<p>如果指定了 o 参数，就将跟在其后的一段字符解释为保存结果的文件路径。</p>
<p>如果指定了 d 参数，就打印 debug 信息。</p>
<p>我们下个视频讲如何在脚本中使用这种逻辑判断。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="1-命令的执行方式（-amp-amp-）"><a href="#1-命令的执行方式（-amp-amp-）" class="headerlink" title="1.命令的执行方式（&amp;&amp;,||, ;）"></a>1.命令的执行方式（&amp;&amp;,||, ;）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在一行执行多条命令，几条命令执行成功与否并无关联</span></span><br><span class="line"><span class="built_in">cd</span> /not_exists_path;<span class="built_in">pwd</span>;<span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 只有前一条命令执行成功才执行后一条</span></span><br><span class="line"><span class="built_in">pwd</span> &amp;&amp; <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">cd</span> /not/exists/path &amp;&amp; <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 如果前一条命令执行不成功就执行后一条，否则不执行后一条命令</span></span><br><span class="line"><span class="built_in">cd</span> /not/exists/path || <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="2-条件判断（if，test）"><a href="#2-条件判断（if，test）" class="headerlink" title="2.条件判断（if，test）"></a>2.条件判断（if，test）</h3><p>三类条件判断：</p>
<ol>
<li>对字符串进行条件判断</li>
<li>对文件进行条件判断</li>
<li>对命令的返回值进行条件判断</li>
</ol>
<p>语法规则：</p>
<ol>
<li>if 和 fi 包裹了整个条件判断的代码，以 if、elif、else 作为分隔符，<strong>分割后的代码块最多只有 1 个块会被执行。</strong></li>
<li>if 和 fi 是必须要有的，elif 和 else 都不是必须的，如果同时有 elif 和 else，else要放在最后</li>
</ol>
<p>使用条件判断的 3 种代码形式：</p>
<ol>
<li>[]</li>
<li>[[]] 支持正则表达式</li>
<li>test</li>
</ol>
<pre class="mermaid">graph TB
A(执行代码) --> B(if)
B(if) --> E(结束 fi)
A(执行代码) --> C(elif)
C(elif) --> E(结束 fi)
A(执行代码) --> F(elif)
F(elif) --> E(结束 fi)

A(执行代码) --> G(...)
G(...) --> E(结束 fi)

A(执行代码) --> D(else)
D(else) --> E(结束 fi)</pre>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串判断</span></span><br><span class="line">vi xiyou.sh</span><br><span class="line"><span class="comment"># 如果没传参数，就直接终止脚本的运行，返回 0</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$1</span> = <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;没传参数&quot;</span></span><br><span class="line">	<span class="built_in">exit</span> 0  <span class="comment"># 可以退出 1 个脚本，不再继续往下执行</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># &quot;[]&quot; 两边必须有空格	</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> = <span class="string">&quot;xiyouyun&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;hello xiyouyun&quot;</span></span><br><span class="line"><span class="comment"># 使用 test 做逻辑判断    </span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">test</span> <span class="variable">$1</span> = <span class="string">&quot;xiyou&quot;</span>; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;hello xiyou&quot;</span></span><br><span class="line"><span class="comment"># &quot;[[]]&quot; 两边必须有空格, 支持正则表达式</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$1</span> =~ t.* ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;hello txb&quot;</span>	</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;前面所有的条件都为假&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件判断，判断文件是否存在，且是一个普通文件而不是目录</span></span><br><span class="line"><span class="built_in">test</span> -a /etc/hosts</span><br><span class="line">[ -a /etc/hosts ]</span><br><span class="line"><span class="keyword">if</span> [[ -a /etc/hosts ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;file exists&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令返回值判断，如果命令的返回值为 0，则为真</span></span><br><span class="line"><span class="keyword">if</span> [[ `<span class="built_in">cd</span> not_exists_path` ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;cd not_exists_path 命令的返回值为真&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [[ $(<span class="built_in">ls</span>) ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;ls 命令的返回值为真&quot;</span></span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 test 命令的用法</span></span><br><span class="line">man <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与、或：组合多个条件表达式的方式</span></span><br><span class="line"><span class="comment"># 0 &lt; 1 且 2 &lt; 1</span></span><br><span class="line"><span class="keyword">if</span> [[ 0 -lt 1 &amp;&amp; 2 -lt 1 ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;0 小于 1 且 2 小于 1 的条件为真&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;0 小于 1 且 2 小于 1 的条件为假&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 0 &lt; 1 且 1 小于 2</span></span><br><span class="line"><span class="keyword">if</span> [[ 0 -lt 1 &amp;&amp; 1 -lt 2 ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;0 小于 1 且 1 小于 2 的条件为真&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;0 小于 1 且 1 小于 2 的条件为假&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 1 &lt; 0 或 1 大于等于 1</span></span><br><span class="line"><span class="keyword">if</span> [[ 1 -lt 0 || 1 -gt 1 || 1 -ge 1 ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;1 小于 0 或 1 大于 1 或 1 大于等于 1 的条件为真&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;1 小于 0 或 1 大于 1 或 1 大于等于 1 的条件为假&quot;</span></span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非：让表达式的值取反，即让假的变成真，真的变成假</span></span><br><span class="line"><span class="keyword">if</span> [[ ! <span class="string">&quot;一碗粉&quot;</span> = <span class="string">&quot;两碗粉&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;一碗粉不等于两碗粉&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;一碗粉等于两碗粉&quot;</span></span><br><span class="line"><span class="keyword">fi</span>	</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>条件</th>
<th align="left">值为真的情况</th>
</tr>
</thead>
<tbody><tr>
<td>-z 字符串</td>
<td align="left">字符串的长度为0时</td>
</tr>
<tr>
<td>字符串1 = 字符串 2</td>
<td align="left">两个字符串相同时</td>
</tr>
<tr>
<td>字符串1 ‘&lt;’ 字符串 2</td>
<td align="left">按照字典顺序字符串1 &lt; 字符串2：<br />a &lt; b<br />ab &lt; b<br />abcdefgg &lt; acdefgh</td>
</tr>
<tr>
<td>字符串1 -lt 字符串2</td>
<td align="left">字符串1对应的数学值比字符串2对应的数学值小（lower than）<br />“1” &lt; “2”</td>
</tr>
<tr>
<td>字符串1 -gt 字符串2</td>
<td align="left">字符串1对应的数学值比字符串2对应的数学值大（greater than）</td>
</tr>
<tr>
<td>字符串1 -ge 字符串2</td>
<td align="left">greater or equal</td>
</tr>
<tr>
<td>字符串1 -le 字符串2</td>
<td align="left">lower or equal</td>
</tr>
<tr>
<td>字符串1 -ne 字符串2</td>
<td align="left">not equal</td>
</tr>
<tr>
<td></td>
<td align="left"></td>
</tr>
<tr>
<td>-a file</td>
<td align="left">file 对应的文件存在</td>
</tr>
<tr>
<td>-d file</td>
<td align="left">file 对应的目录存在</td>
</tr>
<tr>
<td>-h file</td>
<td align="left">file 存在，并且是一个软链接或硬链接</td>
</tr>
<tr>
<td>-r file</td>
<td align="left">file 可读</td>
</tr>
<tr>
<td>-w file</td>
<td align="left">file 可写</td>
</tr>
<tr>
<td>-x file</td>
<td align="left">file 可执行</td>
</tr>
<tr>
<td></td>
<td align="left"></td>
</tr>
<tr>
<td>`command`</td>
<td align="left">如果命令的返回值为 0 ，则为真</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>逻辑表达式</th>
<th>值为真的情况</th>
</tr>
</thead>
<tbody><tr>
<td>expression</td>
<td>条件成立，则表达式的值为真</td>
</tr>
<tr>
<td>! expression</td>
<td>当表达式的值为假时</td>
</tr>
<tr>
<td>expression1 &amp;&amp; expression2</td>
<td>当表达式1和表达式2的值都为真时</td>
</tr>
<tr>
<td>expression1 &amp;&amp; expression2</td>
<td>当表达式1或表达式2的值为真时</td>
</tr>
</tbody></table>
<h3 id="3-循环（for…in-while-for-break-continue）"><a href="#3-循环（for…in-while-for-break-continue）" class="headerlink" title="3.循环（for…in, while, for, break, continue）"></a>3.循环（for…in, while, for, break, continue）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while 循环</span></span><br><span class="line"><span class="keyword">while</span> condition; <span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for...in 循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test.log *.txt; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span>	</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 循环</span></span><br><span class="line"><span class="keyword">for</span> (( i=0; i&lt;5; i=i+1 )); <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># break 用于结束循环</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> 1 2 3 4 5 6</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;number is <span class="variable">$number</span>&quot;</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$number</span>&quot;</span> = <span class="string">&quot;3&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># continue 用于终止本轮循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> -p <span class="string">&quot;What file do you want to test?&quot;</span> filename</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -e <span class="string">&quot;<span class="variable">$filename</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The file does not exist.&quot;</span></span><br><span class="line">    <span class="built_in">continue</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;You entered a valid file..&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$i</span> = <span class="string">&quot;\-o&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">elif</span> [[]]</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>


<h3 id="4-函数（定义，参数）"><a href="#4-函数（定义，参数）" class="headerlink" title="4.函数（定义，参数）"></a>4.函数（定义，参数）</h3><p>函数是可以重复使用的代码片段。</p>
<p>在函数中可以使用参数，调用函数时可以传递参数到函数中。</p>
<ol start="0">
<li><p>函数的定义</p>
</li>
<li><p>函数的参数</p>
</li>
<li><p>函数的返回值和脚本的返回值</p>
</li>
<li><p>函数中的局部变量和全局变量（<strong>推荐在函数中使用局部变量</strong>）</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span> <span class="variable">$4</span> <span class="variable">$5</span></span><br><span class="line">	<span class="comment"># 函数执行到 return 语句就直接返回，不再往下执行</span></span><br><span class="line">	<span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 调用一个函数, fn 是函数名，剩下的是参数</span></span><br><span class="line">fn x y o u</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;$?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 1 个函数让两个数相加</span></span><br><span class="line"><span class="function"><span class="title">add</span></span> () &#123;</span><br><span class="line">	a=$((<span class="variable">$1</span> + <span class="variable">$2</span>))</span><br><span class="line">	<span class="built_in">return</span> <span class="variable">$a</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;函数中 return 后面的代码不会运行&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">add 1 2</span><br><span class="line"><span class="comment"># 通过 $? 获取函数的返回值，不过返回值只能为 0~255 的数字，否则会溢出</span></span><br><span class="line"><span class="comment"># 其实它更大的意义是能让 1 个函数结束运行</span></span><br><span class="line"><span class="built_in">sum</span>=$?</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line">add 0 255</span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line">add 1 256</span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment"># 脚本的返回值，范围也是 0~255，它的主要意义是让后面的代码不再执行</span></span><br><span class="line"><span class="comment"># 次要意义是我们通常在脚本正常执行是返回 0，脚本执行出错时返回其他数字</span></span><br><span class="line"><span class="built_in">exit</span> 255</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello, xiyouyun&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">foo=9527</span><br><span class="line"><span class="comment"># 在函数中使用 local 定义局部变量</span></span><br><span class="line"><span class="function"><span class="title">fn2</span></span> () &#123;</span><br><span class="line">  <span class="built_in">local</span> foo</span><br><span class="line">  foo=1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;fn: foo = <span class="variable">$foo</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;global: foo = <span class="variable">$foo</span>&quot;</span></span><br><span class="line"><span class="comment"># 查看当前 shell 环境下定义的函数</span></span><br><span class="line"><span class="built_in">declare</span> -f</span><br><span class="line"><span class="built_in">declare</span> -F</span><br></pre></td></tr></table></figure>

<ul>
<li><code>$1</code>~`$9`：函数的第1个到第9个参数。</li>
<li><code>$0</code>：函数所在的脚本名。</li>
<li><code>$#</code>：函数的参数总数。</li>
<li><code>$@</code>：函数的全部参数，参数之间使用空格分隔。</li>
<li><code>$*</code>：函数的全部参数，参数之间使用变量<code>$IFS</code>值的第一个字符分隔，默认为空格</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>ping和github代理</title>
    <url>/2022/12/30/ping%E5%92%8Cgithub%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=263073831&bvid=BV1JY411d77K&cid=903013242&page=1"style="width:100%;height:500px;min-width:375px;min-height:200px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>



<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="网络的联通性"><a href="#网络的联通性" class="headerlink" title="网络的联通性"></a>网络的联通性</h2><p>说到联通性，自然至少涉及到两个对象，比如说主机A和主机B是联通的。那么我们怎么判断我们当前使用的电脑和某个ip或域名对应的主机是否联通呢？</p>
<p>好了，这里提到了 ip 和域名，那么他们是什么关系呢？</p>
<p>通常来说，网络上的两台主机能够通过 ip 来进行通信，ip 的形式如：x.x.x.x，其中 x 是一个[0,255]区间的数字。</p>
<p>但是 4 个数字并不如一些有意义的字符好记。如: <a href="http://www.baidu.com,github.com./">www.baidu.com，github.com。</a></p>
<p>所以，你也可以使用域名替换掉ip与主机通信。通常来说，在公网中会有 DNS 服务器将域名解析成 ip，这样就能通过访问域名的方式来访问主机啦。你也可以在本地配置域名和 ip 的映射关系。</p>
<p>linux 本地配置域名和 ip 映射的文件在 /etc/hosts 中，因为 Linux 中没有浏览器，我这里使用 windows 来演示一下，原理是一样的。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pint www.baidu.com
http://14.215.177.38
http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1 个不能访问的链接</span>
<span class="token function">wget</span>  https://raw.githubusercontent.com/qiime2/environment-files/master/2018.8/release/qiime2-2018.8-py35-linux-conda.yml

<span class="token comment"># 使用 github 代理访问</span>
<span class="token function">wget</span> https://ghproxy.com/https://raw.githubusercontent.com/qiime2/environment-files/master/2018.8/release/qiime2-2018.8-py35-linux-conda.yml

<span class="token comment"># 这个就是这个链接对应的域名</span>
<span class="token function">ping</span> raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="127-0-0-1-和-localhost"><a href="#127-0-0-1-和-localhost" class="headerlink" title="127.0.0.1 和 localhost"></a>127.0.0.1 和 localhost</h2><p>127.0.0.1 是本机的 ip 地址，localhost 是它对应的域名</p>
<p>当然本机还有一个对外的 ip 地址，不过如果不是公网 ip 的话，对于其他和本机不属于一个局域网的主机来说没有实际意义，如 192.168.0.1，很多路由器的 ip 地址是这个，登陆它能够对路由器进行设置。但对于不跟路由器在同一个局域网的主机，是不能通过这个 ip 登陆它的。</p>
<h2 id="依赖网络连通性的-linux-命令"><a href="#依赖网络连通性的-linux-命令" class="headerlink" title="依赖网络连通性的 linux 命令"></a>依赖网络连通性的 linux 命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span>
<span class="token function">ftp</span> / <span class="token function">sftp</span>
<span class="token function">wget</span> 
<span class="token function">curl</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="github-代理"><a href="#github-代理" class="headerlink" title="github 代理"></a>github 代理</h2><p>每个代理使用的方法不一样，可以访问他们的官网查看使用方法。</p>
<p><a href="https://hub.yzuu.cf/">https://hub.yzuu.cf/</a><br><a href="https://hub.njuu.cf/">https://hub.njuu.cf/</a><br><a href="https://ghproxy.com/">https://ghproxy.com/</a><br><a href="https://github.moeyy.xyz/">https://github.moeyy.xyz/</a><br><a href="https://kgithub.com/">https://kgithub.com/</a><br><a href="https://gitclone.com/">https://gitclone.com/</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>文本处理之awk</title>
    <url>/2022/12/30/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B9%8Bawk/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=262900730&bvid=BV1KY411Z7nc&cid=901859829&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>


<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk 是个Linux系统自带的处理文本文件的程序，其原理是逐行处理文本内容，适合处理每行格式相同的文本文件。如：csv 格式的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef &gt; xiyou.txt</span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> xiyou.txt</span><br></pre></td></tr></table></figure>

<p><strong>awk [参数] ‘条件 {代码}’ filename</strong> 条件可以省略，默认处理所有行。只处理符合条件的行。</p>
<p>参数：</p>
<ul>
<li>F 指定分割符，不指定默认为空格</li>
<li>v 定义变量或修改 awk 代码中内置的变量</li>
</ul>
<p>awk 默认以空格作为分隔符，也可通过 F 参数指定特殊的符号为分隔符。</p>
<p>代码中的特殊变量：</p>
<ul>
<li>$0: 当前处理行的文本内容</li>
<li>$1 使用分隔符分割后的第 1 列的内容</li>
<li>$2 使用分隔符分割后的第 2 列的内容，以此类推</li>
<li>NF 使用分隔符分割后的最后 1 列的序号</li>
<li>NF-1 使用分隔符分割后的倒数第 2 列的序号</li>
<li>NR 当前的处理行的序号</li>
<li>OFS awk 中代码 print 时的分隔符，默认值为 1 个空格</li>
<li>FILENAME 文件名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印文件的每一行第 1 列和第 2 列</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print($1, $2)&#125;&#x27;</span> xiyou.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> | awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只处理匹配正则表达式的行，即只处理以 txb 开头的行</span></span><br><span class="line">awk <span class="string">&#x27;/^txb/ &#123;</span></span><br><span class="line"><span class="string">	print(&quot;txb 用户运行的进程的 pid: &quot;, $2)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> xiyou.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理不匹配正则表达式的行</span></span><br><span class="line">awk <span class="string">&#x27;!/^txb/ &#123;</span></span><br><span class="line"><span class="string">	print(&quot;非txb 用户运行的进程的 pid: &quot;, $2)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> xiyou.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有用户的进程 id</span></span><br><span class="line">awk <span class="string">&#x27;(!/^txb/ || /^txb/) &amp;&amp; !/^UID/ &#123;</span></span><br><span class="line"><span class="string">	print( $1, &quot;用户运行的进程的 pid: &quot;, $2)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> xiyou.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在代码中使用 if，在代码中使用双引号，awk 能够处理比较字符串</span></span><br><span class="line">awk -v OFS=<span class="string">&#x27;#&#x27;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">if($1 == &quot;root&quot; &amp;&amp; $2 &gt; 1) &#123;</span></span><br><span class="line"><span class="string">	print(&quot;root 用户运行的进程的 pid: &quot;, $2)&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> xiyou.txt</span><br></pre></td></tr></table></figure>

<h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><table>
<thead>
<tr>
<th>关系运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于 m &gt; n</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于 m &lt; n</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于 m &gt;=n</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于 m &lt;=n</td>
</tr>
<tr>
<td>==</td>
<td>等于 m == n</td>
</tr>
<tr>
<td>!=</td>
<td>不等于 m != n</td>
</tr>
<tr>
<td>~</td>
<td>正则匹配符号，text ~ /正则表达式/</td>
</tr>
<tr>
<td>!=</td>
<td>不匹配正则，text !~ /正则表达式/</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>a || b</td>
<td>a 条件为真，或 b 条件为真，则整个表达式的值为真</td>
</tr>
<tr>
<td>a &amp;&amp; b</td>
<td>a 条件为真，且 b 条件为真，则整个表达式的值为真</td>
</tr>
<tr>
<td>！a</td>
<td>若 a 条件为真，则整个表达式的值为假</td>
</tr>
</tbody></table>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>文本处理(sed,xargs,wc)</title>
    <url>/2022/12/30/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86-sed-xargs-wc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=220445497&bvid=BV1X841177rm&cid=900840633&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>sed 可以对文件中的文本内容进行过滤和修改，它的原理是逐行读入文本内容，根据模式匹配符合条件的文本，然后做操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 xiyou.txt 文件写入多行内容</span></span><br><span class="line"><span class="built_in">cat</span> &gt; xiyou.txt &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">x</span></span><br><span class="line"><span class="string">y</span></span><br><span class="line"><span class="string">XIYOU.</span></span><br><span class="line"><span class="string">xiyou.</span></span><br><span class="line"><span class="string">952</span></span><br><span class="line"><span class="string">9527</span></span><br><span class="line"><span class="string">9527777</span></span><br><span class="line"><span class="string">95277777777777777777777</span></span><br><span class="line"><span class="string">9527xiyou.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> xiyoucloud. xiyou.</span></span><br><span class="line"><span class="string">xiyouyun or xiyoucloud</span></span><br><span class="line"><span class="string">xiyouyun to be xiyouyun</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>sed [参数] [内置命令] 文件路径</p>
<p>参数：</p>
<ul>
<li>n 取消默认的 sed 输出，sed 默认会输出处理后的文本信息</li>
<li>i 将做的修改写入文件，默认在终端展示修改效果而不写入文件，设计到修改文件的操作都要使用这个参数</li>
<li>e 一次性做多次编辑</li>
<li>r 对正则表达式提供更好的支持</li>
</ul>
<p>内置命令：</p>
<ul>
<li>a append 在某行的后面追加内容</li>
<li>i insert 在某行的前面插入内容</li>
<li>d delete 删除符合条件的行</li>
<li>p print 打印符合条件的行</li>
<li>s/模式/替换文本：将模式匹配到的字符替换为其他字符</li>
</ul>
<p>范围：默认全文，指定某行，指定范围行，匹配行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出文件的从第2行到第5行的内容</span></span><br><span class="line">sed -n <span class="string">&#x27;1 p&#x27;</span> xiyou.txt</span><br><span class="line">sed -n <span class="string">&#x27;2,5 p&#x27;</span> xiyou.txt</span><br><span class="line">sed -n <span class="string">&#x27;1~2 p&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 输出包含有 xiyou 的行（过滤）</span></span><br><span class="line">sed -n <span class="string">&#x27;/xiyou/ p&#x27;</span> xiyou.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加文件内容（2种方式）</span></span><br><span class="line">sed -i <span class="string">&#x27;1 a 在第 1 行的后面增加的文本内容&#x27;</span> xiyou.txt</span><br><span class="line">sed -i <span class="string">&#x27;1 i 在第 1 行的前面增加的文本内容&#x27;</span> xiyou.txt</span><br><span class="line">sed -i <span class="string">&#x27;a ---------------&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 删除文件内容,删除第 1 行到第 3 行的内容</span></span><br><span class="line">sed -i <span class="string">&#x27;1,3 d&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 替换匹配模式, g表示全部替换，默认只替换匹配到的第 1 个</span></span><br><span class="line">sed -i <span class="string">&#x27;s/xiyou/西柚/g&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 一次性做两次替换</span></span><br><span class="line">sed -i -e <span class="string">&#x27;s/9/九/g&#x27;</span> -e <span class="string">&#x27;s/5/五/g&#x27;</span> xiyou.txt</span><br></pre></td></tr></table></figure>

<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="xargs：一个用于传递参数的命令"><a href="#xargs：一个用于传递参数的命令" class="headerlink" title="xargs：一个用于传递参数的命令"></a>xargs：一个用于传递参数的命令</h2><p>xargs 会将标准输入的文本内容聚合后通过 echo 输出。多行内容会被输出为 1 行内容。因此通常用来构造单行命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;&lt;&lt; 可以给 xargs 提供标准输入</span></span><br><span class="line">xargs &lt;&lt;&lt; <span class="string">&quot;1 2 3 4&quot;</span></span><br><span class="line"><span class="built_in">cat</span> xiyou.txt | xargs</span><br><span class="line"></span><br><span class="line"><span class="comment"># n 指定每行最多输出指定个数的参数</span></span><br><span class="line"><span class="built_in">cat</span> xiyou.txt | xargs -n 3</span><br><span class="line"><span class="comment"># I 可以指定一个符号用于参数的替换</span></span><br><span class="line"><span class="built_in">cat</span> xiyou.txt | xargs -I &#123;&#125; <span class="built_in">echo</span> <span class="string">&quot;hello, &#123;&#125;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录下所有的 txt 文件，-0 表示以 \0 做分隔符</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> -print0 | xargs -0 <span class="built_in">rm</span> -f</span><br><span class="line"><span class="comment"># 将当前目录下的以 py 结尾的文件移到 xiyou 目录中</span></span><br><span class="line"><span class="built_in">mkdir</span> xiyou &amp;&amp; <span class="built_in">touch</span> &#123;1..9&#125;.py &amp;&amp; <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span> *.py | xargs -I &#123;&#125; <span class="built_in">mv</span> &#123;&#125; xiyou</span><br><span class="line"><span class="comment"># 打包当前目录下所有的 png 文件</span></span><br><span class="line"><span class="built_in">touch</span> &#123;1..100&#125;.png</span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.png&quot;</span> -<span class="built_in">print</span> | xargs tar -czvf images.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="wc：统计文本内容"><a href="#wc：统计文本内容" class="headerlink" title="wc：统计文本内容"></a>wc：统计文本内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计文件中的文本信息(行数，单词数，字节数，文件名)</span></span><br><span class="line"><span class="built_in">wc</span> xiyou.txt</span><br><span class="line"><span class="comment"># 统计文件中文本的行数</span></span><br><span class="line"><span class="built_in">wc</span> -l xiyou.txt</span><br><span class="line"><span class="comment"># 统计文件名以 txt 结尾的文本的行数</span></span><br><span class="line"><span class="built_in">wc</span> -l *.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目录下的文件大小小于10M 的文件的文本内容信息（）</span></span><br><span class="line">find . -<span class="built_in">type</span> f -size -10M | xargs <span class="built_in">wc</span> ;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>文本处理之grep</title>
    <url>/2022/12/30/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B9%8Bgrep/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=945376710&bvid=BV1HW4y1W7je&cid=899825524&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>文本通常保存在文件中，使用 linux 命令可以将文件读取文件内容到标准输出中，然后使用管道符（|）将文本”流“向另一个命令的输入。管道符（|）的作用可以顾名思义，输出到标准输出的文本可以通过管道“流”向其他命令，这些命令可以对这些输入的文本进行处理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 xiyou.txt 文件写入多行内容</span></span><br><span class="line"><span class="built_in">cat</span> &gt; xiyou.txt &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">x</span></span><br><span class="line"><span class="string">y</span></span><br><span class="line"><span class="string">XIYOU.</span></span><br><span class="line"><span class="string">xiyou.</span></span><br><span class="line"><span class="string">952</span></span><br><span class="line"><span class="string">9527</span></span><br><span class="line"><span class="string">9527777</span></span><br><span class="line"><span class="string">95277777777777777777777</span></span><br><span class="line"><span class="string">9527xiyou.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> xiyoucloud. xiyou.</span></span><br><span class="line"><span class="string">xiyouyun or xiyoucloud</span></span><br><span class="line"><span class="string">xiyouyun to be xiyouyun</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># 查看 xiyou.txt 文件的内容，并过滤出包含 xiyou 的行</span></span><br><span class="line"><span class="built_in">cat</span> xiyou.txt | grep xiyou</span><br><span class="line">grep xiyou xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="grep使用方法"><a href="#grep使用方法" class="headerlink" title="grep使用方法"></a>grep使用方法</h2><p>grep 不支持（\+字母 表示一类字符的正则表达式），如：\s,\S,\d,\D,\w,\W 但这无伤大雅,我们可以用另一种模式来代替它们。</p>
<table>
<thead>
<tr>
<th>模式 1</th>
<th>模式 2</th>
</tr>
</thead>
<tbody><tr>
<td>\s</td>
<td>“ “+</td>
</tr>
<tr>
<td>\d</td>
<td>[0-9]+</td>
</tr>
<tr>
<td>\w</td>
<td>[a-zA-Z0-9]+</td>
</tr>
</tbody></table>
<p>grep [参数] [模式] 文件</p>
<ul>
<li>i 忽略字符的大小写</li>
<li>v 显示不能被模式匹配的行</li>
<li>n 输出匹配行的行号</li>
<li>o 只输出匹配内容，默认是输出包含有匹配内容的行</li>
<li>E 对正则表达式提供更好的支持,支持这些符号（+,?,|,”()”,”{}”），建议每次使用正则表达式时都加上，这样就不用记住加上 E 参数后会提供哪些特殊符号的支持了。</li>
<li>A 显示匹配项和匹配项的后 n 行</li>
<li>B 显示匹配项和匹配项的前 n 行</li>
<li>C 显示匹配项和匹配项的前后 n 行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以数字开头的行</span></span><br><span class="line">grep -nE <span class="string">&#x27;^[0-9]&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 以 u. 结尾的行</span></span><br><span class="line">grep -nE <span class="string">&#x27;u\.$&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 以 x 或 X 开头的行</span></span><br><span class="line">grep -nE <span class="string">&#x27;^(x|X)&#x27;</span> xiyou.txt</span><br><span class="line">grep -niE <span class="string">&#x27;^x&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 全是数字的行</span></span><br><span class="line">grep -nE <span class="string">&#x27;^[0-9]+$&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 输出文件的空行和行号</span></span><br><span class="line">grep -nE <span class="string">&#x27;^$&#x27;</span> xiyou.txt </span><br><span class="line"><span class="comment"># 包含大写字母的行</span></span><br><span class="line">grep -E <span class="string">&#x27;[A-Z]&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 输出包含 xiyou 的行，并只输出匹配内容</span></span><br><span class="line">grep -onE <span class="string">&#x27;xiyou.*&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 输出不包含 xiyou 的行</span></span><br><span class="line">grep -vnE <span class="string">&#x27;xiyou&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 输出不包含大写字母的行</span></span><br><span class="line">grep -nE <span class="string">&#x27;[^A-Z]&#x27;</span> xiyou.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用分组匹配,可以使用 \1 引用前面匹配的分组内容</span></span><br><span class="line">grep -nE <span class="string">&#x27;(xi..u).* \1&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 匹配以 952 开头，后面跟着的 7 的数量最少 2 个，最多 5 个的行</span></span><br><span class="line">grep -nE <span class="string">&#x27;^9527&#123;2,5&#125;$&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 匹配以 952 开头，后面跟着 0 个 或 1 个 7 的行</span></span><br><span class="line">grep -nE <span class="string">&#x27;^9527?$&#x27;</span> xiyou.txt</span><br><span class="line"><span class="comment"># 显示匹配项的前后 1 行</span></span><br><span class="line">grep -C 5 -nE <span class="string">&#x27;^9527?$&#x27;</span> xiyou.txt</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><table>
<thead>
<tr>
<th>模式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>abc</td>
<td>abc</td>
</tr>
<tr>
<td>123</td>
<td>123</td>
</tr>
<tr>
<td>[a-z]</td>
<td>匹配小写英文字母</td>
</tr>
<tr>
<td>[0-9]</td>
<td>匹配数字</td>
</tr>
<tr>
<td>[a-zA-Z0-9]</td>
<td>匹配字母和数字</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>不匹配字母</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意单个字符</td>
</tr>
<tr>
<td>^</td>
<td>匹配开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配结尾</td>
</tr>
<tr>
<td>(a|b)</td>
<td>匹配字母 a 或 b</td>
</tr>
<tr>
<td>+</td>
<td>匹配前一个匹配项1次或多次</td>
</tr>
<tr>
<td>？</td>
<td>匹配前一个匹配项0次或1次</td>
</tr>
<tr>
<td>*</td>
<td>匹配前一个匹配项任意次</td>
</tr>
<tr>
<td>{n}</td>
<td>匹配前一个匹配项至少 n 次</td>
</tr>
<tr>
<td>{m,n}</td>
<td>匹配前一个匹配项最少 m 次，最多 n 次</td>
</tr>
</tbody></table>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2022/12/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=432941989&bvid=BV1C3411f77q&cid=898761486&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>正则表达式是一串用于匹配字符的字符，字符就是我们能够看到的文字符号。正则表达式的的优点是可以使用少量字符匹配大量字符，这里我们将用于匹配其他字符的正则表达式称为<strong>模式</strong>。</p>
<p>正则表达式是一项偏向于实践的知识，通过实践来学习会事半功倍，因此这里推荐大家到相应的正则表达式在线练习平台去学习。（会有视频演示）</p>
<p>我们学习正则表达式，是为了利用它来更方便地处理文本。那么什么是文本呢？文件中的内容属于文本，ls 的输出内容也属于文本，文本就是我们能够看到的文字符号。后文学习的命令（grep，sed，awk）会使用到正则表达式来处理文本内容。</p>
<p>当然，你可能还是对正则表达式的作用不甚清楚，这里我可以给出两条命令来演示一下它的功能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 test.txt 中包含数字的行</span></span><br><span class="line">sed -i <span class="string">&#x27;/[0-9]/d&#x27;</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死运行命令中包含有 jupyter 关键字的所有进程</span></span><br><span class="line">ps -ef | grep jupyter | awk <span class="string">&#x27;&#123;if ($0 ~ /grep/) &#123;next&#125;; print($2)&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure>



<h2 id="表格来源：https-regexone-com"><a href="#表格来源：https-regexone-com" class="headerlink" title="表格来源：https://regexone.com/"></a>表格来源：<a href="https://regexone.com/">https://regexone.com/</a></h2><table>
<thead>
<tr>
<th>模式</th>
<th>匹配文本</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://regexone.com/lesson/introduction_abcs">abc…</a></td>
<td><a href="https://regexone.com/lesson/introduction_abcs">Letters</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/letters_and_digits">123…</a></td>
<td><a href="https://regexone.com/lesson/letters_and_digits">Digits</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/letters_and_digits">\d</a></td>
<td><a href="https://regexone.com/lesson/letters_and_digits">Any Digit</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/letters_and_digits">\D</a></td>
<td><a href="https://regexone.com/lesson/letters_and_digits">Any Non-digit character</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/wildcards_dot">.</a></td>
<td><a href="https://regexone.com/lesson/wildcards_dot">Any Character</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/wildcards_dot">.</a></td>
<td><a href="https://regexone.com/lesson/wildcards_dot">Period</a></td>
</tr>
<tr>
<td>[<a href="https://regexone.com/lesson/matching_characters">abc]</a></td>
<td><a href="https://regexone.com/lesson/matching_characters">Only a, b, or c</a></td>
</tr>
<tr>
<td>[<a href="https://regexone.com/lesson/excluding_characters">^abc]</a></td>
<td><a href="https://regexone.com/lesson/excluding_characters">Not a, b, nor c</a></td>
</tr>
<tr>
<td>[<a href="https://regexone.com/lesson/character_ranges">a-z]</a></td>
<td><a href="https://regexone.com/lesson/character_ranges">Characters a to z</a></td>
</tr>
<tr>
<td>[<a href="https://regexone.com/lesson/character_ranges">0-9]</a></td>
<td><a href="https://regexone.com/lesson/character_ranges">Numbers 0 to 9</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/character_ranges">\w</a></td>
<td><a href="https://regexone.com/lesson/character_ranges">Any Alphanumeric character</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/character_ranges">\W</a></td>
<td><a href="https://regexone.com/lesson/character_ranges">Any Non-alphanumeric character</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/repeating_characters">{m}</a></td>
<td><a href="https://regexone.com/lesson/repeating_characters">m Repetitions</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/repeating_characters">{m,n}</a></td>
<td><a href="https://regexone.com/lesson/repeating_characters">m to n Repetitions</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/kleene_operators">*</a></td>
<td><a href="https://regexone.com/lesson/kleene_operators">Zero or more repetitions</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/kleene_operators">+</a></td>
<td><a href="https://regexone.com/lesson/kleene_operators">One or more repetitions</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/optional_characters">?</a></td>
<td><a href="https://regexone.com/lesson/optional_characters">Optional character</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/whitespaces">\s</a></td>
<td><a href="https://regexone.com/lesson/whitespaces">Any Whitespace</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/whitespaces">\S</a></td>
<td><a href="https://regexone.com/lesson/whitespaces">Any Non-whitespace character</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/line_beginning_end">^…$</a></td>
<td><a href="https://regexone.com/lesson/line_beginning_end">Starts and ends</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/capturing_groups">(…)</a></td>
<td><a href="https://regexone.com/lesson/capturing_groups">Capture Group</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/nested_groups">(a(bc))</a></td>
<td><a href="https://regexone.com/lesson/nested_groups">Capture Sub-group</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/more_groups">(.*)</a></td>
<td><a href="https://regexone.com/lesson/more_groups">Capture all</a></td>
</tr>
<tr>
<td><a href="https://regexone.com/lesson/conditionals">(abc|def)</a></td>
<td><a href="https://regexone.com/lesson/conditionals">Matches abc or def</a></td>
</tr>
</tbody></table>
<h2 id="在线正则表达式练习平台：https-regexlearn-com-zh-cn-learn"><a href="#在线正则表达式练习平台：https-regexlearn-com-zh-cn-learn" class="headerlink" title="在线正则表达式练习平台：https://regexlearn.com/zh-cn/learn"></a>在线正则表达式练习平台：<a href="https://regexlearn.com/zh-cn/learn">https://regexlearn.com/zh-cn/learn</a></h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>进程的后台运行(bg,fg,jobs,nohup,&amp;)</title>
    <url>/2022/12/30/%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-bg-fg-jobs-nohup/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=520271004&bvid=BV1tM411C7ke&cid=897743562&page=1"style="width:100%;height:500px;min-width:375px;min-height:200px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>


<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="让进程后台运行的方式"><a href="#让进程后台运行的方式" class="headerlink" title="让进程后台运行的方式"></a>让进程后台运行的方式</h2><h2 id="1-amp"><a href="#1-amp" class="headerlink" title="1.&amp;"></a>1.&amp;</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 10086 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="2-ctrl-z-和bg搭配"><a href="#2-ctrl-z-和bg搭配" class="headerlink" title="2.ctrl + z 和bg搭配"></a>2.ctrl + z 和bg搭配</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 10010</span><br><span class="line"><span class="comment"># 按 ctrl + z</span></span><br><span class="line"><span class="comment"># 在终端输入 bg</span></span><br><span class="line"><span class="built_in">bg</span> </span><br></pre></td></tr></table></figure>

<h2 id="3-使用-nohup-的方式后台运行进程"><a href="#3-使用-nohup-的方式后台运行进程" class="headerlink" title="3.使用 nohup 的方式后台运行进程"></a>3.使用 nohup 的方式后台运行进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> <span class="built_in">sleep</span> 1111 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="查看后台运行的进程（jobs）"><a href="#查看后台运行的进程（jobs）" class="headerlink" title="查看后台运行的进程（jobs）"></a>查看后台运行的进程（jobs）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">jobs</span> -l</span><br></pre></td></tr></table></figure>

<h2 id="将后台运行的进程转到前台运行（fg）"><a href="#将后台运行的进程转到前台运行（fg）" class="headerlink" title="将后台运行的进程转到前台运行（fg）"></a>将后台运行的进程转到前台运行（fg）</h2><p>可以根据后台运行的进程编号将对应的进程转到前台来运行，编号可通过 jobs 命令查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程编号</span></span><br><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment"># 将 1 号后台运行的进程转到前台运行</span></span><br><span class="line"><span class="built_in">fg</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定编号，默认将编号最大的进程转到前台运行</span></span><br><span class="line"><span class="built_in">fg</span></span><br></pre></td></tr></table></figure>



<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="后台运行的进程在终端关闭后还能继续运行吗？"><a href="#后台运行的进程在终端关闭后还能继续运行吗？" class="headerlink" title="后台运行的进程在终端关闭后还能继续运行吗？"></a><strong>后台运行的进程在终端关闭后还能继续运行吗？</strong></h2><p>分情况，使用上文中的方式 1 和方式 2 运行的后台进程会在终端关闭后被杀死。</p>
<p>而使用 nohup 运行的后台进程在终端关闭后而主机还在运行的情况下继续运行。</p>
<p>下面我们来介绍一下原理:</p>
<p>假设我们通过 SSH 协议连接到一台 Linux 主机，连接后我们可以在当前的终端执行命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们以上述的 3 种方式运行后台进程</span></span><br><span class="line"> <span class="comment">## &amp;</span></span><br><span class="line"><span class="built_in">sleep</span> 10010 &amp;</span><br><span class="line"> <span class="comment">## ctrl + z, bg</span></span><br><span class="line"><span class="built_in">sleep</span> 10086</span><br><span class="line"> <span class="comment">## nohup</span></span><br><span class="line"><span class="built_in">nohup</span> <span class="built_in">sleep</span> 111111 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="进程的组织结构："><a href="#进程的组织结构：" class="headerlink" title="进程的组织结构："></a><strong>进程的组织结构：</strong></h2><p>Linux 中进程的组织结构就像一棵树</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep &lt;username&gt;</span><br><span class="line">pstree -anph | grep sshd -A 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般来说，父进程被杀死后，子进程也会被杀死，但使用 nohup 方式运行的后台进程会在 sshd 进程被杀死后将</span></span><br><span class="line"><span class="comment"># 进程托管给 linux 的 init 进程，这样这个进程就会继续运行了。</span></span><br><span class="line"></span><br><span class="line">ps -ef | grep <span class="built_in">sleep</span></span><br></pre></td></tr></table></figure>

<p>使用 &amp; 和 （ctrl + z，bg）方式运行的进程在终端关闭后就被杀死了，而使用 nohup 后台运行的进程在终端关闭后还运行在机器中。这是因为通常终端与 Linux 服务器是通过 SSH 协议连接的，每次连接都会建立一个 sshd 进程，在这个终端下运行的所有进程都会作为这个 sshd 进程的子进程。终端关闭后 sshd 进程就结束了，于是它的子进程也就被杀死了。</p>
<p>使用 nohup 运行的后台进程会在终端关闭后将进程托管到 Linux 的 init 进程，这个进程是一直在服务器中运行的，所以该进程的子进程不会因为父进程被杀死而结束。</p>
<h2 id="运行进程时记录日志："><a href="#运行进程时记录日志：" class="headerlink" title="运行进程时记录日志："></a><strong>运行进程时记录日志：</strong></h2><p>在让进程后台运行时，我们通常需要记录日志，用于了解进程的运行情况。</p>
<p>比如运行 jupyter notebook 时，我们通常将日志输入到文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> jupyter notebook 1&gt;jupyter.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>这里的 2 表示的是错误输出，1 表示的是标准输出，标准输出会输出到终端。上述的 <code>2&gt;&amp;1</code> 会将标准错误输出重定向标准输出（终端），<code>1&gt;jupyter.log</code>会将标准输出中的内容重定向到 jupyter.log 文件中，这样进程输出的日志信息就全都记录在 jupyter.log 文件中了，查看 jupyter.log 文件中的内容，就能知道进程的运行状态了。</p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>进程介绍(ps)</title>
    <url>/2022/12/30/%E8%BF%9B%E7%A8%8B%E4%BB%8B%E7%BB%8D-ps/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=647818915&bvid=BV1Ee4y1p77d&cid=896823750&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>针对 ubuntu20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>什么是进程？进程就是运行的程序。</p>
<p>我们可以（运行程序，终止程序，查看程序的运行状态）</p>
<p>那么我们如何产生1个进程呢？我们通常使用命令，命令对应程序，程序执行后就会产生进程。</p>
<p>如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输入 python3 进入python3 的交互模式中，期间你可以执行 python 代码，输入 exit（）退出该模式</span>
python3
print<span class="token punctuation">(</span><span class="token string">"hello, xiyouyun"</span><span class="token punctuation">)</span>
exit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 输出一串字符串</span>
<span class="token builtin class-name">echo</span> <span class="token string">"hello, xiyouyun"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行在前台的进程：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1 个 sleep 进程，占用终端 1000s 不做操作</span>
<span class="token function">sleep</span> <span class="token number">1000</span>
<span class="token comment"># 这些都是运行在前台的进程</span>
<span class="token builtin class-name">pwd</span>
<span class="token function">ls</span>
<span class="token builtin class-name">cd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这种运行后就占用了终端，让我们不能做其他操作的进程，我们称它运行在前台，可以使用 ctrl + c 结束运行。</p>
<p>运行在后台的程序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 让进程在后台运行</span>
<span class="token function">sleep</span> <span class="token number">1001</span> <span class="token operator">&amp;</span>
<span class="token function">sleep</span> <span class="token number">10086</span> <span class="token operator">&amp;</span>
<span class="token function">sleep</span> <span class="token number">10010</span> <span class="token operator">&amp;</span>
<span class="token builtin class-name">echo</span> <span class="token string">"hello, xiyouyun"</span> <span class="token operator">></span> xiyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行在后台的进程，需要借助进程的 pid 来终止进程。如何查找到进程的 pid 呢？这就涉及到进程信息的查看。</p>
<h2 id="进程查看（ps）"><a href="#进程查看（ps）" class="headerlink" title="进程查看（ps）"></a>进程查看（ps）</h2><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>e</td>
<td>显示所有进程</td>
</tr>
<tr>
<td>f</td>
<td>搭配 e 使用，显示更全面的信息</td>
</tr>
<tr>
<td>a</td>
<td>显示终端的所有进程，包括其他用户的进程</td>
</tr>
<tr>
<td>u</td>
<td>默认显示当前用户的进程，也可指定用户，和 a 组合在一起会显示所有进程的用户名</td>
</tr>
<tr>
<td>x</td>
<td>显示不在某个终端运行的进程，如 init 进程，TTY 为 ？</td>
</tr>
</tbody></table>
<p>常用查看进程的方式:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 利用运行进程使用的命令中的关键字查询出进程的 pid</span>
<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token operator">&lt;</span>keyword<span class="token operator">></span>

<span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token operator">&lt;</span>keyword<span class="token operator">></span>
<span class="token comment"># 查看当前用户运行的全部进程</span>
<span class="token function">ps</span> -ux <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 kill 命令来杀死进程</span>
<span class="token function">kill</span> -9 <span class="token operator">&lt;</span>pid<span class="token operator">></span>
<span class="token function">kill</span> -15 <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>9 和 15 这两个数字的含义可以在终端输入 htop，然后按 F9 查看，每个数字对应了一种发送给进程的信号。</p>
<ul>
<li>15 对应的是 SIGTERM，通知进程结束，不加参数时，如：kill pid 默认使用该信号终止进程。</li>
<li>9 对应的是 SIGKILL，强制终止进程。</li>
</ul>
<p>所以我们也可以在 htop 界面中发送相应的信号来结束进程。</p>
<img src="/2022/12/30/%E8%BF%9B%E7%A8%8B%E4%BB%8B%E7%BB%8D-ps/image-20221230210911614.png" class="" title="image-20221230210911614">

<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="杀掉包含关键字的所有程序（切记杀死进程前需要确认，防止误杀）"><a href="#杀掉包含关键字的所有程序（切记杀死进程前需要确认，防止误杀）" class="headerlink" title="杀掉包含关键字的所有程序（切记杀死进程前需要确认，防止误杀）"></a>杀掉包含关键字的所有程序（<strong>切记杀死进程前需要确认，防止误杀</strong>）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以进程信息中包含 jupyter 关键字为例</span>
<span class="token comment"># 杀死进程前，需确认列出的进程不包含不想杀死的进程，如果包含不想杀死的进程，可以使用 grep 增加筛选条件，直至输出的进程信息全部为你想要杀死的进程为止</span>
<span class="token function">ps</span> -ux
<span class="token function">ps</span> -ux <span class="token operator">|</span> <span class="token function">grep</span> jupyter
<span class="token function">ps</span> -ux <span class="token operator">|</span> <span class="token function">grep</span> jupyter <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> 
<span class="token function">ps</span> -ux <span class="token operator">|</span> <span class="token function">grep</span> jupyter <span class="token operator">|</span> gerp -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token operator">&lt;</span>keyword<span class="token operator">></span>

<span class="token comment"># 这条命令会杀死进程信息中包含 jupyter 关键字的进程</span>
<span class="token function">ps</span> -ux <span class="token operator">|</span> <span class="token function">grep</span> jupyter <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="查看进程时用户名显示不全"><a href="#查看进程时用户名显示不全" class="headerlink" title="查看进程时用户名显示不全"></a>查看进程时用户名显示不全</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -o <span class="token assign-left variable">ruser</span><span class="token operator">=</span>userForLongName -e -o pid,ppid,c,%cpu,%mem,stime,tty,time,cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>文件的权限和属性(chmod,chown)</title>
    <url>/2022/12/30/%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%92%8C%E5%B1%9E%E6%80%A7-chmod-chown/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=262822119&bvid=BV1aY411o75b&cid=895360256&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<span id="more"></span>



<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>linux 是个多用户系统，那么如何保证多个用户使用同一个系统不会导致混乱、互相干扰呢？这就需要说到 linux 系统中的 文件权限了。</p>
<p>文件的权限是如何组织的呢？首先我们需要了解文件和目录具有有读、写、执行的权限。可以分别对文件所有者，文件所有者所属组，其他用户划分不同的文件权限。</p>
<p>这里的组是用户组的意思，用户组中包含了一些用户，可对这些用户设置权限。</p>
<p>其他用户是指既不是文件所有者，也不在文件所属组中的用户。</p>
<pre class="mermaid">graph TB
A(文件权限) -.-> B(读, r, read)
A(文件权限) -.-> C(写, w, write)
A(文件权限) -.-> D(执行, x, excute)

E(权限划分) ==>F(文件所有者)
E(权限划分) ==>G("文件所属组（不包括文件所有者）")
E(权限划分) ==>H(其他用户)</pre>

<h2 id="使用-ls-l-查看文件的权限："><a href="#使用-ls-l-查看文件的权限：" class="headerlink" title="使用 ls -l 查看文件的权限："></a><strong>使用 ls -l 查看文件的权限：</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xiyou@xiyou:~$ <span class="built_in">ls</span> -l</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 xiyou xiyougroup 4096 Nov 16 21:36 xiyou</span><br><span class="line">-rw-r--r-- 1 xiyou xiyougroup   21 Nov 16 21:36 xiyou.txt</span><br><span class="line"><span class="comment"># 这里的第 1 个字符是表示文件类型 d,l,-</span></span><br><span class="line"><span class="comment"># 2-10 的字符以每3个一组，分别是文件所有者、文件所属组（不包括文件所有者）、其他用户的权限</span></span><br><span class="line"><span class="comment"># ”-“表示无该处的权限，r 表示读权限，w 表示写权限，x 表示执行权限。</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>文件类型+文件权限</th>
<th>文件引用数</th>
<th>文件所有者</th>
<th>文件所属组</th>
<th>文件大小（bit）</th>
<th>文件修改日期</th>
<th>文件名</th>
</tr>
</thead>
<tbody><tr>
<td>drwxr-xr-x</td>
<td>2</td>
<td>xiyou</td>
<td>xiyougroup</td>
<td>4096</td>
<td>Nov 16 21:36</td>
<td>xiyou</td>
</tr>
<tr>
<td>-rw-r–r–</td>
<td>1</td>
<td>xiyou</td>
<td>xiyougroup</td>
<td>21</td>
<td>Nov 16 21:36</td>
<td>xiyou.txt</td>
</tr>
</tbody></table>
<h2 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a><strong>环境准备：</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line">groupadd xiyougroup</span><br><span class="line"><span class="comment"># 创建用户，并把用户添加到用户组</span></span><br><span class="line">sudo useradd -m -d /home/xiyou -s /bin/bash -g xiyougroup xiyou</span><br><span class="line"><span class="comment"># 为 xiyou 用户设置密码为 xiyou</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;xiyou\nxiyou&quot;</span> | sudo passwd xiyou</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换当前用户为 xiyou，需要输入密码</span></span><br><span class="line">su xiyou </span><br><span class="line"><span class="comment"># 创建目录和文件用于命令演示</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> xiyou</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo hello, xiyouyun&quot;</span> &gt; xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="chmod-修改文件权限"><a href="#chmod-修改文件权限" class="headerlink" title="chmod 修改文件权限"></a>chmod 修改文件权限</h2><p>只能文件所有者或root用户才能更改文件的权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># u:user, g:group, o:others, w:write, r:read, x:excute</span></span><br><span class="line"><span class="built_in">chmod</span> u-x xiyou.txt</span><br><span class="line"><span class="built_in">chmod</span> u+w xiyou.txt</span><br><span class="line"><span class="built_in">chmod</span> ug+r xiyou.txt</span><br><span class="line"><span class="built_in">chmod</span> g+x,u-x xiyou.txt</span><br><span class="line"><span class="built_in">chmod</span> o+x xiyou.txt</span><br><span class="line"><span class="comment"># 使用 R 参数，对目录以及目录下的所有文件进行权限变更</span></span><br><span class="line"><span class="built_in">chmod</span> -R u+x xiyou</span><br><span class="line">bash xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="chown：变更文件所有者或文件所属组"><a href="#chown：变更文件所有者或文件所属组" class="headerlink" title="chown：变更文件所有者或文件所属组"></a>chown：变更文件所有者或文件所属组</h2><p>只有 root 用户才能变更文件所有者，非root用户只能变更文件所属组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件的所有者设置为 root 用户</span></span><br><span class="line"><span class="built_in">chown</span> root xiyou.txt</span><br><span class="line"><span class="comment"># 将文件的所有者设置为 root 用户，将文件所属组设置为 xiyougroup</span></span><br><span class="line"><span class="built_in">chown</span> root:xiyougroup xiyou.txt</span><br><span class="line"><span class="comment"># 为目录和目录下的所有文件设置所有者和所属组</span></span><br><span class="line"><span class="built_in">chown</span> -R root:xiyougroup xiyou</span><br></pre></td></tr></table></figure>



<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="使用数字来表示文件权限"><a href="#使用数字来表示文件权限" class="headerlink" title="使用数字来表示文件权限"></a>使用数字来表示文件权限</h2><pre class="mermaid">graph LR;
G(文件权限) -->H(文件所有者)
G(文件权限) -->I(除文件所有者的文件所属组用户)
G(文件权限) -->J(其他用户)

H(文件所有者) ==>K(读,read)
H(文件所有者) ==>L(写,write)
H(文件所有者) ==>M(执行,excute)

I(除文件所有者的文件所属组用户) -.->N(读,read)
I(除文件所有者的文件所属组用户) -.->O(写,write)
I(除文件所有者的文件所属组用户) -.->P(执行,excute)

J(其他用户) -->A(读,read)
J(其他用户) -->B(写,write)
J(其他用户) -->C(执行,excute)

A(读,read) -->D(4)
B(写,write) -->E(2)
C(执行,excute)-->F(1)

K(读,read) -->Q(4)
L(写,write) -->R(2)
M(执行,excute)-->S(1)

N(读,read) -->T(4)
O(写,write) -->U(2)
P(执行,excute)-->V(1)</pre>

<h2 id="这可以应用在-chmod-命令中"><a href="#这可以应用在-chmod-命令中" class="headerlink" title="这可以应用在 chmod 命令中:"></a>这可以应用在 chmod 命令中:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 xiyou.txt</span><br><span class="line"><span class="built_in">chmod</span> 755 xiyou.txt</span><br><span class="line"><span class="built_in">chmod</span> 666 xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="对于目录来说读、写、执行权限的意义。"><a href="#对于目录来说读、写、执行权限的意义。" class="headerlink" title="对于目录来说读、写、执行权限的意义。"></a>对于目录来说读、写、执行权限的意义。</h2><ul>
<li>读：能用 ls 看到目录中包含有哪些文件</li>
<li>写：能在目录下创建文件</li>
<li>执行：能用 cd 将工作目录切换到目录下，能够在目录中创建和删除文件</li>
</ul>
<h2 id="对于文件来说读、写、执行权限的意义。"><a href="#对于文件来说读、写、执行权限的意义。" class="headerlink" title="对于文件来说读、写、执行权限的意义。"></a>对于文件来说读、写、执行权限的意义。</h2><ul>
<li><p>读：能读取文件内容</p>
</li>
<li><p>写：能向文件中写入内容</p>
</li>
<li><p>执行：能用 ./xx 的方式执行文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> bash</span><br><span class="line"><span class="comment"># 查看文件的权限</span></span><br><span class="line"><span class="built_in">ls</span> -l /usr/bin/bash</span><br><span class="line"><span class="comment"># 借助 bash 来执行不具有可执行权限的文件</span></span><br><span class="line">bash xx.txt</span><br></pre></td></tr></table></figure>

</li>
</ul>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>移动和拷贝文件(mv,cp,ln)</title>
    <url>/2022/12/30/%E7%A7%BB%E5%8A%A8%E5%92%8C%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6-mv-cp-ln/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=987650109&bvid=BV1nt4y1N7aZ&cid=892727922&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="移动和拷贝文件的三个相关概念"><a href="#移动和拷贝文件的三个相关概念" class="headerlink" title="移动和拷贝文件的三个相关概念"></a>移动和拷贝文件的三个相关概念</h2><ol>
<li>拷贝：将文件或目录复制到另一个路径中；</li>
<li>移动：将文件或目录移动到另一个路径中；</li>
<li>链接：链接分为软链接和硬链接，软链接又被称为符号链接，软链接可以对文件和目录创建，硬链接只能对文件创建；软链接链接的是文件路径，硬链接链接的是文件内容。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录用于命令演示</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /tmp/xiyouyun</span><br><span class="line"><span class="comment"># 切换到 xiyouyun 目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> xiyou-1 xiyou-2</span><br><span class="line"><span class="built_in">touch</span> &#123;1..9&#125;.txt</span><br></pre></td></tr></table></figure>

<h2 id="cp：拷贝，软硬链接"><a href="#cp：拷贝，软硬链接" class="headerlink" title="cp：拷贝，软硬链接"></a>cp：拷贝，软硬链接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line"><span class="built_in">cp</span> 1.txt 1-copy.txt</span><br><span class="line"><span class="comment"># 拷贝目录</span></span><br><span class="line"><span class="built_in">cp</span> -r xiyou-1 xiyou-1-copy</span><br><span class="line"><span class="comment"># 软链接, 只能在当前目录对文件建立软链接，不能对目录建立软链接</span></span><br><span class="line"><span class="built_in">cp</span> -s 1.txt 1-symbollink.txt </span><br><span class="line"><span class="comment"># 硬链接，只能在当前目录建立硬链接</span></span><br><span class="line"><span class="built_in">cp</span> -l 1.txt 1-hardlink.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于区分软硬链接的不同</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; 1.txt</span><br><span class="line"> <span class="comment">## 可以通过软硬链接查看文件内容</span></span><br><span class="line"><span class="built_in">cat</span> 1-symbollink.txt </span><br><span class="line"><span class="built_in">cat</span> 1-hardlink.txt</span><br><span class="line"> <span class="comment">## 删除文件后，不能通过软链接查看文件内容</span></span><br><span class="line"><span class="built_in">rm</span> 1.txt</span><br><span class="line"><span class="built_in">cat</span> 1-symbollink.txt </span><br><span class="line"> <span class="comment">## 可以通过硬链接查看文件内容</span></span><br><span class="line"><span class="built_in">cat</span> 1-hardlink.txt</span><br></pre></td></tr></table></figure>

<h2 id="mv：移动文件"><a href="#mv：移动文件" class="headerlink" title="mv：移动文件"></a>mv：移动文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 1.txt 文件移动到 xiyou-1 目录中</span></span><br><span class="line"><span class="built_in">mv</span> 1.txt xiyou-1</span><br><span class="line"><span class="comment"># 移动文件时，可以在指定路径时指定移动后的文件名，这里移动后文件名变为 22.txt</span></span><br><span class="line"><span class="built_in">mv</span> 2.txt xiyou-2/22.txt</span><br><span class="line"><span class="comment"># 将 xiyou-1/1.txt 移动到当前目录</span></span><br><span class="line"><span class="built_in">mv</span> xiyou-1/1.txt .</span><br><span class="line"><span class="comment"># 移动目录</span></span><br><span class="line"><span class="built_in">mv</span> xiyou-1 xiyou-2</span><br><span class="line"><span class="comment"># 使用 mv 对单个文件重命名</span></span><br><span class="line"><span class="built_in">mv</span> 1.txt 11.txt</span><br></pre></td></tr></table></figure>

<h2 id="ln：软硬链接"><a href="#ln：软硬链接" class="headerlink" title="ln：软硬链接"></a>ln：软硬链接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 软链接，建立的软链接可不保存在当前目录</span></span><br><span class="line"><span class="built_in">ln</span> -s 3.txt xiyou-2/3-simbollink.txt</span><br><span class="line"><span class="comment"># 硬链接，建立的硬链接可不保存在当前目录</span></span><br><span class="line"><span class="built_in">ln</span> 3.txt xiyou-2/3-hardlink.txt</span><br></pre></td></tr></table></figure>

<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="如何判断一个文件是软链接"><a href="#如何判断一个文件是软链接" class="headerlink" title="如何判断一个文件是软链接?"></a>如何判断一个文件是软链接?</h2><p>（看箭头，看 ls -l 的输出）判断文件是否是软链接</p>
<img src="/2022/12/30/%E7%A7%BB%E5%8A%A8%E5%92%8C%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6-mv-cp-ln/0ac50948480041c7919f97cd87c9469b.png" class="" title="请添加图片描述">

<h2 id="如何判断一个文件是否存在硬链接？"><a href="#如何判断一个文件是否存在硬链接？" class="headerlink" title="如何判断一个文件是否存在硬链接？"></a>如何判断一个文件是否存在硬链接？</h2><p>(看引用数，看 ls -l 的信息) 判断文件是否存在硬链接</p>
   <img src="/2022/12/30/%E7%A7%BB%E5%8A%A8%E5%92%8C%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6-mv-cp-ln/6eb734f8e28e4d4aaf1ec0aacd8d5a2d.png" class="" title="请添加图片描述">

<h2 id="修改时备份"><a href="#修改时备份" class="headerlink" title="修改时备份"></a>修改时备份</h2><p>修改一个重要配置文件时，一定要做拷贝备份！这样出错时可以恢复文件到未修改的状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xiyou#……&amp;*￥#（&quot;</span> &gt; xiyou.txt</span><br><span class="line"><span class="comment"># 做拷贝备份</span></span><br><span class="line"><span class="built_in">cp</span> xiyou.txt xiyou.txt.bak</span><br><span class="line"><span class="comment"># 清空 1 个文件</span></span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; xiyou.txt</span><br><span class="line"><span class="built_in">cat</span> xiyou.txt</span><br><span class="line"><span class="comment"># 恢复被删除的文件</span></span><br><span class="line"><span class="built_in">mv</span> xiyou.txt.bak xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="mv可能会导致文件丢失"><a href="#mv可能会导致文件丢失" class="headerlink" title="mv可能会导致文件丢失"></a>mv可能会导致文件丢失</h2><p>mv 默认会覆盖目标路径下的同名文件, 这可能会导致文件信息丢失，因此使用 mv 移动文件时，要确保目标路径下没有同名文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xiyou#……&amp;*￥#（&quot;</span> &gt; xiyou.txt</span><br><span class="line"><span class="built_in">cat</span> xiyou.txt</span><br><span class="line"><span class="built_in">mv</span> 3.txt xiyou.txt</span><br><span class="line"><span class="built_in">cat</span> xiyou.txt</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>压缩文件(tar,zip,7z,rar,gzip,bzip2)</title>
    <url>/2022/12/30/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6-tar-zip-7z-rar-gzip-bzip2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=520131164&bvid=BV11M411k7mA&cid=891610656&page=1"style="width:100%;height:500px;min-width:375px;min-height:200px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p><strong>打包</strong>是将一个或多个文件的数据信息收集到1个文件中<br><strong>压缩</strong>是使用另一种数据格式存储文件，使得压缩后的文件占用存储空间更小。<br><strong>解压缩</strong>是从压缩后的文件中还原被压缩的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件和目录用于练习压缩与解压缩</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /tmp/xiyouyun</span><br><span class="line"><span class="built_in">touch</span> &#123;1..9&#125;.txt</span><br><span class="line"><span class="built_in">mkdir</span> &#123;1..9&#125;</span><br></pre></td></tr></table></figure>

<h2 id="tar用于压缩文件和目录，保留压缩前的文件"><a href="#tar用于压缩文件和目录，保留压缩前的文件" class="headerlink" title="tar用于压缩文件和目录，保留压缩前的文件"></a>tar用于压缩文件和目录，保留压缩前的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅打包文件，但并不压缩 create an archive</span></span><br><span class="line">tar -cf xiyou.tar 1 1.txt</span><br><span class="line"><span class="comment"># 从打包文件中提取出文件, extract from an archive</span></span><br><span class="line">tar -xf xiyou.tar</span><br><span class="line"><span class="comment"># 打包文件，并通过 gzip 对文件进行压缩，v 参数用于在压缩时显示详情，z 指定压缩工具为 gzip</span></span><br><span class="line">tar -czvf xiyou.tar.gz 1 1.txt</span><br><span class="line"><span class="comment"># 解压文件到 xiyou 目录，该目录需要提前创建</span></span><br><span class="line"><span class="built_in">mkdir</span> xiyou</span><br><span class="line">tar -xzvf xiyou.tar.gz -C xiyou</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 bzip2 的方式进行压缩与解压缩</span></span><br><span class="line">tar -cjvf xiyou.tar.bz2 1 1.txt</span><br><span class="line">tar -xjvf xiyou.tar.bz2 -C xiyou</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不解压文件，只查看压缩包中的内容</span></span><br><span class="line">tar -tf xiyou.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="zip-unzip：可用于压缩文件和目录，保留压缩前的文件"><a href="#zip-unzip：可用于压缩文件和目录，保留压缩前的文件" class="headerlink" title="zip/unzip：可用于压缩文件和目录，保留压缩前的文件"></a>zip/unzip：可用于压缩文件和目录，保留压缩前的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩目录时要添加 -r 参数，这样才能将目录下的所有文件添加到压缩包中</span></span><br><span class="line">zip -r xiyou2.zip 2 2.txt</span><br><span class="line"><span class="comment"># 将文件解压缩到目录中, 目录会自动被创建</span></span><br><span class="line">unzip -d xiyou2 xiyou2.zip</span><br><span class="line"><span class="comment"># 不解压文件，仅查看压缩文件中的文件信息</span></span><br><span class="line">unzip -l xiyou2.zip</span><br></pre></td></tr></table></figure>

<h2 id="7z：开源免费，支持压缩文件和目录"><a href="#7z：开源免费，支持压缩文件和目录" class="headerlink" title="7z：开源免费，支持压缩文件和目录"></a>7z：开源免费，支持压缩文件和目录</h2><p><strong>sudo apt install p7zip-full</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩，r 表示递归操作目录下的所有子文件</span></span><br><span class="line">7za a -r xiyouyun.7z /tmp/xiyouyun/*</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">7za x -r xiyouyun.7z</span><br></pre></td></tr></table></figure>

<h2 id="rar：winrar在Linux中的替代品"><a href="#rar：winrar在Linux中的替代品" class="headerlink" title="rar：winrar在Linux中的替代品"></a>rar：winrar在Linux中的替代品</h2><p>使用 <strong>sudo apt install rar unrar</strong> 安装软件，rar 默认收费，且不支持 linux，这里使用的是第三方开发的 linux 包，使用第3方软件可能会有未知的错误（可能性极小），详情可查看 <a href="https://www.rarlab.com/rar_add.htm">rar官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将当前目录下的所有文件名以 txt 结尾的文件压缩到 all.rar 中</span></span><br><span class="line">rar a all *.txt</span><br><span class="line"><span class="comment"># 解压 rar 文件</span></span><br><span class="line">unrar e all.rar</span><br></pre></td></tr></table></figure>

<h2 id="bzip2只能压缩文件，不能压缩目录"><a href="#bzip2只能压缩文件，不能压缩目录" class="headerlink" title="bzip2只能压缩文件，不能压缩目录"></a>bzip2只能压缩文件，不能压缩目录</h2><p>bzip2不保留压缩前的文件，文件压缩后被保存为xx.bz2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件压缩为 2.txt.bz2，原文件将会消失</span></span><br><span class="line">bzip2 2.txt</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">bzip2 -d 2.txt.bz2</span><br></pre></td></tr></table></figure>

<h2 id="gzip只能压缩文件，不能压缩目录"><a href="#gzip只能压缩文件，不能压缩目录" class="headerlink" title="gzip只能压缩文件，不能压缩目录,"></a>gzip只能压缩文件，不能压缩目录,</h2><p>gzip不保留压缩前的文件，文件压缩后被保存为 xx.gz</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">gzip 3.txt</span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">gzip -d 3.txt.gz</span><br></pre></td></tr></table></figure>

<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="解压缩注意事项："><a href="#解压缩注意事项：" class="headerlink" title="解压缩注意事项："></a><strong>解压缩注意事项：</strong></h2><p>在使用 tar 解压文件时，本地如果存在和压缩包中同名的文件，会直接被覆盖不会有任何提示，因此建议使用 tar 解压时指定一个空目录，将文件解压缩到空目录中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> xiyou</span><br><span class="line">tar -xzvf xiyou.tar.gz -C xiyou</span><br></pre></td></tr></table></figure>
<h2 id="分卷压缩："><a href="#分卷压缩：" class="headerlink" title="分卷压缩："></a><strong>分卷压缩：</strong></h2><p>在很多应用场景中都存在数据大小的限制，如：“单次上传文件大小不能超过1GB”。这个时候就可以用到分卷压缩了。它可以将 1 个大文件压缩并按照规定大小划分成多卷，如将10GB的文件压缩后划分为10卷，每卷1GB，之后也能通过命令将10个卷重新组合成1个大文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个命令会向 xiyou.txt 文件写入 1000000 行数据, 大约 22MB</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000000&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> hello xiyouyun &quot;</span> &gt;&gt; xiyou.txt; <span class="keyword">done</span>;</span><br><span class="line"><span class="built_in">du</span> -sh xiyou.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分卷压缩，每卷为1MB</span></span><br><span class="line">tar zcf - xiyou.txt |<span class="built_in">split</span> -d -b 1m - xiyou.tar.gz</span><br><span class="line"><span class="comment"># 分卷解压缩，因为压缩是使用的是 gzip，所以解压时也用 gzip</span></span><br><span class="line"><span class="comment"># 这里先删除xiyou.txt 文件，测试解压缩后是否能够还原 xiyou.txt</span></span><br><span class="line"><span class="built_in">rm</span> xiyou.txt</span><br><span class="line"><span class="built_in">cat</span> xiyou.tar.gz0* | tar zx</span><br><span class="line"><span class="built_in">tail</span> xiyou.txt</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>传输文件(scp,ftp,wget,curl)</title>
    <url>/2022/12/30/%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6-scp-ftp-wget-curl/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=517525445&bvid=BV1Ug411i72Z&cid=890693727&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="scp用于在能够联通的不同的主机下传输文件"><a href="#scp用于在能够联通的不同的主机下传输文件" class="headerlink" title="scp用于在能够联通的不同的主机下传输文件"></a>scp用于在能够联通的不同的主机下传输文件</h2><p>scp 与 cp 的区别是，cp 用于在 linux 本机下拷贝文件到其他路径。</p>
<p>scp 的原理其实是使用 ssh 协议登陆到 linux 服务器，然后传输文件</p>
<p>ssh 协议可以使用用户名和密码登陆Linux，也可以使用用户名和密钥来登陆。</p>
<p><strong>以下的 user，host，port，xx.pem都需要代入具体的值</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@host -p port <span class="token punctuation">(</span>需要输入密码<span class="token punctuation">)</span>
<span class="token function">ssh</span> user@host -p port -i xx.pem （使用密钥进行认证）
<span class="token comment"># 使用 scp 拷贝文件时使用的命令与 ssh 是类似的。</span>
<span class="token function">scp</span> -P port user@host:/tmp/xiyou.txt <span class="token builtin class-name">.</span> <span class="token punctuation">(</span>将远程主机的 /tmp/xiyou.txt 文件拷贝到本机的当前工作目录，这里<span class="token string">"."</span>表示当前目录，需要输入密码<span class="token punctuation">)</span>
<span class="token function">scp</span> -r -P port user@host:/tmp/ <span class="token builtin class-name">.</span> <span class="token punctuation">(</span>复制远程主机上的目录到本机的当前工作目录<span class="token punctuation">)</span> 
	    
<span class="token function">scp</span> -i xx.pem -P port user@host:/tmp/xiyou.txt <span class="token builtin class-name">.</span> <span class="token punctuation">(</span>使用秘钥 xx.pem 的方式认证，不需要输入密码，秘钥需要提前生成<span class="token punctuation">)</span>
<span class="token comment"># 将本地的文件拷贝到远程主机上：</span>
<span class="token function">scp</span> -P port user@host:/tmp xiyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>​        </p>
<h2 id="ftp用于从文件服务器上下载文件"><a href="#ftp用于从文件服务器上下载文件" class="headerlink" title="ftp用于从文件服务器上下载文件"></a>ftp用于从文件服务器上下载文件</h2><p>首先要有一台 ftp 服务器，然后你要有这台 ftp 服务器的账号和密码。登陆后你可以使用 cd，ls，pwd 三个基础命令查看系统中文件的位置，使用 get 从 ftp 服务器获取文件，使用 put 将文件上传到 ftp 服务器。使用 quit 退出登陆。出现“500 Illegal PORT command”的报错可以通过输入 passive 来解决报错。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ftp</span> x.x.x.x
<span class="token builtin class-name">cd</span>
<span class="token function">ls</span>
<span class="token builtin class-name">pwd</span>
get 
put
quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://wangchujiang.com/linux-command/c/ftp.html">https://wangchujiang.com/linux-command/c/ftp.html</a> </p>
<h2 id="wget用于从网络中下载文件"><a href="#wget用于从网络中下载文件" class="headerlink" title="wget用于从网络中下载文件"></a>wget用于从网络中下载文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载链接中的图片 https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small-dark.png 并存储为 tuna.png</span>
<span class="token function">wget</span> -O tuna.png <span class="token string">"https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small-dark.png"</span>
<span class="token function">ls</span> -la <span class="token operator">|</span> <span class="token function">grep</span> tuna.png
<span class="token comment"># 下载一个文件，不指定文件名</span>
<span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/gpg
<span class="token function">ls</span> -la <span class="token operator">|</span> <span class="token function">grep</span> gpg
<span class="token comment"># 查看 wget 其他参数的使用方法</span>
<span class="token function">wget</span> --help
<span class="token comment"># -c 参数支持断点续传，这在传输大文件时十分有用</span>
<span class="token function">wget</span> -c -O tuna2.png https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small-dark.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="curl通常用来在终端中模拟浏览器访问网站"><a href="#curl通常用来在终端中模拟浏览器访问网站" class="headerlink" title="curl通常用来在终端中模拟浏览器访问网站"></a>curl通常用来在终端中模拟浏览器访问网站</h2><p>curl 也可以用来下载文件，不过使用体验不如 wget。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 curl 下载链接中的文件，并保存为 tuna3.png</span>
<span class="token function">curl</span> -o tuna3.png https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small-dark.png
<span class="token comment"># 查看 curl 的其他用法</span>
<span class="token function">curl</span> --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h2><p>参考链接：<a href="https://www.ruanyifeng.com/blog/2020/08/rsync.html">https://www.ruanyifeng.com/blog/2020/08/rsync.html</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 2234 端口，将本地的 source 目录拷贝到远程机的 /destination 目录</span>
<span class="token function">rsync</span> -av -e <span class="token string">'ssh -p 2234'</span> source/ user@remote_host:/destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="补充内容："><a href="#补充内容：" class="headerlink" title="补充内容："></a>补充内容：</h2><h3 id="mwget"><a href="#mwget" class="headerlink" title="mwget"></a>mwget</h3><p>mwget 是 wget 的升级版，支持多线程，下载速度更快。安装方式如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装编译依赖</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential -y
<span class="token function">sudo</span> <span class="token function">apt</span> upgrade intltool -y
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span>  libssl-dev -y

<span class="token comment"># 编译</span>
<span class="token function">git</span> clone https://github.com/rayylee/mwget.git
<span class="token builtin class-name">cd</span> mwget
./configure
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>

<span class="token comment"># 查看使用方法</span>
mwget --help

mwget https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上文中提到的 ftp 和 scp 在远程传输，我们可以借助工具来实现，如 finalshell，xshell,putty,secretCRT……等工具来实现文件的上传和下载。</p>
<p>这里推荐finalshell，因为它支持 win、mac、linux。官网：<a href="https://www.hostbuf.com/">https://www.hostbuf.com/</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>查找文件(find,ls,locate,whereis,which)</title>
    <url>/2022/12/30/%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6-find-ls-locate-whereis-which/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=220016762&bvid=BV1M841187rx&cid=889543162&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<span id="more"></span>

<blockquote>
<p>针对 ubuntu20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="文件的属性"><a href="#文件的属性" class="headerlink" title="文件的属性"></a>文件的属性</h2><p>文件的属性有：文件的大小（size），文件的名称（name），文件的类型（type），文件的路径（path），文件的修改日期（modify_time）……我们可以根据文件的属性，在系统中查找符合筛选条件的文件。</p>
<h2 id="ls-列出指定路径下的文件信息"><a href="#ls-列出指定路径下的文件信息" class="headerlink" title="ls 列出指定路径下的文件信息"></a>ls 列出指定路径下的文件信息</h2><p>ls 配合 grep 可以通过文件名筛选文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 筛选路径 /etc/apt 目录下文件名中包含 list 的文件，这里的 “| grep list” 的原理可以先不管 </span></span><br><span class="line"><span class="built_in">ls</span> /etc/apt | grep list</span><br></pre></td></tr></table></figure>

<h2 id="find-可以对文件的属性进行筛选"><a href="#find-可以对文件的属性进行筛选" class="headerlink" title="find 可以对文件的属性进行筛选"></a>find 可以对文件的属性进行筛选</h2><p>find 命令可以对几乎所有的文件属性进行筛选，<strong>在 linux 系统中 * 可以匹配路径中的任意字符</strong><br>这里只列举几个常用的例子，更多的文件属性筛选可以查看文档：<a href="https://wangchujiang.com/linux-command/c/find.html">https://wangchujiang.com/linux-command/c/find.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出 /tmp 目录下的所有文件和目录</span></span><br><span class="line">find /tmp</span><br><span class="line"><span class="comment"># 列出 /etc/apt 目录下文件或目录名以 list 或 d 结尾的文件</span></span><br><span class="line">find /etc/apt <span class="string">&quot;*.list -o *.d&quot;</span></span><br><span class="line"><span class="comment"># 在前一条命令的基础上筛选文件类型为“文件”的</span></span><br><span class="line">find /etc/apt <span class="string">&quot;*.list -o *.d&quot;</span> -<span class="built_in">type</span> f</span><br><span class="line"><span class="comment"># 筛选文件类型为“目录”</span></span><br><span class="line">find /etc/apt <span class="string">&quot;*.list -o *.d&quot;</span> -<span class="built_in">type</span> d</span><br><span class="line"><span class="comment"># 默认会搜索路径下的所有子目录，通过 maxdepth 可以让它只搜索当前搜索到第 1 层子目录就不再继续往下搜索了</span></span><br><span class="line">find /etc/apt <span class="string">&quot;*.list -o *.d&quot;</span> -maxdepth 1 -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure>

<h2 id="locate-查找系统中的文件"><a href="#locate-查找系统中的文件" class="headerlink" title="locate 查找系统中的文件"></a>locate 查找系统中的文件</h2><p>locate 命令来自于 mlocate 软件，需要使用命令 <code>apt install mlocate</code>安装，其用于<strong>快速</strong>定位软件的位置，支持正则表达式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到系统中 python 文件的位置</span></span><br><span class="line">locate *.py</span><br><span class="line"><span class="comment"># 列出系统中所有的文件名以 .R 结尾的文件</span></span><br><span class="line">locate *.R</span><br></pre></td></tr></table></figure>

<h2 id="whereis-定位系统中二进制文件的位置"><a href="#whereis-定位系统中二进制文件的位置" class="headerlink" title="whereis 定位系统中二进制文件的位置"></a>whereis 定位系统中二进制文件的位置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定位系统 R 可执行程序的位置</span></span><br><span class="line">whereis R</span><br><span class="line"><span class="comment"># 定位系统中 python 可执行程序的位置</span></span><br><span class="line">whereis python</span><br></pre></td></tr></table></figure>

<h2 id="which-查找命令的绝对路径"><a href="#which-查找命令的绝对路径" class="headerlink" title="which 查找命令的绝对路径"></a>which 查找命令的绝对路径</h2><p>这在系统中安装了多个版本的软件时十分实用。如在 conda 环境中通常安装了多个 python 环境，可以使用这种方式定位到当前使用 python 命令使用的是哪个路径下的 python。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看执行 python 命令时，使用的是哪个路径下的程序</span></span><br><span class="line"><span class="built_in">which</span> python</span><br><span class="line"><span class="comment"># 查看执行 R 命令时，使用的是哪个路径下的程序</span></span><br><span class="line"><span class="built_in">which</span> R</span><br></pre></td></tr></table></figure>

<h2 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h2><h3 id="find-常用操作"><a href="#find-常用操作" class="headerlink" title="find 常用操作"></a>find 常用操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除修改时间超过 1 天的文件（保留最近 24 小时的文件）</span></span><br><span class="line">find . -<span class="built_in">type</span> f -mtime 1 -<span class="built_in">exec</span>  <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选当前目录下大于 10MB 的文件</span></span><br><span class="line">find . -size +10M</span><br><span class="line"></span><br><span class="line"><span class="comment"># find 查找目录时跳过 tmp 目录</span></span><br><span class="line">find . -path <span class="string">&quot;/tmp&quot;</span> -prune -o -<span class="built_in">type</span> f -name *.bam -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>查看文件(cat,head,tail,less,more)</title>
    <url>/2022/12/30/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6-cat-head-tail-less-more/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=690104074&bvid=BV1k24y127zf&cid=888455696&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<blockquote>
<p>针对 ubuntu20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>查看一个文件内容的方式是命令 + 文件路径<br>这里先构建 1 个文件，方便后面命令演示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/xiyouyun</span><br><span class="line"><span class="comment"># 这样可以少打几个字符，这里的 $_ 等价于 /tmp/xiyouyun</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line"><span class="comment"># 向文件中写入内容, 以下命令会向文件中写入 1000 行 hello,xiyouyun</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> hello xiyouyun &quot;</span> &gt;&gt; xiyou.txt; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 cat 查看文件的全部内容</span></span><br><span class="line"><span class="built_in">cat</span> xiyou.txt</span><br><span class="line"><span class="comment"># 查看文件时显示行号</span></span><br><span class="line"><span class="built_in">cat</span> -b xiyou.txt</span><br><span class="line"><span class="comment"># 查看文件时显示隐藏字符</span></span><br><span class="line"><span class="built_in">cat</span> -A xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从文件的开始部分查看文件内容，默认 10 行</span></span><br><span class="line"><span class="built_in">head</span> xiyou.txt</span><br><span class="line"><span class="comment"># 查看文件的前 10 行</span></span><br><span class="line"><span class="built_in">head</span> -n 10 xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从文件的尾部查看文件内容，默认 10 行</span></span><br><span class="line"><span class="built_in">tail</span> xiyou.txt</span><br><span class="line"><span class="comment"># 查看文件的后 10 行</span></span><br><span class="line"><span class="built_in">tail</span> -n 10 xiyou.txt</span><br><span class="line"><span class="comment"># 向 ping.txt 中持续写入内容，可以暂时不管这条命令的含义</span></span><br><span class="line">ping g.cn &gt; ping.txt &amp;</span><br><span class="line"><span class="comment"># 查看文件的尾部，如果文件内容持续增长，则会动态刷新显示</span></span><br><span class="line"><span class="built_in">tail</span> -f ping.txt</span><br></pre></td></tr></table></figure>

<h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 less 查看文件的头部部分，按 Enter 滚动查看后面的行, 按 q 退出查看，按空格支持翻页</span></span><br><span class="line"><span class="comment"># 使用方向键支持上下滚动查看，使用 ?text 支持在当前页搜索</span></span><br><span class="line">less xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 more 查看文件的头部部分，more 只支持向下滚动，不能上下滚动，按 q 退出查看</span></span><br><span class="line">more xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="补充内容："><a href="#补充内容：" class="headerlink" title="补充内容："></a>补充内容：</h2><h3 id="如何快速清空-1-个文件？"><a href="#如何快速清空-1-个文件？" class="headerlink" title="如何快速清空 1 个文件？"></a><strong>如何快速清空 1 个文件？</strong></h3><h4 id="使用重定向"><a href="#使用重定向" class="headerlink" title="使用重定向"></a>使用重定向</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向文件中写入内容, 以下命令会向文件中写入 1000 行 hello,xiyouyun</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> hello xiyouyun &quot;</span> &gt;&gt; xiyou.txt; <span class="keyword">done</span>;</span><br><span class="line"><span class="comment"># 清空一个文件</span></span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; xiyou.txt</span><br></pre></td></tr></table></figure>

<h4 id="使用-vim"><a href="#使用-vim" class="headerlink" title="使用 vim"></a>使用 vim</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向文件中写入内容, 以下命令会向文件中写入 1000 行 hello,xiyouyun</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> hello xiyouyun &quot;</span> &gt;&gt; xiyou.txt; <span class="keyword">done</span>;</span><br><span class="line"><span class="comment"># 进入 vim 的命令模式，清空 1 个文件分为 3 步：</span></span><br><span class="line">	<span class="comment"># 1. 使用 gg 将光标跳转到文件的第 1 行</span></span><br><span class="line">	<span class="comment"># 2. 使用 d + Shift + g 清空整个文件</span></span><br><span class="line">	<span class="comment"># 3. 使用 Shift + z + z 保存文件</span></span><br><span class="line">vim xiyou.txt</span><br></pre></td></tr></table></figure>

<h3 id="如何查看隐藏字符？"><a href="#如何查看隐藏字符？" class="headerlink" title="如何查看隐藏字符？"></a><strong>如何查看隐藏字符？</strong></h3><p>你想要编写一个 bash 脚本（一种能在 linux 系统上执行的程序），但你不会使用 linux 上的编辑器（nano 和 vim），所以你在你自己的 windows 电脑上编辑好后，将文件上传到 linux 上。却发现脚本并不能执行，这是因为在 windows 中使用的换行符和 linux 中使用的换行符是不同的，但是使用 <code>cat &lt;filename&gt;</code> 是看不出隐藏的换行符的。此时需要使用 <code>cat -A &lt;filename&gt;</code> 查看。如果你想让 windows 上编写的 bash 脚本能够在 linux 上执行怎么办呢？有两种办法:</p>
<ol>
<li><p>不要将在 win 上编写的脚本文件上传到 linux，而是复制文件的内容到 linux 的文件中。通常可以用Ctrl + Shift + v 在 linux 中粘贴内容。</p>
</li>
<li><p>将文件上传到 linux 后，借助工具 dos2unix 将文件的格式转化为 linux 使用的格式</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个工具需要使用 apt install dos2unix 安装</span></span><br><span class="line"><span class="comment"># 假设有个 windows 换行格式的文件名为 xiyou.txt，你可以用以下命令将其转化为 linux 换行格式</span></span><br><span class="line"><span class="built_in">cat</span> -A xiyou.txt</span><br><span class="line">dos2unix xiyou.txt</span><br><span class="line"><span class="comment"># 通过查看文件中的隐藏字符对比两个文件有何变化</span></span><br><span class="line"><span class="built_in">cat</span> -A xiyou.txt</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑文件(vim,nano)</title>
    <url>/2022/12/30/%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6-vim-nano/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=474968672&bvid=BV1AK411U73x&cid=887434972&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>针对 ubuntu20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>使用 nano 或 vim 编辑一个文件时，都是使用命令加文件的绝对路径或相对路径。如果该路径对应的文件不存在，写入内容后，文件会自动创建。<br>为了方便演示，这里我在 /tmp 目录下创建 xiyouyun 目录作为工作目录, 之后的命令在 <code>/tmp/xiyouyun</code>工作目录下执行。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /tmp/xiyouyun
<span class="token builtin class-name">cd</span> /tmp/xiyouyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="简单编辑"><a href="#简单编辑" class="headerlink" title="简单编辑"></a>简单编辑</h2><h3 id="nano：nano-filepath"><a href="#nano：nano-filepath" class="headerlink" title="nano：nano [filepath]"></a>nano：nano [filepath]</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 nano 编辑一个文件</span>
<span class="token function">nano</span> /tmp/xiyouyun/nano.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果你只想用 nano 做简单的编辑，在编辑完文件后按 Ctrl + s 保存文件，然后按 Ctrl + x 退出编辑，编辑内容就被写入文件了。</p>
<img src="/2022/12/30/%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6-vim-nano/afa24840d5cd4fc4b2996c2fc8b9f9a9.gif" class="" title="请添加图片描述">

<h3 id="vim：vim-filepath"><a href="#vim：vim-filepath" class="headerlink" title="vim：vim [filepath]"></a>vim：vim [filepath]</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 vim 编辑一个文件</span>
<span class="token function">vim</span> /tmp/xiyouyun/vim.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果你只想用 vim 做简单编辑，你需要掌握它的<strong>3</strong>种工作模式。当使用命令进入 vim vim.txt 进入 vim 时，此时是<strong>命令模式</strong>，输入<kbd>i</kbd>进入 vim 的<strong>输入模式</strong>，此时可以编辑文件内容，编辑好内容后，按<kbd>Esc</kbd>回到命令模式，输入”:”进入到 vim 的<strong>编辑模式</strong>，此时可以对文件进行保存，如输入”:wq”后回车是对文件进行保存并退出。</p>
<pre class="mermaid">    graph TB
    A(命令模式) -->|a,i,o| B(输入模式)
    B(输入模式) -->|Esc| A(命令模式)
    A(命令模式) -->|输入:| C(编辑模式)
    C(编辑模式) -->|Esc或完成一次编辑| A(命令模式)</pre>
<img src="/2022/12/30/%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6-vim-nano/a49e4934abac460a86cbef6611f54ebc.gif" class="" title="请添加图片描述">

<h2 id="复杂编辑"><a href="#复杂编辑" class="headerlink" title="复杂编辑"></a>复杂编辑</h2><h3 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h3><p>如果你想使用 nano 做一下复杂编辑，你需要掌握一些快捷键。<br>进入 nano 的编辑窗口后，使用 <kbd>Ctrl</kbd> + <kbd>G</kbd> 查看使用说明，在使用说明中首字母 “^” 表示<kbd>Ctrl</kbd>，首字母”M”可以用<kbd>Alt</kbd>、<kbd>Esc</kbd>、<kbd>Cmd</kbd>中的任意一个来实现，这里我使用<kbd>Alt</kbd>。<br><strong>常用的快捷键：</strong></p>
<blockquote>
<p>Ctrl + G 可以查看 nano 使用说明，使用<kbd>↓</kbd> 和 <kbd>↑</kbd>滚动查看使用说明，再按一次 Ctrl + G 退出使用说明。</p>
<p>Alt + # 显示行号，这里的 “#” 需要借助<kbd>Shift</kbd> 才能打出来。</p>
<p>Ctrl + _ 跳转到指定行，这里的“_”需要借助<kbd>Shift</kbd>才能打出来。</p>
<p>Ctrl + s 保存写入文件的内容</p>
<p>Ctrl + x 退出编辑模式，一般来说退出之前需要保存文件内容，也可不保存退出，这样文件更改就不会生效。</p>
<p>Alt + u 撤销上一次的更改</p>
<p>Alt + e 重做上一次撤销的更改</p>
<p>Ctrl + \ 替换文件中的内容</p>
<p>Ctrl + q 搜索文件中的内容</p>
<p>Ctrl + r 读取另一个文件中的内容，加载到当前编辑的文件中</p>
<p>Ctrl + a 将光标跳转到行首</p>
<p>Ctrl + e 将光标跳转到行尾</p>
<p>Ctrl + p 将光标跳转到上一行，也可以用<kbd>↑</kbd>代替</p>
<p>Ctrl + n 将光标跳转到下一行，也可用<kbd>↓</kbd>代替</p>
<p>Alt + \ 跳转到文件的第一行</p>
<p>Alt + / 跳转到文件的最后一行</p>
<p>Ctrl + y 跳转到上一页</p>
<p>Ctrl + v 跳转到下一页</p>
<p>Ctrl + t 剪切从当前位置到文件末尾的全部内容</p>
<p>Ctrl + 6 选择文本，此时移动光标就会选中部分文本</p>
<p>Alt + 6 复制选中的文本</p>
<p>Ctrl + k 剪切当前行</p>
<p>Ctrl + u 粘贴</p>
</blockquote>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>如果你想用 vim 做一些复杂编辑，你需要掌握它在<strong>命令模式</strong>下的一些快捷键，还需要掌握一些在编辑模式下的命令。</p>
<p><strong>vim 常用快捷键和命令：</strong></p>
<blockquote>
<p>命令模式：<br>    dd 删除当前行<br>    yy 复制当前行<br>    p / P 粘贴缓冲区中的内容（可以是复制或者剪切的内<br>    容）<br>    u 撤销更改<br>    Ctrl + r 重做撤销的更改<br>    gg 跳转到文件的第一行<br>    Shift + g 跳转到文件的最后一行<br>    d + Shift + g 删除从当前行到文件末尾的所有内容<br>    d + g + g 删除从当前行到文件开头的所有内容<br>    v 移动光标选中文本<br>    y 复制选中的文本<br>    “&gt;” 右移选中的文本<br>    “&lt;” 左移选中的文本<br>    d 剪切选中的文本<br>    i 进入到输入模式<br>    <number> + d + d 删除当前行后的 number 行，<br>    这里的 <number> 替换为想要删除的行数<br>    Shift + z + z 退出 vim，保存改动的内容<br>    Shift + z + q 退出 vim，不保存改动的内容<br>    ：进入到编辑模式<br>编辑模式：<br>    :set number 显示行号<br>    :wq 保存并退出<br>    :q 退出vim，只有当文件未做改动时才能成功退出<br>    :q! 退出 vim，并放弃所有的更改<br>    :r <filename> 在光标后读入另一个文件的内容，<br>    这里的<filename>替换为想要读入的文件名<br>    :w <filename> 文件内容另存为 filename，这里<br>    的<filename>替换为想要保存的文件名<br>    /<search_text> 从当前行往后搜索字符串，支持正<br>    则表达式，这里的<search_test>替换为想要搜索的字符<br>    串模式<br>    ?<search_test> 从当前行往前搜索字符串，支持正<br>    则表达式，这里的<search_test>替换为想要搜索的字<br>    符串模式<br>    以上两种搜索方式都可以用 n 移动到后一个匹配项，N<br>    移动到前一个匹配项<br>    %s/<match>/<replace> 检索第一个匹配的字符<br>    串，并将其替换为另一个字符串。这里的<match>替换为<br>    要搜索的字符串模式，<replace>替换为要替换的字符串<br>    %s/<match>/<replace>/g 检索所有匹配的字符<br>    串，并将所有匹配的字符串替换为另一个字符串。这里的<br>    <match>替换为要搜索的字符串模式，<replace> 替换<br>    为要替换的字符串<br>    %s/<match>/<replace>/g 检索所有匹配的字符串，<br>    并将所有匹配的字符串替换为另一个字符串，不过在替换每一个<br>    匹配的字符串时都会询问用户是否替换。这里的<match>替<br>    换为要搜索的字符串模式，<replace>替换为要替换的字符<br>    串<br>输入模式：<br>    输入模式无快捷键</p>
</blockquote>
<p>将以下内容写入到 ~/.vimrc 中，可以对 vim 进行设置，设置立即生效<br> vim ~/.vimrc</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示行号</span>
<span class="token builtin class-name">set</span> nu
<span class="token comment"># 复制粘贴时保持文件缩进格式</span>
<span class="token builtin class-name">set</span> <span class="token function">paste</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>删除文件(rm,rmdir)</title>
    <url>/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=559933357&bvid=BV1Se4y117LF&cid=886499421&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="rmdir-删除一个空目录"><a href="#rmdir-删除一个空目录" class="headerlink" title="rmdir 删除一个空目录"></a>rmdir 删除一个<strong>空目录</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /tmp 目录下创建一个名为 xiyouyun 的目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp </span><br><span class="line"><span class="built_in">mkdir</span> xiyouyun</span><br><span class="line"><span class="comment"># 将工作目录切换为 xiyouyun</span></span><br><span class="line"><span class="built_in">cd</span> xiyouyun</span><br><span class="line"><span class="comment"># 在 xiyouyun 目录下创建一个名为 to_delete 的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> to_delete</span><br><span class="line"><span class="comment"># 查看当前工作目录下的文件信息，确认 to_delete 目录是否被创建</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 删除 to_delete 目录</span></span><br><span class="line"><span class="built_in">rmdir</span> to_delete</span><br><span class="line"><span class="comment"># 查看当前目录下的文件信息，确认 to_delete 目录是否被删除</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 在当前工作目录下生成一个 xiyou.txt 的文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello, xiyouyun&quot;</span> &gt; xiyou.txt</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 此时 xiyouyun 目录下存在一个名为 xiyou.txt 的文件，不能被删除</span></span><br><span class="line"><span class="built_in">rmdir</span> /tmp/xiyouyun</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/66760ee238304567a8faaa25fc06113d.gif" class="" title="请添加图片描述">

<h2 id="rm-删除文件或目录"><a href="#rm-删除文件或目录" class="headerlink" title="rm 删除文件或目录"></a>rm 删除文件或目录</h2><p>支持<strong>正则表达式</strong>匹配待删除的文件或目录, <code>*</code> 在匹配文件路径时可以代表任意字符。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /tmp 目录下创建一个名为 xiyouyun 的目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp </span><br><span class="line"><span class="built_in">mkdir</span> xiyouyun</span><br><span class="line"><span class="comment"># 将工作目录切换为xiyouyun</span></span><br><span class="line"><span class="built_in">cd</span> xiyouyun</span><br><span class="line"><span class="comment"># 在 /tmp/xiyouyun 目录下创建 9 个文件，分别为 1.txt、2.txt …… 9.txt，可以暂时忽略这里的语法</span></span><br><span class="line"><span class="built_in">touch</span> &#123;1..9&#125;.txt</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 删除文件 1.txt</span></span><br><span class="line"><span class="built_in">rm</span> 1.txt</span><br><span class="line"><span class="comment"># 删除文件 9.txt, * 可以表示后面的 .txt, * 在表示路径时可以表示任意字符，因此这里的 9* 可以被解释为 9.txt</span></span><br><span class="line"><span class="built_in">rm</span> 9*</span><br><span class="line"><span class="comment"># 创建两个目录 father/son 此时在 father 目录下会创建一个名为 son 的子目录，因此创建后 father 目录不是空目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p father/son</span><br><span class="line"><span class="comment"># 查看目录层级结构，如果系统中不存在这个命令，可以借助 ls 查看当前工作目录下的文件，或者通过 apt install tree 安装这个软件。</span></span><br><span class="line">tree</span><br><span class="line"><span class="comment"># 删除 father 目录，以及 father 目录下面的所有文件</span></span><br><span class="line"><span class="comment"># 失败，rmdir 只能删除空目录</span></span><br><span class="line"><span class="built_in">rmdir</span> father </span><br><span class="line"><span class="comment"># rm 命令默认删除文件，使用 -r 参数可以删除目录，-i 参数会在删除目录前一一询问用户是否删除该的文件，输入 yes 并回车就会将对应的文件删除</span></span><br><span class="line"><span class="built_in">rm</span> -r -i father </span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># rm 的 -f 参数表示在删除文件时不用输入 yes 确认，强制删除。</span></span><br><span class="line"><span class="built_in">mkdir</span> -p father/son</span><br><span class="line"><span class="comment"># 这里的 -r 和 -f 可以连在一起写作 -rf，效果同分开写相同，下面这条命令会删除 father 目录和 father 目录下的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf father</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/a0d6499fd4d84ad3a97da2560780719a.gif" class="" title="请添加图片描述">

<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="区分文件和目录"><a href="#区分文件和目录" class="headerlink" title="区分文件和目录"></a>区分文件和目录</h3><p><code>mkdir</code> 能够创建目录，<code>touch</code> 能够创建文件，那么怎么区分文件或目录呢？</p>
<ul>
<li><p>使用 <code>ls</code> 输出当前工作目录下的文件信息时，会通过不同的颜色来区分目录和文件，但这种方式不一定总是可靠。因为光凭颜色只能看出有一种颜色表示目录，另一种颜色表示文件，不能看出哪一种颜色对应目录，哪一种颜色对应文件。</p>
</li>
<li><p>在 windows 中可以通过文件后缀（如：1.txt）来区分文件和目录，文件有后缀，目录没后缀，这在 linux 系统中也不可行。</p>
</li>
<li><p>这里介绍一种方法：使用 <code>ls -l</code> 以 list（列表）的形式列出当前工作目录下的所有文件信息，每个文件或目录对应一行，看每一行的第 1 个字符就可以判断对应的文件信息是目录还是文件了。第 1 个字符为 <code>d</code> 的行表示该行对应的文件类型为目录，第 1 个字符为<code>-</code>的行表示该行对应的文件类型为文件。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 xiyouyun 目录，如果 /tmp/xiyoyun 目录存在，不做操作</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /tmp/xiyouyun</span><br><span class="line"><span class="built_in">cd</span> /tmp/xiyouyun</span><br><span class="line"><span class="comment"># 创建 1 个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> directory</span><br><span class="line"><span class="comment"># 创建一个名为 file 的文件，文件名不带后缀</span></span><br><span class="line"><span class="built_in">touch</span> file</span><br><span class="line"><span class="built_in">ls</span> -l</span><br></pre></td></tr></table></figure>
  <img src="/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/f91c9d36a4254f928bb367c8635a1b49.png" class="" title="在这里插入图片描述">
  <img src="/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/8dd46bbd1fec48c984fde6ae5ece2ed7.gif" class="" title="请添加图片描述"></li>
</ul>
<h3 id="删除文件的最佳实践"><a href="#删除文件的最佳实践" class="headerlink" title="删除文件的最佳实践"></a><strong>删除文件的最佳实践</strong></h3><p>我们之前说到 rmdir 和鸡肋，只能用来删除空目录，这是一种非常保守的做法。但 rm -rf 的时候会直接删除文件而无法找回，这是不是又有点激进呢？</p>
<p>在使用图形化界面的电脑中，有一个“回收站（trash）”的概念，我们删除文件后，文件会被放入到”回收站“中，并不会立即被删除。此时文件还可以从”回收站“中恢复，只有在做完“清空回收站“后，文件才会被真正删除。而在终端中，你使用 rm 删掉一个文件后就无法恢复了，文件不会被放入回收站。</p>
<p>这对初学者并不友好，慎重使用 rm 这个命令是需要刻意训练的。因为在图形化界面中删除一个文件后可以在想要使用这个文件时将它从 trash 中恢复，这会让人们在做出删除操作时很草率，这可能导致误删文件之后后悔莫及。</p>
<p>这里我给大家介绍一个新命令：mv（move），它有两个参数 mv [source_path] [target_path]，第 1 个参数是想要删除的文件或目录的路径，第 2 个参数是 trash 的路径，trash 是一个目录。文件或目录会被移动到 trash 目录中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在家目录下创建 trash，之前的文章有说到，在路径中 ~ 可以表示家目录</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/trash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 9 个文件</span></span><br><span class="line"><span class="built_in">touch</span> xiyou&#123;1..9&#125;.txt</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将刚刚的 9 个文件放入 trash, 上文的内容有说到，在路径中的 * 可以表示任意字符</span></span><br><span class="line"><span class="built_in">mv</span> xiyou*.txt ~/trash</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将xiyou9.txt文件从 trash 中恢复到当前目录中, 之前的文章有说到，在路径中 . 可以代表当前的工作目录</span></span><br><span class="line"><span class="built_in">mv</span> ~/trash/xiyou9.txt .</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p><strong>为了避免“回收站”占用空间过大，记得使用 rm 命令定期删除其中不再需要的文件哦~</strong></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>创建文件(touch,mkdir,vim,重定向)</title>
    <url>/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=689969785&bvid=BV1c24y127Nq&cid=886497148&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p><code>cd /tmp</code> (我们首先将工作目录切换到这个目录，之后所有的命令都在这个工作目录下执行)</p>
<p><code>mkdir xiyouyun</code> (创建一个目录，目录的名称为 xiyouyun，它的路径为 /tmp/xiyouyun)</p>
<p><code>cd xiyouyun</code> (切换工作目录的路径到 /tmp/xiyouyun，使用 xiyouyun 而不是 /tmp/xiyouyun 并不会导致错误，这是因为当前的工作目录是 /tmp，所以在这个工作目录下可以用 xiyouyun 来代替 /tmp/xiyouyun)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前工作目录的路径，路径中包含 xiyouyun，说明目录创建成功，当然，此前 change directory 成功也说明了目录创建成功。</span></span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/a682106b92ea4cb887e0a59158f71a20.png" class="" title="在这里插入图片描述">

<h2 id="touch-touch-txt-创建一个空文件"><a href="#touch-touch-txt-创建一个空文件" class="headerlink" title="touch touch.txt(创建一个空文件)"></a><code>touch touch.txt</code>(创建一个空文件)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前目录下的文件信息，查看文件是否被创建</span></span><br><span class="line"><span class="built_in">ls</span> </span><br><span class="line"><span class="comment"># 查看 touch.txt 文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> touch.txt</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/b4313903902a420e8f79aba24a1816ce.png" class="" title="在这里插入图片描述">

<h2 id="使用vim创建一个文件并向其中写入内容"><a href="#使用vim创建一个文件并向其中写入内容" class="headerlink" title="使用vim创建一个文件并向其中写入内容"></a>使用vim创建一个文件并向其中写入内容</h2><p>输入<code>vim vim.txt</code>命令后进入到 vim 界面，在英文输入法模式按 <kbd>i</kbd>，切换到 vim 的输入模式，输入内容 hello，xiyouyun，然后按下<kbd>Esc</kbd>，再依次输入”:wq” 3 个字符，然后按下回车，文件内容写入完毕。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前目录下的文件信息，查看文件是否被创建</span></span><br><span class="line"><span class="built_in">ls</span> </span><br><span class="line"><span class="comment"># 查看 vim.txt 文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> vim.txt</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/626cb50b4d1d4693af2c85a00dda8ef5.gif" class="" title="请添加图片描述">

<h2 id="使用-echo-创建文件并写入内容"><a href="#使用-echo-创建文件并写入内容" class="headerlink" title="使用 echo 创建文件并写入内容"></a>使用 echo 创建文件并写入内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用重定向符号 &gt; 向 echo.txt 写入 hello</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; echo.txt</span><br><span class="line"><span class="comment"># 使用 cat 查看 echo.txt 文件的内容， 使用相对于工作目录的相对路径</span></span><br><span class="line"><span class="built_in">cat</span> echo.txt</span><br><span class="line"><span class="comment"># 使用重定向符号 &gt; 向 echo.txt 写入 xiyouyun</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xiyouyun&quot;</span> &gt; echo.txt</span><br><span class="line"><span class="comment"># 使用 cat 查看 echo.txt 文件的内容，可以看到第一次写入的内容被第二次写入的内容覆盖了，文件内容只包含第二次写入的内容</span></span><br><span class="line"><span class="built_in">cat</span> echo.txt</span><br><span class="line"><span class="comment"># 如果想要持续写入一个文件而不发生覆盖，需要使用追加重定向符号（&gt;&gt;）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello， xiyouyun&quot;</span> &gt;&gt; echo.txt</span><br><span class="line"><span class="comment"># 查看文件内容，可以看到，之前文件中的内容并没有被覆盖，而是在之前的文件内容后面追加了新的内容</span></span><br><span class="line"><span class="built_in">cat</span> echo.txt</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/6d74fdb3efcf448a94e61331f4907ac3.gif" class="" title="请添加图片描述">

<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="创建多层目录"><a href="#创建多层目录" class="headerlink" title="创建多层目录"></a>创建多层目录</h3><p>mkdir 还有一个 -p 参数，可以用来创建多层目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">mkdir</span> -p father/son</span><br><span class="line"><span class="built_in">mkdir</span> -p grandfather/father/son </span><br><span class="line"><span class="comment"># tree 可以查看目录的组织结构，后面的 “| grep  -A 1 father” 可以暂时忽略它的含义</span></span><br><span class="line">tree | grep  -A 1 father</span><br></pre></td></tr></table></figure>
<p>上面的代码执行后，会创建一个名为 father 的目录，在它的下面还有一个名为 son 的目录。<br>还有创建一个 grandfather 的目录，在它的下面有一个名为 father 的目录，father 目录的下面还有一个名为 son 的目录。</p>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/1e0579cecbab44b2b156745e67ca2a78.png" class="" title="在这里插入图片描述"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>终端-工作目录-文件-路径-命令-参数(pwd,cd,ls)</title>
    <url>/2022/12/30/%E7%BB%88%E7%AB%AF-%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6-%E8%B7%AF%E5%BE%84-%E5%91%BD%E4%BB%A4-%E5%8F%82%E6%95%B0-pwd-cd-ls/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=902282431&bvid=BV1tP4y1U7zP&cid=883084717&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="1-终端（terminal）"><a href="#1-终端（terminal）" class="headerlink" title="1.终端（terminal）"></a>1.终端（terminal）</h2><p>终端是一种输入输出设备，用于人与计算机交互，早期是一种计算机硬件。（电传打字机）电传打字机将用户输入的文字翻译成纸带上的孔，然后将纸带输入到计算机中获得用户输入的文字。终端是人与计算机交互的桥梁。</p>
<img src="/2022/12/30/%E7%BB%88%E7%AB%AF-%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6-%E8%B7%AF%E5%BE%84-%E5%91%BD%E4%BB%A4-%E5%8F%82%E6%95%B0-pwd-cd-ls/f818a5fd2ddc4ea1a021ba2fa7a027ed.jpeg" class="" title="请添加图片描述">


<p>现在使用的终端是使用软件模拟出来的虚拟终端，用于人与计算机交互，输出系统是屏幕，输入系统是键盘。如：<a href="https://bash.aliyun.com/%EF%BC%88%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86%EF%BC%89">https://bash.aliyun.com/（使用支付宝扫码登陆）</a></p>
<img src="/2022/12/30/%E7%BB%88%E7%AB%AF-%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6-%E8%B7%AF%E5%BE%84-%E5%91%BD%E4%BB%A4-%E5%8F%82%E6%95%B0-pwd-cd-ls/0b2c8f22ae844f4182e8f5ba780661fa.png" class="" title="请添加图片描述">




<p>我们可以在终端输入命令来与计算机进行交互。</p>
<h2 id="2-工作目录（work-directory）"><a href="#2-工作目录（work-directory）" class="headerlink" title="2.工作目录（work directory）"></a>2.工作目录（work directory）</h2><p>工作目录是在终端中使用<code>pwd</code>（print work directory）命令输出的目录，通常也被称为“当前所在的目录”。</p>
<p>它的意义是执行命令时如果涉及到目录，可以以它为参考来指定其他目录。当命令涉及到目录却并未指定时，则默认使用工作目录。如使用<code>ls</code>(list information about the files)列出某个目录下的文件和目录信息时，如果不指定目录，则默认列出工作目录下的文件和目录信息。使用<code>cd</code>（change directory）可以切换工作目录，将当前的工作目录切换为 /tmp 的命令为<code>cd /tmp</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出当前的工作目录</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 不指定目录，列出当前工作目录下的文件信息</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 指定目录，输入 tmp 目录下的文件信息</span></span><br><span class="line"><span class="built_in">ls</span> /tmp</span><br><span class="line"><span class="comment"># 将当前的工作目录切换为 /tmp</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 不指定目录，列出当前工作目录(tmp)下的文件</span></span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h2 id="3-文件和目录"><a href="#3-文件和目录" class="headerlink" title="3.文件和目录"></a>3.文件和目录</h2><p>文件是一种数据的组织形式，通常人们以<strong>文件名</strong>来称呼一个文件，如：“新建文本文档.txt”。</p>
<p>目录是一种组织文件的方式，不同目录下可能存在着拥有相同名称的文件或目录，为了消除歧义，人们称呼某个文件或目录时，会称呼为 “xx目录下的xx文件”、“xx目录下的xx目录”。但这还不够，因为一个系统中可能存在多个 a 目录。当说到 “a 目录下的 xx 文件” 时还是可能存在歧义。</p>
<pre class="mermaid">flowchart TB
A("/") --> B(bin)
A("/") --> C(usr)
B(bin) --> D(xiyou.txt)
C(usr) --> E(bin)
E(bin) --> F(xiyou.txt)</pre>

<p>为了彻底消除歧义，可以用<strong>路径</strong>来指代文件，在 linux 系统中，不同的文件或目录拥有不同的路径，也就是说每个文件或目录对应的路径是唯一的，使用路径来指代文件就没有歧义了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将工作目录切换为 /</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="comment"># 输出工作目录下的文件和目录信息</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 将各做目录切换为 /usr 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr</span><br><span class="line"><span class="comment"># 输出工作目录下的文件和目录信息</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 根据上图可以看到 / 目录下和 /usr 目录下都有 bin 目录 两个 bin 目录下都有 xiyou.txt文件，此时可以通过路径来区分它们</span></span><br><span class="line">/bin</span><br><span class="line">/usr/bin</span><br><span class="line">/bin/xiyou.txt</span><br><span class="line">/usr/bin/xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="4-路径"><a href="#4-路径" class="headerlink" title="4.路径"></a>4.路径</h2><p>在 linux 系统中，目录和文件都有其对应的路径，路径是区分不同文件或不同目录的唯一标识，目录和文件的区别是目录名可以作为文件路径的前缀，但文件名不能作为目录路径的前缀。假设在 /tmp 目录下有一个文件 xiyou.txt ，则目录 tmp 的路径为 /tmp， xiyou.txt 的路径是 /tmp/xiyou.txt。</p>
<pre class="mermaid">graph LR
A("/") --> B(tmp)
B(tmp) --> C(xiyou.txt)</pre>



<p>下图中 lib 的路径为<code>/usr/lib</code>，xiyou.txt 的路径为 <code>/tmp/xiyou.txt</code></p>
<pre class="mermaid">graph TB
/("/")--> tmp
/("/") --> bin
/("/") --> usr
/("/") --> home
home --> bash
usr --> lib
tmp --> xiyou.txt</pre>

<p>根目录：”/“ 代表根目录，是系统中<strong>所有</strong>目录的前缀。</p>
<p>绝对路径：绝对路径是以 “/“（根目录）为标准，相对于根目录的文件路径，前文中所说的路径都是绝对路径。</p>
<p>相对路径：当路径不以”/“开头时，则路径相对于当前的工作目录。使用 “.” 指代当前工作目录，使用”..”指代当前工作目录的父目录。使用 “../../“ 来指代当前文件的父目录的父目录，以此类推……</p>
<p>家目录：”~”代表家目录，它的格式是 “/home/<username>“，如果用户名为 bash 的话，则家目录为 /home/bash<br>上一个工作目录：”-“代表最近一次 cd 切换前的工作目录，使用 cd 切换工作目录后如果想要切换回上一次的工作目录，可以使用<code>cd -</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tips：当前的工作目录可以用命令 pwd 查看</span></span><br><span class="line"><span class="comment"># 切换工作目录为根目录</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="comment"># 切换到 tmp 工作目录，注意这里的路径是相对路径，是相对于当前工作目录的路径，不以 &quot;/&quot; 开头，不过当前的工作目录是 /， 相对于 / 的 tmp 目录对应的路径是 /tmp 。</span></span><br><span class="line"><span class="built_in">cd</span> tmp</span><br><span class="line"><span class="comment"># 此时工作目录是 /tmp， 可是使用 &quot;..&quot;指代它的上一层目录， 它的上一层目录就是根目录 /</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 切换工作目录为家目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 使用 pwd 查看家目录的路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 切换工作目录为根目录 /</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<h2 id="5-命令和参数"><a href="#5-命令和参数" class="headerlink" title="5.命令和参数"></a>5.命令和参数</h2><p>上文中使用到的<code>pwd</code>，<code>ls</code>，<code>cd</code>是 linux 中的命令。</p>
<p>命令是 linux 中的可执行程序，执行后会让计算机做某种操作。</p>
<p>参数是跟在命令后的描述信息，它们就像电路中的开关一样，控制着命令的执行过程和结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前文中的 cd /tmp ，cd 是命令，/tmp 是参数，这个参数描述的是切换的目录的路径</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l 是 ls 的参数，它描述的是将目录下的文件以 list 的形式列出</span></span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以多个参数搭配使用，下面这个命令表示以 list 的形式列出路径为 /etc 的目录下的文件</span></span><br><span class="line"><span class="built_in">ls</span>  -l /etc </span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数的形式多种多样，这里的 --color=never 会让 ls 的输出内容不以颜色来区分文件类型</span></span><br><span class="line"><span class="built_in">ls</span> -l /tmp --color=never</span><br></pre></td></tr></table></figure>

<h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p>在 linux 中，大多数命令可以通过 命令  –help 的方式查看命令的使用方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例:</span></span><br><span class="line"><span class="built_in">ls</span> --<span class="built_in">help</span></span><br><span class="line"><span class="built_in">pwd</span> --<span class="built_in">help</span></span><br><span class="line"><span class="built_in">cd</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux课程大纲</title>
    <url>/2022/12/29/Linux%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=902282431&bvid=BV1tP4y1U7zP&cid=883084717&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="前置知识介绍"><a href="#前置知识介绍" class="headerlink" title="前置知识介绍"></a>前置知识介绍</h2><ul>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/127679905">终端、工作目录、文件、路径、命令和参数（pwd, cd, ls）</a></li>
</ul>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127694578">创建文件（touch、mkdir、vim、重定向（&gt;，&gt;&gt;））</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127705049">删除文件（rm，rmdir）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127719789">编辑文件内容（vim，nano，重定向（&gt;，&gt;&gt;））</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127724318">查看文件内容（cat，head，tail，less，more）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127747062">查找文件（find，ls，locate，whereis，which）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127752707">传输文件（scp，ftp，wget，curl）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127797596">压缩文件（tar，zip，unzip，rar，unrar）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127875749">移动和拷贝文件（mv，cp，ln）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127913210">文件的权限和属性（chmod，chown）</a></p>
</li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/127944137">进程介绍</a></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/127955269">进程的后台运行（nohup，&amp;，jobs，fg，ctrl+z）</a><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/127974403">正则表达式</a></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128002636">Linux教程之文本处理（grep）</a></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128010025">Linux教程之文本处理（sed，xargs，wc）</a></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128028680">awk</a><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128046805">ping和github代理</a><h2 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h2></li>
<li><a href="#">用户和用户组管理</a><h2 id="ubuntu-软件包管理"><a href="#ubuntu-软件包管理" class="headerlink" title="ubuntu 软件包管理"></a>ubuntu 软件包管理</h2></li>
<li><a href="http://t.csdn.cn/bCc6Z">ubuntu包管理工具之apt</a><h2 id="bash-教程"><a href="#bash-教程" class="headerlink" title="bash 教程"></a>bash 教程</h2></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128179419">bash 教程</a><h2 id="bash-练习"><a href="#bash-练习" class="headerlink" title="bash 练习"></a>bash 练习</h2></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128309677">bash练习</a><h2 id="生信常用软件介绍"><a href="#生信常用软件介绍" class="headerlink" title="生信常用软件介绍"></a>生信常用软件介绍</h2></li>
<li>rstudio</li>
<li>apptainer</li>
<li>docker<h2 id="linux使用小技巧"><a href="#linux使用小技巧" class="headerlink" title="linux使用小技巧"></a>linux使用小技巧</h2></li>
<li>命令使用方法查询：<a href="https://git.io/linux">https://git.io/linux</a></li>
<li>查看系统资源（free，du，df，top）</li>
<li>无root权限安装软件</li>
<li><a href="https://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html">理解.profile 和 .bashrc的工作原理</a></li>
</ul>
]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装R包</title>
    <url>/2022/12/29/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85R%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=774448127&bvid=BV1k14y1577d&cid=881813168&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>CRAN 在国内下载速度很快，因为它在国内有很多镜像，因此一般不用额外为 R 设置额外的国内镜像了。</p>
<h3 id="1-设置国内镜像源（可选）"><a href="#1-设置国内镜像源（可选）" class="headerlink" title="1.设置国内镜像源（可选）"></a>1.设置国内镜像源（<strong>可选</strong>）</h3><ul>
<li><p>使用 install 下载：<a href="https://cran.r-project.org/mirrors.html">https://cran.r-project.org/mirrors.html</a>（镜像源列表）</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从 CRAN 镜像下载安装包 (通常不需要,因为 CRAN 的 R 包下载速度不慢)</span>
install.packages<span class="token punctuation">(</span><span class="token string">"devtools"</span>, repos <span class="token operator">=</span> <span class="token string">"https://mirrors.ustc.edu.cn/CRAN/"</span><span class="token punctuation">)</span>

<span class="token comment"># 配置镜像源</span>
local<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>r <span class="token operator">&lt;</span>- getOption<span class="token punctuation">(</span><span class="token string">"repos"</span><span class="token punctuation">)</span>
r<span class="token punctuation">[</span><span class="token string">"CRAN"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>- <span class="token string">"http://mirrors.aliyun.com/CRAN/"</span>
r<span class="token punctuation">[</span><span class="token string">"CRANextra"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>- <span class="token string">"http://mirrors.aliyun.com/CRAN/"</span>
options<span class="token punctuation">(</span>repos<span class="token operator">=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment"># 向 ~/.Rprofile 文件中写入配置镜像的代码可以永久配置镜像</span>
file.edit<span class="token punctuation">(</span><span class="token string">"~/.Rprofile"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>使用 BiocManager 下载 <a href="https://www.bioconductor.org/about/mirrors/">https://www.bioconductor.org/about/mirrors/</a>（镜像源列表）</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从 BiocManager 镜像安装 XVector</span>
options<span class="token punctuation">(</span>BioC_mirror<span class="token operator">=</span><span class="token string">"https://mirrors.tuna.tsinghua.edu.cn/bioconductor"</span><span class="token punctuation">)</span>
BiocManager::install<span class="token punctuation">(</span><span class="token string">"XVector"</span><span class="token punctuation">)</span>

<span class="token comment"># 向 ~/.Rprofile 文件中写入配置镜像的代码可以永久配置镜像</span>
file.edit<span class="token punctuation">(</span><span class="token string">"~/.Rprofile"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="2-搜索-R-包，找到安装命令"><a href="#2-搜索-R-包，找到安装命令" class="headerlink" title="2.搜索 R 包，找到安装命令"></a>2.搜索 R 包，找到安装命令</h3><ul>
<li>在浏览器中搜索关键字：“xxx install” （推荐 google 搜索）</li>
<li>CRAN <a href="https://cran.r-project.org/web/packages/available_packages_by_name.html">https://cran.r-project.org/web/packages/available_packages_by_name.html</a> （能够在这里搜到的 R 包都能够通过 install.packages(“xxx”) 安装）</li>
<li>Bioconductor <a href="https://www.bioconductor.org/help/search/index.html?/%EF%BC%8C%EF%BC%88%E8%83%BD%E5%A4%9F%E5%9C%A8%E8%BF%99%E9%87%8C%E6%90%9C%E5%88%B0%E7%9A%84">https://www.bioconductor.org/help/search/index.html?/，（能够在这里搜到的</a> R 包都能通过 BiocManager::install(“xxx”) 的方式安装）</li>
<li>GitHub <a href="https://github.com/">https://github.com/</a> （通常在 github 仓库的 README.md 文件会提供安装方法）</li>
</ul>
<h3 id="3-安装-R-包"><a href="#3-安装-R-包" class="headerlink" title="3.安装 R 包"></a>3.安装 R 包</h3><h3 id="安装R包的不同工具"><a href="#安装R包的不同工具" class="headerlink" title="安装R包的不同工具"></a>安装R包的不同工具</h3><pre class="line-numbers language-R" data-language="R"><code class="language-R"># R 包安装工具的下载方式, 养成好习惯，安装包时指定 lib，这样能把R包安装在指定的目录下
install.packages(&quot;devtools&quot;, lib &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;R&#x2F;site-library&quot;)
install.packages(&quot;remotes&quot;, lib &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;R&#x2F;site-library&quot;)
install.packages(&quot;BiocManager&quot;, lib &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;R&#x2F;site-library&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="从-CRAN-安装："><a href="#从-CRAN-安装：" class="headerlink" title="从 CRAN 安装："></a>从 CRAN 安装：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">install.packages<span class="token punctuation">(</span><span class="token string">"stringr"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="从-Bioconductor-安装："><a href="#从-Bioconductor-安装：" class="headerlink" title="从 Bioconductor 安装："></a>从 Bioconductor 安装：</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">BiocManager::install(&quot;XVector&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="从-GitHub-在线安装："><a href="#从-GitHub-在线安装：" class="headerlink" title="从 GitHub 在线安装："></a>从 GitHub 在线安装：</h4><p>推荐一个 GitHub 代理网站 <a href="https://ghproxy.com/">https://ghproxy.com/</a>, 感谢该网站站长为中国开源做出的贡献！</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R"># 这里 R 包对应的 GitHub 链接是 https:&#x2F;&#x2F;github.com&#x2F;tidyverse&#x2F;stringr
devtools::install_github(&quot;tidyverse&#x2F;stringr&quot;)
remotes::install_github(&quot;tidyverse&#x2F;stringr&quot;)

# 使用 remotes 可以在安装时指定完整的 GitHub 链接，方便我们使用 GitHub 代理
remotes::install_git(&quot;https:&#x2F;&#x2F;github.com&#x2F;tidyverse&#x2F;stringr&quot;)

# 使用国内代理下载 R 包源码并安装
remotes::install_git(&quot;https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;github.com&#x2F;tidyverse&#x2F;stringr&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="从-GitHub-离线安装："><a href="#从-GitHub-离线安装：" class="headerlink" title="从 GitHub 离线安装："></a>从 GitHub 离线安装：</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R"># 假设我们将安装好的 zip包命名为 main.zip
devtools::install_local(&quot;main.zip&quot;)
# 可以参考 https:&#x2F;&#x2F;ghproxy.com 使用 github 代理下载文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>zip 包需要从 GitHub 下载(如图):</p>
<img src="/2022/12/29/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85R%E5%8C%85/a8af53aad80d4526923c61101c473a44.png" class="" title="在这里插入图片描述">

<h4 id="从在线源码安装："><a href="#从在线源码安装：" class="headerlink" title="从在线源码安装："></a>从在线源码安装：</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R"># 这里的 &quot;https:&#x2F;&#x2F;cran.r-project.org&#x2F;src&#x2F;contrib&#x2F;stringr_1.4.1.tar.gz&quot; 就是源码的下载路径
install.packages(&quot;https:&#x2F;&#x2F;cran.r-project.org&#x2F;src&#x2F;contrib&#x2F;stringr_1.4.1.tar.gz&quot;, repos&#x3D;NULL, type&#x3D;&quot;source&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="从离线源码安装："><a href="#从离线源码安装：" class="headerlink" title="从离线源码安装："></a>从离线源码安装：</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R"># 将源码下载到本地，然后使用以下方式编译安装

install.packages(&#39;&#x2F;tmp&#x2F;stringr_1.4.1.tar.gz&#39;, repos&#x3D;NULL, type&#x3D;&quot;source&quot;)
# 下载方式示例：
wget &quot;https:&#x2F;&#x2F;cran.r-project.org&#x2F;src&#x2F;contrib&#x2F;stringr_1.4.1.tar.gz&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>其实归根结底所有的 R 包都是通过源码安装的，不过是下载源码的渠道不一样</strong>。</p>
<h3 id="卸载-R-包"><a href="#卸载-R-包" class="headerlink" title="卸载 R 包"></a>卸载 R 包</h3><pre class="line-numbers language-R" data-language="R"><code class="language-R"># 命令示例，stringr 是包的名称
remove.packages(&quot;stringr&quot;, lib &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;R&#x2F;site-library&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>R包</tag>
      </tags>
  </entry>
  <entry>
    <title>在rstudio-server中使用R包的不同版本</title>
    <url>/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=986974785&bvid=BV1xt4y1T7Gd&cid=881793170&page=1"style="width:100%;height:500px;min-width:375px;min-height:200px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>R 不支持在一个目录下安装同一个包的多个版本</strong>，在加载 R 包时，它按照系统中配置的 libpaths 的优先级从高到低查找，在某个 libpath 下找到这个包后，将这个包加载到环境中，即使后面找到这个包的其他版本，也不会再次加载了。（R包加载机制）</p>
<p>如：在执行 library(“uwot”) 时，R 就会依次搜索 libpath 找到 uwot 的位置，即使 libpaths 中有多个 uwot，它找到第一个 uwot 后，就将 uwot 加载到环境中，而不会再加载后续找到的 uwot 包到环境中了。</p>
<p>不过我们可以将当前加载到环境中的 uwot 这个包 unload，然后加载其他 libpath 中的 uwot 包。后面我会演示这个步骤。（切换 uwot 版本的原理）</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R"># 查看系统中配置好的 libpath 输出，按照优先级从高到低的方式输出
.libPaths()
# 示例输出：
[1] &quot;&#x2F;home&#x2F;txb&#x2F;R&#x2F;x86_64-pc-linux-gnu-library&#x2F;4.2&quot;
[2] &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;R&#x2F;site-library&quot;              
[3] &quot;&#x2F;usr&#x2F;lib&#x2F;R&#x2F;site-library&quot;                    
[4] &quot;&#x2F;usr&#x2F;lib&#x2F;R&#x2F;library&quot; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如图：/home/txb/rpackage 目录下的初始 uwot 版本是 0.1.14，我在这个目录下重新安装了 uwot 的 0.1.13 版本。两个版本没有共存，而是将原来的 uwot 0.1.14 版本卸载掉了，安装上了 uwot 的 0.1.13 版本。这就是我们为什么要构造新的 libpath 的原因 —— 同一个 libpath 下的包只有1个版本。</p>
<img src="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/5464ff7939c74430acfb02a24a88e690.png" class="" title="在这里插入图片描述">
<img src="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/5ede430fd04f42f29a09540c89da992b.png" class="" title="在这里插入图片描述">

<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>R 包的安装目录是使用 lib 参数指定的，指定这个参数可以将 R 包下载到对应的目录。在指定目录下安装好R包后，通过 .libPaths() 函数将该目录配置为新增的 libpath。</p>
<p>通过在 Console 中执行 .libPaths() 函数配置好的 libpath 仅在当前 rsession 中生效，“Start New Session” 之后，配置的 libpath 就会失效。</p>
<p>为了让 .libPaths() 配置的 libpath 永久生效，可以将相关的配置命令写入的 ~/.Rprofile 中，这样在“Start New Session” 之后，配置的 libpath 依然有效。</p>
<p>实现方式 1: 将 R 包安装在 rpackage 目录并配置</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R"># 将包安装在指定的 libpath 示例：
# 注意：libpath 必须在系统中存在，如果不存在，需要新建对应的目录：mkdir -p &#x2F;home&#x2F;txb&#x2F;rpackage

# 将 R 包下载在指定目录命令示例：
remotes::install_github(&quot;jlmelville&#x2F;uwot&quot;, lib&#x3D;&quot;&#x2F;home&#x2F;txb&#x2F;rpackage&quot;)
install.packages(&quot;xxx&quot;, lib&#x3D;&quot;&#x2F;home&#x2F;txb&#x2F;rpackage&quot;)
devtools::install_github(&quot;xxx&#x2F;xxx&quot;, lib&#x3D;&quot;&#x2F;home&#x2F;txb&#x2F;rpackage&quot;)
BiocManager::install(&quot;xxx&quot;, lib&#x3D;&quot;&#x2F;home&#x2F;txb&#x2F;rpackage&quot;)

# 查看未添加 libpath 之前 uwot 的版本
library(&quot;uwot&quot;)
packageVersion(&quot;uwot&quot;)
# 向 R 包的 libpaths 中新增一个 libpath，并将它放在第 1 个元素 （最高优先级）
.libPaths(c(&quot;&#x2F;home&#x2F;txb&#x2F;rpackage&quot;,.libPaths()))
# 查看添加 libpath 之后 uwot 的版本
library(&quot;uwot&quot;)
packageVersion(&quot;uwot&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实现方式 2：使用 conda 安装 R 包并配置 libpath</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 conda 安装指定版本的 R 包</span>
<span class="token comment">## 创建 conda 环境</span>
conda create -n r-reticulate r-uwot<span class="token operator">==</span><span class="token number">0.1</span>.11 -y
conda activate r-reticulate 

<span class="token comment"># 配置 libpath</span>
.libPaths<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token string">"/home/txb/miniconda3/envs/r-reticulate/lib/R/library"</span>, .libPaths<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>

<span class="token comment"># 查看此时 R 找到的第 1 个 R 包的版本。</span>
library<span class="token punctuation">(</span><span class="token string">"uwot"</span><span class="token punctuation">)</span>
packageVersion<span class="token punctuation">(</span><span class="token string">"uwot"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h3><p>结合 rstudio-server 查看 R 包的版本。在这个步骤我先 “Start New Session” 将原先配置的 libpath 取消掉（后面会说明原因）。</p>
<pre class="line-numbers language-R" data-language="R"><code class="language-R">.libPaths(c(&quot;&#x2F;home&#x2F;txb&#x2F;rpackage&quot;,.libPaths()))
library(&quot;uwot&quot;)
packageVersion(&quot;uwot&quot;)

.libPaths(c(&quot;&#x2F;home&#x2F;txb&#x2F;miniconda3&#x2F;envs&#x2F;r-reticulate&#x2F;lib&#x2F;R&#x2F;library&quot;, .libPaths()))
library(&quot;uwot&quot;)
packageVersion(&quot;uwot&quot;)

# Seurat 中会 import uwot，此时 uwot 无法 unload，想要切换 uwot 版本，有两种方式。
# 1. 将 Seurat unload
# 2. “Start New Session”，然后再选中想要使用的 uwot 版本 (推荐)
library(&quot;Seurat&quot;)
detach(&quot;package:Seurat&quot;, unload &#x3D; TRUE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/e69c3a3181f7466bafb4e6f27f02fd80.png" class="" title="请添加图片描述">
<img src="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/24267bfcfa654dd2bb5ab21f0f909982.png" class="" title="请添加图片描述">

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 让 libpath 永久生效，将相关命令写入到文件</span>
file.edit<span class="token punctuation">(</span><span class="token string">"~/.Rprofile"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="加载指定libpath下的R包"><a href="#加载指定libpath下的R包" class="headerlink" title="加载指定libpath下的R包"></a>加载指定libpath下的R包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># lib 参数指定 libpath，即从那个目录下加载 R 包</span>
library<span class="token punctuation">(</span><span class="token string">"remotes"</span>, lib <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="查看已经加载的R包"><a href="#查看已经加载的R包" class="headerlink" title="查看已经加载的R包"></a>查看已经加载的R包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>.packages<span class="token punctuation">(</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>rstudio-server</tag>
        <tag>R包</tag>
      </tags>
  </entry>
  <entry>
    <title>conda使用教程</title>
    <url>/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=944424445&bvid=BV18W4y1E7sw&cid=881784737&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>


<blockquote>
<p>针对 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>参考教程：<a href="https://blog.csdn.net/weixin_64316191/article/details/127435729">conda 的安装和卸载</a></p>
<h2 id="虚拟环境管理"><a href="#虚拟环境管理" class="headerlink" title="虚拟环境管理"></a>虚拟环境管理</h2><h3 id="conda-env-list-（列出虚拟环境信息）"><a href="#conda-env-list-（列出虚拟环境信息）" class="headerlink" title="conda env list （列出虚拟环境信息）"></a>conda env list （列出虚拟环境信息）</h3><h3 id="conda-create-n-创建虚拟环境"><a href="#conda-create-n-创建虚拟环境" class="headerlink" title="conda create -n  (创建虚拟环境)"></a>conda create -n <env_name> (创建虚拟环境)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令示例</span>
conda create -n py38 -y
conda create -n py39 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span> -y  <span class="token comment"># 官方推荐使用这种方式</span>
conda create -n py39_2 -y <span class="token operator">&amp;&amp;</span> conda <span class="token function">install</span> -n py39_2 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span> -y

<span class="token comment"># 比较两种创建方式有何不同，并无任何不同</span>
<span class="token function">diff</span> miniconda3/envs/py39 miniconda3/envs/py39_2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/d12c93ef45d64d26959ebb08f504be54.png" class="" title="在这里插入图片描述">
<p>可以看到，在创建环境时指定 python 版本，和创建完环境后安装 python 的指定版本两者导致的结果并无不同，那为什么官方推荐在创建环境时使用 python=3.9 的方式指定 python<br> 版本呢？ 这是因为如果您要在该虚拟环境中使用 python，就应该在创建环境之初下载 python3.9 ，之后在这个虚拟环境中下载的其他包都会匹配 python3.9的依赖与约束。如果安装了很多其他包之后再安装 python3.9，处理环境依赖就会变得较为复杂，甚至导致一些不易察觉的 bug。</p>
<h3 id="conda-activate-进入虚拟环境"><a href="#conda-activate-进入虚拟环境" class="headerlink" title="conda activate  (进入虚拟环境)"></a>conda activate <env_name> (进入虚拟环境)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令示例</span>
conda activate py39<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="conda-deactivate-退出虚拟环境"><a href="#conda-deactivate-退出虚拟环境" class="headerlink" title="conda deactivate  (退出虚拟环境)"></a>conda deactivate <env_name> (退出虚拟环境)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令示例</span>
conda deactivate <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="conda-remove-n-–all-删除虚拟环境"><a href="#conda-remove-n-–all-删除虚拟环境" class="headerlink" title="conda remove -n  –all 删除虚拟环境"></a>conda remove -n <env_name> –all 删除虚拟环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令示例</span>
conda create -n <span class="token builtin class-name">test</span> -y
conda <span class="token function">env</span> list
<span class="token comment"># 删除 test 虚拟环境</span>
conda remove -n <span class="token builtin class-name">test</span> --all
conda <span class="token function">env</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="导出虚拟环境"><a href="#导出虚拟环境" class="headerlink" title="导出虚拟环境"></a>导出虚拟环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 适用于在相同操作系统版本下 clone 虚拟环境</span>
conda list --explicit <span class="token operator">></span> spec-list.txt
<span class="token comment"># 适用于所有平台之间 clone 虚拟环境，这里的平台指的是操作系统，如win、centos、ubuntu</span>
conda <span class="token function">env</span> <span class="token builtin class-name">export</span> <span class="token operator">></span> environment.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据导出的文件创建虚拟环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 代码示例</span>
<span class="token comment"># 根据导出包创建 env_name1 的虚拟环境</span>
conda create -n env_name1 --file spec-list.txt
conda <span class="token function">env</span> create --file environment.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="channels-管理"><a href="#channels-管理" class="headerlink" title="channels 管理"></a>channels 管理</h2><h3 id="列出-conda-中配置的-channels，根据优先级从低到高的顺序排列"><a href="#列出-conda-中配置的-channels，根据优先级从低到高的顺序排列" class="headerlink" title="列出 conda 中配置的 channels，根据优先级从低到高的顺序排列"></a>列出 conda 中配置的 channels，根据优先级从低到高的顺序排列</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --get channels <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="添加-channels，添加国内的-channels-也就是我们常说的添加国内源"><a href="#添加-channels，添加国内的-channels-也就是我们常说的添加国内源" class="headerlink" title="添加 channels，添加国内的 channels 也就是我们常说的添加国内源"></a>添加 channels，添加国内的 channels 也就是我们常说的添加国内源</h3><p>选其一添加即可，添加太多反而会“打架”。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加中科大源</span>
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls <span class="token function">yes</span>

<span class="token comment"># 添加清华大学源（偶尔抽风，此时需要更换为其他国内镜像源，更换国内镜像源的教程可以查看《conda安装教程》）</span>
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
conda config --set show_channel_urls <span class="token function">yes</span>

<span class="token comment"># 添加阿里云源</span>
conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/free
conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/main
conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/conda-forge
conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/bioconda
conda config --set show_channel_urls <span class="token function">yes</span>

<span class="token comment"># 添加北京外国语大学源</span>
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/ 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/ 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/msys2/
conda config --set show_channel_urls <span class="token function">yes</span> 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/


<span class="token comment"># 添加镜像源后清除一下本地软件搜索索引</span>
conda clean -i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="删除-channels"><a href="#删除-channels" class="headerlink" title="删除 channels"></a>删除 channels</h3><ul>
<li>方法 1 （通过命令删除）：  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 首先查看 channels</span>
conda config --get channels
<span class="token comment"># 删除指定的 channels</span>
conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
conda config --remove channels defaults
<span class="token comment"># 删除配置的所有镜像源</span>
conda config --remove-key channels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>方法 2 （编辑 .condarc 文件删除想要删除 channels 对应的行）  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.condarc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h4 id="安装包时暂时添加-channels"><a href="#安装包时暂时添加-channels" class="headerlink" title="安装包时暂时添加 channels"></a>安装包时暂时添加 channels</h4><p>使用 -c 指定的软件源处于最高优先级，这可能导致一个问题，如果你已经配置好国内镜像源，在下载对应源的软件时可以不指定软件源，它会自动从你配置好国内镜像源中下载。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c bioconda presto
<span class="token comment"># 如果配置了国内镜像源，就不用指定 channels 了，这样会使用国内镜像源下载，速度更快</span>
conda <span class="token function">install</span> presto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="换源"><a href="#换源" class="headerlink" title="换源:"></a>换源:</h4><p>上面几个国内镜像源没有一个是绝对稳定的，都有可能抽风，连接不上，这时可以切换为其他国内镜像源。下图是中科大镜像源不能访问时的报错，而且同一天阿里的镜像源也抽风了……这时可以切换为其他国内镜像源。</p>
<img src="/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20230111191522768.png" class="" title="image-20230111191522768">

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移除当前配置的所有镜像源</span>
conda config --remove-key channels
<span class="token comment"># 重新添加镜像源，以北外的镜像源为例</span>
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/ 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/ 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/msys2/
conda config --set show_channel_urls <span class="token function">yes</span> 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>使用 conda 安装包之前，需要在以下链接中搜索 conda 包，找到安装对应包的命令后再进行安装，如果不能在下面的链接中找到安装方法，即表明该包不能通过 conda 安装。<br><a href="https://anaconda.org/search">搜 conda 包</a></p>
<img src="/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/d801ccb2ddcb4be0b856700d701fee5e.png" class="" title="在这里插入图片描述">

<h3 id="conda-list-（查看当前虚拟环境已经安装的包）"><a href="#conda-list-（查看当前虚拟环境已经安装的包）" class="headerlink" title="conda list （查看当前虚拟环境已经安装的包）"></a>conda list （查看当前虚拟环境已经安装的包）</h3><h3 id="conda-install-安装包"><a href="#conda-install-安装包" class="headerlink" title="conda install  (安装包)"></a>conda install <package_name> (安装包)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令示例</span>
conda <span class="token function">install</span> --help
<span class="token comment"># -y: yes</span>
conda <span class="token function">install</span> requests -y
<span class="token comment"># -c: 临时增加一个 channel ，并且增加的 channels 会处于最高优先级</span>
<span class="token comment">## 如果配置了国内镜像源，就不要指定镜像源了，直接使用 conda install presto 安装</span>
conda <span class="token function">install</span> -c bioconda presto
<span class="token comment"># -vv: 显示下载过程中的详细日志，方便定位问题</span>
conda <span class="token function">install</span> numpy -y -vv
<span class="token comment"># 后台下载</span>
<span class="token function">nohup</span> conda <span class="token function">install</span> pandas -y <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用conda还是pip"><a href="#使用conda还是pip" class="headerlink" title="使用conda还是pip?"></a>使用conda还是pip?</h3><p>conda 官方建议，使用 conda 安装的 python包和使用 pip 安装的 python 包是有略微不同的，如果可能，尽量使用 conda 来安装包。<a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-pkgs.html?highlight=pip#id5">参考链接</a></p>
<ul>
<li>在 conda 4.6 以后，conda 可以识别 pip 安装的 python包，不过目前这一功能还处于实验阶段。</li>
<li>在 conda 中应该优先使用 conda 安装包，不要混用 conda 和 pip，可以创建一个虚拟环境专门用于 pip 管理 python 包</li>
<li>conda 和 pip 都可以根据文件批量安装 python 包  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list --format<span class="token operator">=</span>freeze <span class="token operator">></span> requirements.txt
pip <span class="token function">install</span> -r requirements.txt
conda <span class="token function">install</span> -n env_name --file requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><h3 id="conda-config-–show"><a href="#conda-config-–show" class="headerlink" title="conda config –show"></a>conda config –show</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 channels</span>
conda config --help
conda config --get channels
conda config --remove <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span>
conda config --remove-key <span class="token operator">&lt;</span>key<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们很难记住那么多配置项的作用，如果需要可以查阅 conda 官方教程对各配置项的详解。<a href="https://conda.io/projects/conda/en/latest/configuration.html#">conda 配置项的作用</a></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>conda的安装和卸载</title>
    <url>/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=559359158&bvid=BV1xe4y1U7Fe&cid=881565520&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<iframe src="//player.bilibili.com/player.html?aid=731773217&bvid=BV1aD4y1r7H1&cid=881602406&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<blockquote>
<p>针对 ubuntu20.04<br>ubuntu20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>下载 conda 的安装脚本（这里使用清华大学的镜像）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~  # 推荐将 conda 安装在家目录下</span><br><span class="line">wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py39_4.10.3-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li>
<li>执行conda安装脚本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash Miniconda3-py39_4.10.3-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li>
<li>阅读并同意conda的相关协议，不停地回车然后输入yes再回车就安装成功了, 执行脚本后输入的文字的顺序可以参考这个<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">回车</span><br><span class="line">q</span><br><span class="line">yes</span><br><span class="line">回车</span><br><span class="line">yes</span><br></pre></td></tr></table></figure></li>
<li>为了让安装立即生效，需要执行 .bashrc 脚本，这样会立即进入到 conda 的 base 环境下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>添加官方源和国内源，这<strong>几乎</strong>是提速 conda 的唯一方式了。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加官方源</span></span><br><span class="line">conda config --add channels r # R软件包</span><br><span class="line">conda config --add channels conda-forge # Conda社区维护的不在默认通道中的软件</span><br><span class="line">conda config --add channels bioconda # 生物信息学类工具</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加国内源头 （选其一添加即可）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加中科大源</span></span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加清华大学源（偶尔抽风，此时需要换其他国内源）</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加阿里云源</span></span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/free</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/main</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/conda-forge</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/bioconda</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></li>
<li>查看 conda 源是否配置成功，可以看出各 channel 的优先级（从上到下优先级依次增加）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --get channels</span><br></pre></td></tr></table></figure>
<img src="/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/048bebbd30d24fe182b924fd13e647d8.png" class="" title="在这里插入图片描述"></li>
</ol>
<p><strong>安装完成！</strong></p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>conda 的卸载很方便，因为 conda 的安装并不会污染其他系统目录，conda 几乎将所有数据都保存在 miniconda3 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf .conda</span><br><span class="line">rm -rf .condarc</span><br><span class="line">rm -rf miniconda3</span><br></pre></td></tr></table></figure>
<p>然后再删除 ~/.bashrc 文件中的 conda 初始化添加的语句，也就是删除图示内容</p>
<img src="/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/2dfb6c21b1514a6e9952b78b92e704ad.png" class="" title="在这里插入图片描述">
<p>使用文字描述一下这个动作：使用 vim 编辑 .bashrc，将光标移动到要删除的文字后方，输入 i 进入 vim 的编辑模式，然后敲击键盘上的”Backspace” 删除相应文字，文字删除完毕后，按键盘上的 “Esc” 进入 vim 的命令模式，输入 “:wq”  然后回车保存对文件的更改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>删完之后执行一下 .bashrc 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p><strong>卸载完成！</strong></p>
<h2 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h2><p>所谓重装，就是将原来安装的 conda 卸载后再重新安装一次。（参考上述步骤）</p>
<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="更换镜像源："><a href="#更换镜像源：" class="headerlink" title="更换镜像源："></a>更换镜像源：</h3><p>首先删除当前配置的源，然后根据上述教程重新配置源即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除当前配置的源</span></span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>用户和用户组</title>
    <url>/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=989421942&bvid=BV1B44y1R7tJ&cid=943112784&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>用户和用户组是用来划分权限的抽象概念，用户除了作为权限的抽象之外。我们通常还需要借助用户名和密码来登陆系统。</p>
<p>用户和用户组是多对多的关系，即1个用户可以对应多个用户组，1个用户组也可以包含多个用户。</p>
<img src="/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/image-20221225211630067.png" class="" title="image-20221225211630067">

<!--more-->

<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>useradd：通常用于在脚本中创建用户</p>
<p>adduser：交互式地创建用户，手动设置密码，自动创建家目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建用户组</span>
<span class="token function">groupadd</span> xiyougroup
<span class="token comment"># 创建用户，并把用户添加到用户组</span>
<span class="token function">sudo</span> <span class="token function">useradd</span> -m -d /home/xiyou -s /bin/bash -g xiyougroup xiyou
<span class="token comment"># 为 xiyou 用户设置密码</span>
<span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /proc/sys/kernel/random/uuid<span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">$password</span><span class="token entity" title="\n">\n</span><span class="token variable">$password</span>"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">passwd</span> xiyou
<span class="token comment"># 获取刚刚为 xiyou 用户设置的密码</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$password</span>

<span class="token comment"># 切换当前用户为 xiyou，需要输入刚刚设置的密码</span>
<span class="token function">su</span> xiyou 
<span class="token comment"># 交互式地创建用户</span>
<span class="token function">sudo</span> adduser xiyou2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/password.gif" class="" title="password">

<h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><p>usermod：修改用户信息</p>
<p>userdel：删除用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改用户名</span>
<span class="token function">usermod</span> -l 新用户名 旧用户名
<span class="token comment"># 修改用户家目录</span>
<span class="token function">usermod</span> -d 新家目录 用户名
<span class="token comment"># 锁定用户不能登陆</span>
<span class="token function">usermod</span> -L 用户名
<span class="token comment"># 解除用户锁定</span>
<span class="token function">usermod</span> -U 用户名
<span class="token comment"># 查看用户状态</span>
<span class="token function">passwd</span> -S 用户名
<span class="token comment"># 删除用户的同时删除家目录</span>
<span class="token function">usermod</span> -r 用户名

<span class="token comment"># 删除用户</span>
<span class="token function">userdel</span> 用户名
<span class="token comment"># 删除用户名和用户的家目录</span>
<span class="token function">userdel</span> -r 用户名 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看新增用户组命令的使用方法</span>
addgroup --help
<span class="token function">groupadd</span> --help

<span class="token comment"># 创建用户组</span>
<span class="token function">groupadd</span> xiyougroup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="管理用户组"><a href="#管理用户组" class="headerlink" title="管理用户组"></a>管理用户组</h2><p>groups：查看用户组信息</p>
<p>id：查看用户的 uid 和 gid 信息</p>
<p>groupmod：修改用户组信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看系统中所有的用户组</span>
<span class="token function">cat</span> /etc/group
<span class="token comment"># 查看当前用户所在的用户组</span>
<span class="token function">groups</span>
<span class="token comment"># 查看某用户所在的用户组</span>
<span class="token function">groups</span> txb
<span class="token comment"># 查看用户id、用户组、用户组id</span>
<span class="token function">id</span> txb

<span class="token comment"># 修改用户组名</span>
<span class="token function">groupmod</span> -n 新组名 旧组名

<span class="token comment"># 修改用户组 id</span>
<span class="token function">groupmod</span> -g 组id 组名

<span class="token comment"># 删除用户组</span>
<span class="token function">groupdel</span> 组名

<span class="token comment"># 将用户添加到某个用户组</span>
gpasswd -a 用户名 组名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><p>passwd:修改用户密码信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改用户密码</span>
<span class="token function">passwd</span> 

<span class="token comment"># 锁定用户密码，用户不能登陆</span>
<span class="token function">passwd</span> -l 用户名
<span class="token comment"># 解除锁定</span>
<span class="token function">passwd</span> -u 用户名

<span class="token comment"># 查看用户的密码是否被锁定</span>
<span class="token function">passwd</span> -S

<span class="token comment"># 删除用户密码，删除后用户不能登陆系统，重新设置密码后可以登陆系统</span>
passed -d 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/image-20221214121232905.png" class="" title="image-20221214121232905">

<p>查看系统在线人员信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<img src="/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/image-20221229170041437.png" class="" title="image-20221229170041437">

<p>强制用户下线：</p>
<p>任何用户都可让自己强制下线，强制其他用户下线需要 root 权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># pts/0 是用户使用的终端的名称</span>
<span class="token function">sudo</span> <span class="token function">pkill</span> -kill -t pts/2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>





<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客小技巧</title>
    <url>/2022/12/29/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h1><h2 id="视频插件"><a href="#视频插件" class="headerlink" title="视频插件"></a>视频插件</h2><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">hexo-tag-aplayer</a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 插入网络视频</span><br><span class="line">&#123;% dplayer &quot;url=https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/mp4/mp4_demo.mp4&quot; %&#125;</span><br><span class="line"></span><br><span class="line"># 插入acfun 视频</span><br><span class="line">&lt;iframe src=&quot;https://www.acfun.cn/player/ac12945786&quot; style=&quot;width:100%;height:500px;min-width:375px;min-height:200px&quot; id=&quot;ACPlayer-re&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line"># 插入 B 站视频</span><br><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=606228531&amp;bvid=BV1y84y1t7Y9&amp;cid=922973653&amp;page=1&quot; style=&quot;width:100%;height:500px;min-width:375px;min-height:200px&quot;scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<iframe src="https://www.acfun.cn/player/ac12945786" style="width:100%;height:500px;min-width:375px;min-height:200px" id="ACPlayer-re" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
<span id="more"></span>


<iframe src="//player.bilibili.com/player.html?aid=606228531&bvid=BV1y84y1t7Y9&cid=922973653&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>




<h2 id="其他好用的-hexo-插件"><a href="#其他好用的-hexo-插件" class="headerlink" title="其他好用的 hexo 插件"></a>其他好用的 hexo 插件</h2><ol>
<li><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">二次元看板娘：hexo-helper-live2d</a></li>
<li><a href="https://github.com/netcan/hexo-generator-index-pin-top">博客文章置顶：hexo-generator-index-pin-top</a></li>
</ol>
]]></content>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>bash练习</title>
    <url>/2022/12/29/bash%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<iframe src="//player.bilibili.com/player.html?aid=606228531&bvid=BV1y84y1t7Y9&cid=922973653&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>


<h2 id="1-统计文件的行数"><a href="#1-统计文件的行数" class="headerlink" title="1.统计文件的行数"></a><a href="https://www.nowcoder.com/practice/205ccba30b264ae697a78f425f276779?tpId=195&tqId=36211&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">1.统计文件的行数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="built_in">wc</span> -l nowcoder.txt | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2-1</span></span><br><span class="line"><span class="built_in">cat</span> nowcoder.txt | <span class="built_in">wc</span> -l</span><br><span class="line"><span class="comment"># 方法 2-2</span></span><br><span class="line"><span class="built_in">wc</span> -l &lt; nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3-1</span></span><br><span class="line"><span class="built_in">cat</span> -n nowcoder.txt | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="built_in">tail</span> -n 1</span><br><span class="line"><span class="comment"># 方法 3-2</span></span><br><span class="line"><span class="built_in">cat</span> -n nowcoder.txt | <span class="built_in">tail</span> -n 1 | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 4</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> p;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        i=$((i + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="2-打印文件的最后5行"><a href="#2-打印文件的最后5行" class="headerlink" title="2.打印文件的最后5行"></a><a href="https://www.nowcoder.com/practice/ff6f36d357d24ce5a0eb817a0ef85ee2?tpId=195&tqId=36212&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">2.打印文件的最后5行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">end=$(<span class="built_in">wc</span> -l &lt; nowcoder.txt)</span><br><span class="line">start=$(( end - <span class="number">5</span> + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$start</span> -lt 1 ]]; <span class="keyword">then</span></span><br><span class="line">	start=1</span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line">sed -n <span class="string">&quot;<span class="variable">$start</span>,<span class="variable">$end</span> p&quot;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">tail</span> -n 5 nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">tac</span> nowcoder.txt | <span class="built_in">head</span> -n 5 | <span class="built_in">tac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 4</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">	s=1</span></span><br><span class="line"><span class="string">&#125; &#123;</span></span><br><span class="line"><span class="string">	lines[s]=$0;</span></span><br><span class="line"><span class="string">	s++</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">    for(i=NR-4; i&lt;=NR; i++) &#123;</span></span><br><span class="line"><span class="string">        print(lines[i])</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 5</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">count_lines</span></span>() &#123;</span><br><span class="line">	number=0</span><br><span class="line">	filename=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> p;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            number=$((number + <span class="number">1</span>))</span><br><span class="line">    	<span class="keyword">done</span> &lt; <span class="variable">$filename</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 获取文件的行数</span></span><br><span class="line">end=`count_lines nowcoder.txt`</span><br><span class="line">start=$((end - <span class="number">5</span> + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$start</span> -lt 1 ]]; <span class="keyword">then</span></span><br><span class="line">	start=1</span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line">sed -n <span class="string">&quot;<span class="variable">$start</span>,<span class="variable">$end</span> p&quot;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="3-输出7的倍数"><a href="#3-输出7的倍数" class="headerlink" title="3.输出7的倍数"></a><a href="https://www.nowcoder.com/practice/8b85768394304511b0eb887244e51872?tpId=195&tqId=36213&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">3.输出7的倍数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">start=0</span><br><span class="line">end=500</span><br><span class="line">step=7</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$start</span> -lt <span class="variable">$end</span> ]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> !(( <span class="variable">$start</span> % <span class="variable">$step</span> )); <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="variable">$start</span></span><br><span class="line">         start=$(( start + <span class="number">1</span> ))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         start=$(( start + <span class="number">1</span> ))</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> &#123;0..500..7&#125;; <span class="keyword">do</span> </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;num&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> &#123;0..500&#125;;<span class="keyword">do</span></span><br><span class="line">   [[ <span class="string">&quot;((num%7))&quot;</span> -eq 0 ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;num&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="4-输出第5行的内容"><a href="#4-输出第5行的内容" class="headerlink" title="4.输出第5行的内容"></a><a href="https://www.nowcoder.com/practice/1d5978c6136d4252904757b4fa0c9296?tpId=195&tqId=36214&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">4.输出第5行的内容</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">sed -n <span class="string">&#x27;5p&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 2 </span></span><br><span class="line"><span class="built_in">head</span> -n 5 nowcoder.txt | <span class="built_in">tail</span> -n 1</span><br><span class="line"><span class="comment"># 方法 3 number row</span></span><br><span class="line">awk <span class="string">&#x27;&#123; if(NR==5) &#123;print($0)&#125; &#125;&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="5-打印空行的行号"><a href="#5-打印空行的行号" class="headerlink" title="5.打印空行的行号"></a><a href="https://www.nowcoder.com/practice/030fc368e42e44b8b1f8985a8d6ad255?tpId=195&tqId=36215&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">5.打印空行的行号</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -n <span class="string">&#x27;/^$/ &#123;print NR&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">sed -n <span class="string">&#x27;/^$/=&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> [[ <span class="variable">$line</span> =~ ^$ ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">	<span class="keyword">fi</span>		</span><br><span class="line">	i=$((i+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span>&lt;<span class="variable">$1</span></span><br></pre></td></tr></table></figure>

<h2 id="6-去掉空行"><a href="#6-去掉空行" class="headerlink" title="6.去掉空行"></a><a href="https://www.nowcoder.com/practice/0372acd5725d40669640fd25e9fb7b0f?tpId=195&tqId=36216&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">6.去掉空行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sed 只有加了 -i 参数才会修改原文件，否则只会输出修改后的内容，你也可以使用重定向符号（&gt;）将输出重定向到 1 个文件中</span></span><br><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">sed -n <span class="string">&#x27;/^$/!p&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">awk -n <span class="string">&#x27;&#123;if ($0 != &quot;&quot;) print $0&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">awk <span class="string">&#x27;!/^$/ &#123;print $0&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 4</span></span><br><span class="line">grep -v <span class="string">&#x27;^$&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="7-打印字母数小于8的单词"><a href="#7-打印字母数小于8的单词" class="headerlink" title="7.打印字母数小于8的单词"></a><a href="https://www.nowcoder.com/practice/bd5b5d4b93a04226a81afbabf0be797d?tpId=195&tqId=36217&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">7.打印字母数小于8的单词</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++) &#123; if(length($i) &lt; 8) &#123; print($i) &#125;&#125;&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">words=$(<span class="built_in">cat</span> nowcoder.txt)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;words[*]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;#i&#125;</span> -lt 8 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">cat</span> nowcoder.txt); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;#i&#125;</span> -lt 8 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="8-统计所有进程占用内存百分比的和"><a href="#8-统计所有进程占用内存百分比的和" class="headerlink" title="8.统计所有进程占用内存百分比的和"></a><a href="https://www.nowcoder.com/practice/fb24140bac154e5b99e44e0cee45dcaf?tpId=195&tqId=36218&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">8.统计所有进程占用内存百分比的和</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;&#125; &#123;sum += $6&#125; END &#123;print(sum)&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> p</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    arr=(<span class="variable">$p</span>)</span><br><span class="line">    ((<span class="built_in">sum</span> += arr[5]))</span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>

<h2 id="9-统计每个单词出现的个数"><a href="#9-统计每个单词出现的个数" class="headerlink" title="9.统计每个单词出现的个数"></a><a href="https://www.nowcoder.com/practice/ad921ccc0ba041ea93e9fb40bb0f2786?tpId=195&tqId=36219&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">9.统计每个单词出现的个数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++) a[$i]+=1&#125;END&#123;for (x in a) print x, a[x]&#125;&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="10-第二列是否有重复"><a href="#10-第二列是否有重复" class="headerlink" title="10.第二列是否有重复"></a><a href="https://www.nowcoder.com/practice/61b79ffe88964c7ab7b98ae16dd76492?tpId=195&tqId=36220&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">10.第二列是否有重复</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;a[$2]+=1&#125;END&#123;for(x in a)&#123;if(a[x]&gt;1) print a[x],x&#125;&#125;&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="11-转置文件的内容"><a href="#11-转置文件的内容" class="headerlink" title="11.转置文件的内容"></a><a href="https://www.nowcoder.com/practice/2240cd809c8f4d80b3479d7c95bb1e2e?tpId=195&tqId=36221&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">11.转置文件的内容</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">     for(i=1;i&lt;=NF;i++)&#123;</span></span><br><span class="line"><span class="string">       if(NR==1)&#123;</span></span><br><span class="line"><span class="string">         row[i] = $i;</span></span><br><span class="line"><span class="string">       &#125;else&#123;</span></span><br><span class="line"><span class="string">         row[i] = row[i]&quot; &quot;$i;</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string"> &#125;END&#123;</span></span><br><span class="line"><span class="string">   for(i=1;i&lt;=NF;i++)&#123;</span></span><br><span class="line"><span class="string">     print row[i]</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">declare</span> -a arr1</span><br><span class="line"><span class="built_in">declare</span> -a arr2</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    arr=(<span class="variable">$line</span>)</span><br><span class="line">    arr1[<span class="variable">$&#123;#arr1[@]&#125;</span>]=<span class="variable">$&#123;arr[0]&#125;</span></span><br><span class="line">    arr2[<span class="variable">$&#123;#arr2[@]&#125;</span>]=<span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr1[@]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr2[@]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="12-打印每一行出现的数字个数"><a href="#12-打印每一行出现的数字个数" class="headerlink" title="12.打印每一行出现的数字个数"></a><a href="https://www.nowcoder.com/practice/2d2a124f98054292aef71b453e705ca9?tpId=195&tqId=36222&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">12.打印每一行出现的数字个数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;for(i=1; i&lt;NF; i++) &#123;if($i &gt;= 1 &amp;&amp; $i &lt;= 5) sum+=1&#125;END &#123;print sum&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk -F <span class="string">&quot;[1,2,3,4,5]&quot;</span> <span class="string">&#x27;BEGIN&#123;sum=0&#125;&#123;print &quot;line&quot;NR \</span></span><br><span class="line"><span class="string">&quot;number:&quot;(NF-1);sum+=(NF-1)&#125;END&#123;print &quot;sum is &quot;sum&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">let</span> linecount=0</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">sum</span>=0</span><br><span class="line"><span class="built_in">let</span> count=0 </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> (( i=0; i&lt;<span class="variable">$&#123;#line&#125;</span>;i++ ))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[  <span class="variable">$&#123;line:$i:1&#125;</span> =~ [1-5] ]]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            (( count = count + 1 ))</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    linecount=$((<span class="variable">$linecount</span>+<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;line<span class="variable">$linecount</span> number:<span class="variable">$count</span>&quot;</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$count</span>))</span><br><span class="line">    count=0</span><br><span class="line"><span class="keyword">done</span>&lt;nowcoder.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum is <span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="13-去掉所有包含this的句子"><a href="#13-去掉所有包含this的句子" class="headerlink" title="13.去掉所有包含this的句子"></a><a href="https://www.nowcoder.com/practice/2c5a46ef755a4f099368f7588361a8af?tpId=195&tqId=36223&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">13.去掉所有包含this的句子</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;flag=0;</span></span><br><span class="line"><span class="string">    for(i=1; i&lt;=NF; i++) &#123;</span></span><br><span class="line"><span class="string">        if ($i == &quot;this&quot;)&#123;</span></span><br><span class="line"><span class="string">            flag=1;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">    if (flag != 1) &#123;</span></span><br><span class="line"><span class="string">        print $0;</span></span><br><span class="line"><span class="string">        flag=0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">grep -v this nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">sed <span class="string">&#x27;/this/d&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">awk <span class="string">&#x27;$0!~/this/ &#123;print $0&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 5</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">     if ($0 !~ /this/) &#123;</span></span><br><span class="line"><span class="string">         print $0</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="14-求平均值"><a href="#14-求平均值" class="headerlink" title="14.求平均值"></a><a href="https://www.nowcoder.com/practice/c44b98aeaf9942d3a61548bff306a7de?tpId=195&tqId=36224&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">14.求平均值</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if(NR==1) &#123;</span></span><br><span class="line"><span class="string">        N=$1</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">        sum+=$1</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    printf(&quot;%.3f&quot;, sum/N)</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2 bash xx.sh nowcoder.txt</span></span><br><span class="line"><span class="built_in">read</span> loop</span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span>((i=0; i &lt; <span class="variable">$loop</span>; ++i)); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> temp</span><br><span class="line">    (( <span class="built_in">sum</span> += temp))</span><br><span class="line">    ((++count))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;scale=3;<span class="variable">$sum</span>/<span class="variable">$count</span>&quot;</span> | bc</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="15-去掉不需要的单词"><a href="#15-去掉不需要的单词" class="headerlink" title="15.去掉不需要的单词"></a><a href="https://www.nowcoder.com/practice/838a3acde92c4805a22ac73ca04e503b?tpId=195&tqId=36225&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">15.去掉不需要的单词</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    for (i=1; i&lt;=NF; i++) &#123;</span></span><br><span class="line"><span class="string">        if ($i ~ /.*[bB]+.*/) &#123;</span></span><br><span class="line"><span class="string">            continue</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            print $i</span></span><br><span class="line"><span class="string">        &#125;   </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk <span class="string">&#x27;/!*[B|b]*/ &#123;print $0&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="16-判断输入的是否为IP地址"><a href="#16-判断输入的是否为IP地址" class="headerlink" title="16.判断输入的是否为IP地址"></a><a href="https://www.nowcoder.com/practice/ad7b6dbfab2a4267a9991110c57aa64f?tpId=195&tqId=39425&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">16.判断输入的是否为IP地址</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($0 ~ /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.)&#123;3&#125;(25[0-5]|2[0-4][0-9]|1[09][0-9]|[1-9][0-9]|[0-9])$/) &#123;</span></span><br><span class="line"><span class="string">        print(&quot;yes&quot;);</span></span><br><span class="line"><span class="string">    &#125; else if ($0 ~ /[[:digit:]].[[:digit:]].[[:digit:]].[[:digit:]]/)&#123;</span></span><br><span class="line"><span class="string">        print(&quot;no&quot;);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">        print(&quot;error&quot;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk -F <span class="string">&#x27;.&#x27;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if (NF == 4) &#123;</span></span><br><span class="line"><span class="string">        for (i = 1; i &lt; 5; i++) &#123;</span></span><br><span class="line"><span class="string">            if ($i &gt; 255 || $i &lt; 0) &#123;</span></span><br><span class="line"><span class="string">                print(&quot;no&quot;)</span></span><br><span class="line"><span class="string">                break</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (i == 5) &#123;</span></span><br><span class="line"><span class="string">            print(&quot;yes&quot;)</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            print(&quot;error&quot;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">IFS=<span class="string">&#x27;.&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    arr=(<span class="variable">$&#123;line&#125;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;#arr[*]&#125;</span> -ne 4 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;error\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> ((i = 0; i &lt; <span class="variable">$&#123;#arr[*]&#125;</span>; i++)); <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="variable">$&#123;arr[<span class="variable">$&#123;i&#125;</span>]&#125;</span> -gt 255 ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;no\n&quot;</span></span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">        [ <span class="variable">$i</span> == 4 ] &amp;&amp; <span class="built_in">printf</span> <span class="string">&quot;yes\n&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="17-将字段逆序输出文件的每行"><a href="#17-将字段逆序输出文件的每行" class="headerlink" title="17.将字段逆序输出文件的每行"></a><a href="https://www.nowcoder.com/practice/e33fff83fd384a21ba67f3104fb8d646?tpId=195&tqId=39426&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">17.将字段逆序输出文件的每行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    for(i = NF; i &gt;=1; i--) &#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%s&quot;, $i)</span></span><br><span class="line"><span class="string">        if (i != 1) &#123;</span></span><br><span class="line"><span class="string">            printf(&quot;:&quot;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    print &quot;&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="18-域名进行计数排序处理"><a href="#18-域名进行计数排序处理" class="headerlink" title="18.域名进行计数排序处理"></a><a href="https://www.nowcoder.com/practice/f076c0a3c1274cbe9d615e0f3fd965f1?tpId=195&tqId=39427&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">18.域名进行计数排序处理</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;/&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    arr[$3]++</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in arr) &#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%d %s\n&quot;, arr[i], i)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -r	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="19-打印等腰三角形"><a href="#19-打印等腰三角形" class="headerlink" title="19.打印等腰三角形"></a><a href="https://www.nowcoder.com/practice/1c55ca2b73a34e80bafd5978810dd8ea?tpId=195&tqId=39428&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">19.打印等腰三角形</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">    for(n = 1; n &lt;= 5; n++)&#123;</span></span><br><span class="line"><span class="string">        row = &quot;&quot;;</span></span><br><span class="line"><span class="string">        for(i = 1;i &lt;= 5 - n; i++)&#123;</span></span><br><span class="line"><span class="string">            row = row &quot; &quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        for(i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line"><span class="string">            row = row &quot;*&quot; &quot; &quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        print row</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="20-打印只有一个数字的行"><a href="#20-打印只有一个数字的行" class="headerlink" title="20.打印只有一个数字的行"></a><a href="https://www.nowcoder.com/practice/296c2785e64c46b7ae4c76bf190c2072?tpId=195&tqId=39429&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">20.打印只有一个数字的行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -F <span class="string">&quot;[0-9]&quot;</span> <span class="string">&#x27;&#123;if(NF==2) print $0&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">let</span> count=0</span><br><span class="line">    <span class="keyword">for</span> (( i = 0; i &lt; <span class="variable">$&#123;#line&#125;</span>; i++))</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            [[ <span class="variable">$&#123;line:i:1&#125;</span> =~ [0-9] ]] &amp;&amp; ((count++))</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> -eq 1 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$line</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">awk -F <span class="string">&quot;&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    for (i = 1; i &lt;= NF; i++) &#123;</span></span><br><span class="line"><span class="string">        if ($i ~ /[0-9]/) &#123;</span></span><br><span class="line"><span class="string">            count++</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (count == 1) &#123;</span></span><br><span class="line"><span class="string">        print($0)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    count = 0</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="21-格式化输出"><a href="#21-格式化输出" class="headerlink" title="21.格式化输出"></a><a href="https://www.nowcoder.com/practice/d91a06bfaff443928065e611b14a0e95?tpId=195&tqId=39430&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">21.格式化输出</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -F <span class="string">&quot;&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    k=0</span></span><br><span class="line"><span class="string">    for (i=NF; i&gt;0; i--) &#123;</span></span><br><span class="line"><span class="string">        k++</span></span><br><span class="line"><span class="string">        str = sprintf(&quot;%s%s&quot;, $i, str)</span></span><br><span class="line"><span class="string">        if (k%3 == 0 &amp;&amp; i&gt;=2 &amp;&amp; NF &gt; 3) &#123;</span></span><br><span class="line"><span class="string">            str = sprintf(&quot;,%s&quot;, str)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    print(str)</span></span><br><span class="line"><span class="string">    str=&quot;&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;FS=&quot;&quot;&#125;&#123;</span></span><br><span class="line"><span class="string">    for(i=1;i&lt;=NF;i++) &#123;</span></span><br><span class="line"><span class="string">    if((NF-i)%3==0 &amp;&amp; i!=NF) printf $i&quot;,&quot;;else printf $i&#125;;printf &quot;\n&quot;&#125;&#x27;</span> nowcoder.txt </span><br></pre></td></tr></table></figure>

<h2 id="22-格式化输出"><a href="#22-格式化输出" class="headerlink" title="22.格式化输出"></a><a href="https://www.nowcoder.com/practice/d91a06bfaff443928065e611b14a0e95?tpId=195&tqId=39430&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">22.格式化输出</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;res[$1] = (res[$1] == &quot;&quot; ? $2 : (res[$1] &quot;\n&quot; $2))</span></span><br><span class="line"><span class="string"> &#125;END&#123;</span></span><br><span class="line"><span class="string">     for(k in res)&#123;</span></span><br><span class="line"><span class="string">         print &quot;[&quot;k&quot;]&quot;</span></span><br><span class="line"><span class="string">         print res[k]</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        arr=(<span class="variable">$&#123;line/:/ &#125;</span>)</span><br><span class="line">		 map[<span class="string">&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$&#123;map[&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;]&#125;</span><span class="variable">$&#123;arr[1]&#125;</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line">k=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!map[*]&#125;</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        [ <span class="variable">$k</span> -eq 0 ] &amp;&amp; k=1 &amp;&amp; tmp=<span class="string">&quot;[<span class="variable">$i</span>]\n<span class="variable">$&#123;map[$i]&#125;</span>&quot;</span> &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;[<span class="variable">$i</span>]\n<span class="variable">$&#123;map[$i]&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$tmp</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">arr=(<span class="variable">$&#123;line/:/ &#125;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ map[<span class="string">&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;</span>] ]; <span class="keyword">then</span></span><br><span class="line">        map[<span class="string">&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;</span>]=<span class="variable">$&#123;map[&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;]&#125;</span><span class="string">&quot;\n&quot;</span><span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        map[<span class="string">&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;</span>]=<span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">declare</span> -a tmp</span><br><span class="line">tmp+=$(<span class="variable">$&#123;!map[*]&#125;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">sort</span> -n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">echo</span> <span class="variable">$&#123;!map[*]&#125;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">sort</span> -n); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;[<span class="variable">$i</span>]&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$&#123;map[$i]&#125;</span>\n&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="23-nginx日志分析1-IP统计"><a href="#23-nginx日志分析1-IP统计" class="headerlink" title="23.nginx日志分析1-IP统计"></a><a href="https://www.nowcoder.com/practice/3f2f45c74a1b415db17234f9cfd51469?tpId=195&tqId=39432&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">23.nginx日志分析1-IP统计</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if(substr($4, 2, 11) == &quot;23/Apr/2020&quot;) &#123;</span></span><br><span class="line"><span class="string">        res[$1]++;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;END &#123;</span></span><br><span class="line"><span class="string">    for(k in res) &#123;</span></span><br><span class="line"><span class="string">        print res[k] &quot; &quot; k</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -nr -k 1 -t <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($4 ~ /\[23\/Apr\/2020.*/) &#123;</span></span><br><span class="line"><span class="string">        res[$1]++;</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;END &#123;</span></span><br><span class="line"><span class="string">    for(k in res) &#123;</span></span><br><span class="line"><span class="string">        print res[k] &quot; &quot; k</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -nr -k 1 -t <span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="24-nginx日志分析2-统计某个时间段的IP"><a href="#24-nginx日志分析2-统计某个时间段的IP" class="headerlink" title="24.nginx日志分析2-统计某个时间段的IP"></a><a href="https://www.nowcoder.com/practice/ddbdd73859fa4fd48bbae7dd2e55f4b9?tpId=195&tqId=39433&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">24.nginx日志分析2-统计某个时间段的IP</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($0 ~ /\[23\/Apr\/2020:2[0-2]/) &#123;</span></span><br><span class="line"><span class="string">        a[$1]=1</span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    print (length(a))</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">grep <span class="string">&quot;23/Apr/2020&quot;</span> | <span class="built_in">cut</span> -c <span class="string">&#x27;-12&#x27;</span> | <span class="built_in">sort</span> -u | <span class="built_in">wc</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        a=(<span class="variable">$line</span>)</span><br><span class="line">        [[ <span class="variable">$&#123;a[3]&#125;</span> =~ 23/Apr/2020:2[0-2] ]] &amp;&amp; ((map[<span class="string">&quot;<span class="variable">$&#123;a[0]&#125;</span>&quot;</span>]=0))</span><br><span class="line">    <span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$&#123;#map[*]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="25-nginx日志分析3-统计访问3次以上的IP"><a href="#25-nginx日志分析3-统计访问3次以上的IP" class="headerlink" title="25.nginx日志分析3-统计访问3次以上的IP"></a><a href="https://www.nowcoder.com/practice/e1846855de79495fbb017b8ddf6ba969?tpId=195&tqId=39434&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">25.nginx日志分析3-统计访问3次以上的IP</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    map[$1]++</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in map) &#123;</span></span><br><span class="line"><span class="string">        if (map[i] &gt; 3) &#123;</span></span><br><span class="line"><span class="string">            printf (&quot;%d %s\n&quot;, map[i], i)</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt | <span class="built_in">sort</span> -rn -k1 -t <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    tmp=(<span class="variable">$line</span>)</span><br><span class="line">        ((map[<span class="variable">$tmp</span>[1]]+=1))</span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">declare</span> -a tmpArray</span><br><span class="line">tmp=0</span><br><span class="line">index=0</span><br><span class="line"><span class="keyword">for</span> (j=0; j&lt;=3;j++); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!map[*]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;map[i]&#125;</span> gt tmp ]; <span class="keyword">then</span></span><br><span class="line">            tmp=<span class="variable">$&#123;map[i]&#125;</span></span><br><span class="line">            index=i</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    tmpArray[index]=tmp</span><br><span class="line">    <span class="built_in">unset</span> map[index]</span><br><span class="line">    tmp=0</span><br><span class="line">    index=0</span><br><span class="line"><span class="keyword">done</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">sort</span> -rn -k1 tmp.txt</span><br></pre></td></tr></table></figure>

<h2 id="26-nginx日志分析4-查询某个IP的详细访问情况"><a href="#26-nginx日志分析4-查询某个IP的详细访问情况" class="headerlink" title="26.nginx日志分析4-查询某个IP的详细访问情况"></a><a href="https://www.nowcoder.com/practice/d0d81982176b4d5ebf032dbfb4a850d6?tpId=195&tqId=39435&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">26.nginx日志分析4-查询某个IP的详细访问情况</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($1 == &quot;192.168.1.22&quot;) &#123;</span></span><br><span class="line"><span class="string">        a[$7]++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in a)&#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%d %s\n&quot;,a[i], i)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>

<h2 id="27-nginx日志分析5-统计爬虫抓取404的次数"><a href="#27-nginx日志分析5-统计爬虫抓取404的次数" class="headerlink" title="27.nginx日志分析5-统计爬虫抓取404的次数"></a><a href="https://www.nowcoder.com/practice/3a3573822a854710a259d89066aad695?tpId=195&tqId=39436&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">27.nginx日志分析5-统计爬虫抓取404的次数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        a=(<span class="variable">$line</span>)</span><br><span class="line">        [ <span class="variable">$&#123;a[8]&#125;</span> == <span class="string">&quot;404&quot;</span> ] &amp;&amp; [ <span class="variable">$&#123;a[14]&#125;</span> == <span class="string">&#x27;+http://www.baidu.com/search/spider.html)&quot;&#x27;</span> ] &amp;&amp; ((b++))</span><br><span class="line">    <span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">printf</span> <span class="variable">$b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($9 == &quot;404&quot; &amp;&amp; $15 ~/baidu/) &#123;</span></span><br><span class="line"><span class="string">        k++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    print(k)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">grep <span class="string">&quot;baidu&quot;</span> |grep 404|<span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<h2 id="28-nginx日志分析6-统计每分钟的请求数"><a href="#28-nginx日志分析6-统计每分钟的请求数" class="headerlink" title="28.nginx日志分析6-统计每分钟的请求数"></a><a href="https://www.nowcoder.com/practice/9a37600d342c47ed9e9a0fd33c1c189e?tpId=195&tqId=39437&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">28.nginx日志分析6-统计每分钟的请求数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    a[sprintf(&quot;%s:%s&quot;, $2, $3)]++</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in a) &#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%d %s\n&quot;, a[i], i)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>

<h2 id="29-netstat练习1-查看各个状态的连接数"><a href="#29-netstat练习1-查看各个状态的连接数" class="headerlink" title="29.netstat练习1-查看各个状态的连接数"></a><a href="https://www.nowcoder.com/practice/f46a302d14e04b149bb50670f255293a?tpId=195&tqId=39438&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">29.netstat练习1-查看各个状态的连接数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($1 == &quot;tcp&quot;) &#123;</span></span><br><span class="line"><span class="string">        arr[$6]++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in arr) &#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%s %d\n&quot;, i, arr[i])</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -nrk2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        tmp=(<span class="variable">$line</span>)</span><br><span class="line">        [ <span class="variable">$&#123;tmp[0]&#125;</span> == <span class="string">&quot;tcp&quot;</span> ] &amp;&amp; ((map[<span class="string">&quot;<span class="variable">$&#123;tmp[5]&#125;</span>&quot;</span>]++))</span><br><span class="line">    <span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">InsertSort</span></span>()&#123;</span><br><span class="line">    tmp=()</span><br><span class="line">    <span class="keyword">for</span> ve <span class="keyword">in</span> <span class="variable">$&#123;map[*]&#125;</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            tmp[<span class="variable">$&#123;#tmp[*]&#125;</span>]=<span class="variable">$ve</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    q=<span class="variable">$&#123;#tmp[*]&#125;</span></span><br><span class="line">    <span class="keyword">for</span> ((i=0;i&lt;<span class="variable">$q</span>;i++))</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">for</span> ((j=<span class="variable">$i</span>+1;j&lt;<span class="variable">$q</span>;j++))</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                    <span class="keyword">if</span> [ <span class="variable">$&#123;tmp[$i]&#125;</span> -lt <span class="variable">$&#123;tmp[$j]&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">                        t=<span class="variable">$&#123;tmp[$i]&#125;</span></span><br><span class="line">                        tmp[<span class="variable">$i</span>]=<span class="variable">$&#123;tmp[$j]&#125;</span></span><br><span class="line">                        tmp[<span class="variable">$j</span>]=<span class="variable">$t</span></span><br><span class="line">                    <span class="keyword">fi</span></span><br><span class="line">                <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">InsertSort</span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;q; i++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> ve <span class="keyword">in</span> <span class="variable">$&#123;!map[*]&#125;</span></span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> [ <span class="variable">$&#123;tmp[$i]&#125;</span> -eq <span class="variable">$&#123;map[$ve]&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">                    <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$ve</span> <span class="variable">$&#123;map[$ve]&#125;</span>\n&quot;</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="30-netstat练习2-查看和3306端口建立的连接"><a href="#30-netstat练习2-查看和3306端口建立的连接" class="headerlink" title="30.netstat练习2-查看和3306端口建立的连接"></a><a href="https://www.nowcoder.com/practice/534b95941ffb495b9ba57fbfc3cd723a?tpId=195&tqId=39439&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">30.netstat练习2-查看和3306端口建立的连接</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">if($0 ~&quot;3306&quot;)&#123;</span></span><br><span class="line"><span class="string">    if($6==&quot;ESTABLISHED&quot;)&#123;</span></span><br><span class="line"><span class="string">        a[$5]++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">for(i in a)&#123;</span></span><br><span class="line"><span class="string">    print a[i],i</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | sed <span class="string">&#x27;s/:3306//&#x27;</span> | <span class="built_in">sort</span> -nr -k1</span><br></pre></td></tr></table></figure>

<h2 id="31-netstat练习3-输出每个IP的连接数"><a href="#31-netstat练习3-输出每个IP的连接数" class="headerlink" title="31.netstat练习3-输出每个IP的连接数"></a><a href="https://www.nowcoder.com/practice/f601fc4f35b5453ba661531051b6ce69?tpId=195&tqId=39440&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">31.netstat练习3-输出每个IP的连接数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($1 == &quot;tcp&quot;) &#123;</span></span><br><span class="line"><span class="string">        split($5, a, &quot;:&quot;)</span></span><br><span class="line"><span class="string">        t[a[1]]++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in t)&#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%s %d\n&quot;, i, t[i])</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -nrk2</span><br></pre></td></tr></table></figure>

<h2 id="32-netstat练习4-输出和3306端口建立连接总的各个状态的数目"><a href="#32-netstat练习4-输出和3306端口建立连接总的各个状态的数目" class="headerlink" title="32.netstat练习4-输出和3306端口建立连接总的各个状态的数目"></a><a href="https://www.nowcoder.com/practice/5ce76fd1513d4eacae68ad3b2aca1fbb?tpId=195&tqId=39441&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">32.netstat练习4-输出和3306端口建立连接总的各个状态的数目</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($1 == &quot;tcp&quot; &amp;&amp; $5 ~ /3306/) &#123;</span></span><br><span class="line"><span class="string">        if ($6 == &quot;ESTABLISHED&quot;) &#123;</span></span><br><span class="line"><span class="string">            es++</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        ans++</span></span><br><span class="line"><span class="string">        arr[$5]=0</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    printf(&quot;TOTAL_IP %d\nESTABLISHED %d\nTOTAL_LINK %d&quot;, length(arr), es, ans)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="33-业务分析-提取值"><a href="#33-业务分析-提取值" class="headerlink" title="33.业务分析-提取值"></a><a href="https://www.nowcoder.com/practice/f144e52a3e054426a4d265ff38399748?tpId=195&tqId=39442&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">33.业务分析-提取值</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($0 ~ /Server version/) &#123;</span></span><br><span class="line"><span class="string">        sub(/.*:/, &quot;&quot;, $0)</span></span><br><span class="line"><span class="string">        printf(&quot;serverVersion:%s\n&quot;, $0)</span></span><br><span class="line"><span class="string">        next</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if ($0 ~ /Server number/) &#123;</span></span><br><span class="line"><span class="string">        sub(/.*:/, &quot;&quot;, $0)</span></span><br><span class="line"><span class="string">        printf(&quot;serverName:%s\n&quot;, $0)</span></span><br><span class="line"><span class="string">        next</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if ($0 ~ /OS Version/) &#123;</span></span><br><span class="line"><span class="string">        sub(/.+Name:/, &quot;&quot;, $0)</span></span><br><span class="line"><span class="string">        t=$0</span></span><br><span class="line"><span class="string">        sub(/,.*/, &quot;&quot;, $0)</span></span><br><span class="line"><span class="string">        sub(/.*:/, &quot;&quot;, t)</span></span><br><span class="line"><span class="string">        printf(&quot;osName:%s\nosVersion:%s&quot;, $0, t)</span></span><br><span class="line"><span class="string">        exit</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="34-ps分析-统计VSZ-RSS各自总和"><a href="#34-ps分析-统计VSZ-RSS各自总和" class="headerlink" title="34.ps分析-统计VSZ,RSS各自总和"></a><a href="https://www.nowcoder.com/practice/7094b5f96e1a4c998ce01baf407beee6?tpId=195&tqId=39443&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">34.ps分析-统计VSZ,RSS各自总和</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    v += $5</span></span><br><span class="line"><span class="string">    r += $6</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    printf(&quot;MEM TOTAL\nVSZ_SUM:%0.1fM,RSS_SUM:%0.3fM&quot;, v/1024, r/1024)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
</search>
