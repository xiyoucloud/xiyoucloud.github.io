<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GEO和TCGA数据下载慢和下载中断的解决办法</title>
    <url>/2022/12/29/GEO%E5%92%8CTCGA%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%85%A2%E5%92%8C%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>很多同学下载GEO数据库的数据和TCGA的数据网速特别的慢，或者总是中断，生信之路的第一个跟头就摔在了数据下载</p>
<p>下面给大家分享一个下载神器——西柚云代理下载！</p>
<p><a href="https://links.jianshu.com/go?to=https://fileproxy.xiyoucloud.net/%23/">https://fileproxy.xiyoucloud.net/#/</a></p>
<span id="more"></span>

<p>首先在GEO数据库上面找到您所需要的数据，然后页面往下拉</p>
<p>找到Series Matrix File(s)，点进去</p>
<img src="/2022/12/29/GEO%E5%92%8CTCGA%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%85%A2%E5%92%8C%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/21c9e84a1f3f4aaf9137fbf25c803746.png" class="" title="img">



<p> 找到您要下载的文件，右键-复制链接地址</p>
<img src="/2022/12/29/GEO%E5%92%8CTCGA%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%85%A2%E5%92%8C%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/bd9232fab68b4e598afe3e0fa95a4403.png" class="" title="img">

<p>打开我们的代理下载网站</p>
<p><strong><a href="https://fileproxy.xiyoucloud.net/#/">https://fileproxy.xiyoucloud.net/#/</a></strong></p>
<p>输入您用于接收下载链接的邮箱</p>
<p>把上一步复制的链接粘贴到下载地址</p>
<p>点提交信息</p>
<img src="/2022/12/29/GEO%E5%92%8CTCGA%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%85%A2%E5%92%8C%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/098a89d29f85418fac593b41e14f767e.png" class="" title="img">

<p>下载完成后会自动发送到预留邮箱里面</p>
<p>tar数据直接复制粘贴进去会提示url非法，这个是因为还需要进一步提取下载链接才能下载，具体方法可以参考网站里面的教程</p>
<p>TCGA的使用教程可以看网站里面的教程，篇幅有限就不一一列举了。</p>
<p><strong>最重要的是！！！这个代理下载服务是完全免费的！！！</strong></p>
]]></content>
      <tags>
        <tag>代理下载</tag>
      </tags>
  </entry>
  <entry>
    <title>bash练习</title>
    <url>/2022/12/29/bash%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<iframe src="//player.bilibili.com/player.html?aid=606228531&bvid=BV1y84y1t7Y9&cid=922973653&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>


<h2 id="1-统计文件的行数"><a href="#1-统计文件的行数" class="headerlink" title="1.统计文件的行数"></a><a href="https://www.nowcoder.com/practice/205ccba30b264ae697a78f425f276779?tpId=195&tqId=36211&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">1.统计文件的行数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="built_in">wc</span> -l nowcoder.txt | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2-1</span></span><br><span class="line"><span class="built_in">cat</span> nowcoder.txt | <span class="built_in">wc</span> -l</span><br><span class="line"><span class="comment"># 方法 2-2</span></span><br><span class="line"><span class="built_in">wc</span> -l &lt; nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3-1</span></span><br><span class="line"><span class="built_in">cat</span> -n nowcoder.txt | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="built_in">tail</span> -n 1</span><br><span class="line"><span class="comment"># 方法 3-2</span></span><br><span class="line"><span class="built_in">cat</span> -n nowcoder.txt | <span class="built_in">tail</span> -n 1 | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 4</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> p;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        i=$((i + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="2-打印文件的最后5行"><a href="#2-打印文件的最后5行" class="headerlink" title="2.打印文件的最后5行"></a><a href="https://www.nowcoder.com/practice/ff6f36d357d24ce5a0eb817a0ef85ee2?tpId=195&tqId=36212&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">2.打印文件的最后5行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">end=$(<span class="built_in">wc</span> -l &lt; nowcoder.txt)</span><br><span class="line">start=$(( end - <span class="number">5</span> + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$start</span> -lt 1 ]]; <span class="keyword">then</span></span><br><span class="line">	start=1</span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line">sed -n <span class="string">&quot;<span class="variable">$start</span>,<span class="variable">$end</span> p&quot;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">tail</span> -n 5 nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">tac</span> nowcoder.txt | <span class="built_in">head</span> -n 5 | <span class="built_in">tac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 4</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">	s=1</span></span><br><span class="line"><span class="string">&#125; &#123;</span></span><br><span class="line"><span class="string">	lines[s]=$0;</span></span><br><span class="line"><span class="string">	s++</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">    for(i=NR-4; i&lt;=NR; i++) &#123;</span></span><br><span class="line"><span class="string">        print(lines[i])</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 5</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">count_lines</span></span>() &#123;</span><br><span class="line">	number=0</span><br><span class="line">	filename=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> p;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            number=$((number + <span class="number">1</span>))</span><br><span class="line">    	<span class="keyword">done</span> &lt; <span class="variable">$filename</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 获取文件的行数</span></span><br><span class="line">end=`count_lines nowcoder.txt`</span><br><span class="line">start=$((end - <span class="number">5</span> + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$start</span> -lt 1 ]]; <span class="keyword">then</span></span><br><span class="line">	start=1</span><br><span class="line"><span class="keyword">fi</span>	</span><br><span class="line">sed -n <span class="string">&quot;<span class="variable">$start</span>,<span class="variable">$end</span> p&quot;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="3-输出7的倍数"><a href="#3-输出7的倍数" class="headerlink" title="3.输出7的倍数"></a><a href="https://www.nowcoder.com/practice/8b85768394304511b0eb887244e51872?tpId=195&tqId=36213&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">3.输出7的倍数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">start=0</span><br><span class="line">end=500</span><br><span class="line">step=7</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$start</span> -lt <span class="variable">$end</span> ]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> !(( <span class="variable">$start</span> % <span class="variable">$step</span> )); <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="variable">$start</span></span><br><span class="line">         start=$(( start + <span class="number">1</span> ))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         start=$(( start + <span class="number">1</span> ))</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> &#123;0..500..7&#125;; <span class="keyword">do</span> </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;num&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> &#123;0..500&#125;;<span class="keyword">do</span></span><br><span class="line">   [[ <span class="string">&quot;((num%7))&quot;</span> -eq 0 ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;num&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="4-输出第5行的内容"><a href="#4-输出第5行的内容" class="headerlink" title="4.输出第5行的内容"></a><a href="https://www.nowcoder.com/practice/1d5978c6136d4252904757b4fa0c9296?tpId=195&tqId=36214&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">4.输出第5行的内容</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">sed -n <span class="string">&#x27;5p&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 2 </span></span><br><span class="line"><span class="built_in">head</span> -n 5 nowcoder.txt | <span class="built_in">tail</span> -n 1</span><br><span class="line"><span class="comment"># 方法 3 number row</span></span><br><span class="line">awk <span class="string">&#x27;&#123; if(NR==5) &#123;print($0)&#125; &#125;&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="5-打印空行的行号"><a href="#5-打印空行的行号" class="headerlink" title="5.打印空行的行号"></a><a href="https://www.nowcoder.com/practice/030fc368e42e44b8b1f8985a8d6ad255?tpId=195&tqId=36215&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">5.打印空行的行号</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -n <span class="string">&#x27;/^$/ &#123;print NR&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">sed -n <span class="string">&#x27;/^$/=&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> [[ <span class="variable">$line</span> =~ ^$ ]]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">	<span class="keyword">fi</span>		</span><br><span class="line">	i=$((i+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span>&lt;<span class="variable">$1</span></span><br></pre></td></tr></table></figure>

<h2 id="6-去掉空行"><a href="#6-去掉空行" class="headerlink" title="6.去掉空行"></a><a href="https://www.nowcoder.com/practice/0372acd5725d40669640fd25e9fb7b0f?tpId=195&tqId=36216&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">6.去掉空行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sed 只有加了 -i 参数才会修改原文件，否则只会输出修改后的内容，你也可以使用重定向符号（&gt;）将输出重定向到 1 个文件中</span></span><br><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">sed -n <span class="string">&#x27;/^$/!p&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">awk -n <span class="string">&#x27;&#123;if ($0 != &quot;&quot;) print $0&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">awk <span class="string">&#x27;!/^$/ &#123;print $0&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 4</span></span><br><span class="line">grep -v <span class="string">&#x27;^$&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="7-打印字母数小于8的单词"><a href="#7-打印字母数小于8的单词" class="headerlink" title="7.打印字母数小于8的单词"></a><a href="https://www.nowcoder.com/practice/bd5b5d4b93a04226a81afbabf0be797d?tpId=195&tqId=36217&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">7.打印字母数小于8的单词</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++) &#123; if(length($i) &lt; 8) &#123; print($i) &#125;&#125;&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">words=$(<span class="built_in">cat</span> nowcoder.txt)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;words[*]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;#i&#125;</span> -lt 8 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">cat</span> nowcoder.txt); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;#i&#125;</span> -lt 8 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;i&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="8-统计所有进程占用内存百分比的和"><a href="#8-统计所有进程占用内存百分比的和" class="headerlink" title="8.统计所有进程占用内存百分比的和"></a><a href="https://www.nowcoder.com/practice/fb24140bac154e5b99e44e0cee45dcaf?tpId=195&tqId=36218&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">8.统计所有进程占用内存百分比的和</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;&#125; &#123;sum += $6&#125; END &#123;print(sum)&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> p</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    arr=(<span class="variable">$p</span>)</span><br><span class="line">    ((<span class="built_in">sum</span> += arr[5]))</span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>

<h2 id="9-统计每个单词出现的个数"><a href="#9-统计每个单词出现的个数" class="headerlink" title="9.统计每个单词出现的个数"></a><a href="https://www.nowcoder.com/practice/ad921ccc0ba041ea93e9fb40bb0f2786?tpId=195&tqId=36219&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">9.统计每个单词出现的个数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++) a[$i]+=1&#125;END&#123;for (x in a) print x, a[x]&#125;&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="10-第二列是否有重复"><a href="#10-第二列是否有重复" class="headerlink" title="10.第二列是否有重复"></a><a href="https://www.nowcoder.com/practice/61b79ffe88964c7ab7b98ae16dd76492?tpId=195&tqId=36220&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">10.第二列是否有重复</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;a[$2]+=1&#125;END&#123;for(x in a)&#123;if(a[x]&gt;1) print a[x],x&#125;&#125;&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="11-转置文件的内容"><a href="#11-转置文件的内容" class="headerlink" title="11.转置文件的内容"></a><a href="https://www.nowcoder.com/practice/2240cd809c8f4d80b3479d7c95bb1e2e?tpId=195&tqId=36221&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">11.转置文件的内容</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">     for(i=1;i&lt;=NF;i++)&#123;</span></span><br><span class="line"><span class="string">       if(NR==1)&#123;</span></span><br><span class="line"><span class="string">         row[i] = $i;</span></span><br><span class="line"><span class="string">       &#125;else&#123;</span></span><br><span class="line"><span class="string">         row[i] = row[i]&quot; &quot;$i;</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string"> &#125;END&#123;</span></span><br><span class="line"><span class="string">   for(i=1;i&lt;=NF;i++)&#123;</span></span><br><span class="line"><span class="string">     print row[i]</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">declare</span> -a arr1</span><br><span class="line"><span class="built_in">declare</span> -a arr2</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    arr=(<span class="variable">$line</span>)</span><br><span class="line">    arr1[<span class="variable">$&#123;#arr1[@]&#125;</span>]=<span class="variable">$&#123;arr[0]&#125;</span></span><br><span class="line">    arr2[<span class="variable">$&#123;#arr2[@]&#125;</span>]=<span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr1[@]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr2[@]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="12-打印每一行出现的数字个数"><a href="#12-打印每一行出现的数字个数" class="headerlink" title="12.打印每一行出现的数字个数"></a><a href="https://www.nowcoder.com/practice/2d2a124f98054292aef71b453e705ca9?tpId=195&tqId=36222&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%25E7%25AF%2587&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">12.打印每一行出现的数字个数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;for(i=1; i&lt;NF; i++) &#123;if($i &gt;= 1 &amp;&amp; $i &lt;= 5) sum+=1&#125;END &#123;print sum&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk -F <span class="string">&quot;[1,2,3,4,5]&quot;</span> <span class="string">&#x27;BEGIN&#123;sum=0&#125;&#123;print &quot;line&quot;NR \</span></span><br><span class="line"><span class="string">&quot;number:&quot;(NF-1);sum+=(NF-1)&#125;END&#123;print &quot;sum is &quot;sum&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">let</span> linecount=0</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">sum</span>=0</span><br><span class="line"><span class="built_in">let</span> count=0 </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> (( i=0; i&lt;<span class="variable">$&#123;#line&#125;</span>;i++ ))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[  <span class="variable">$&#123;line:$i:1&#125;</span> =~ [1-5] ]]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            (( count = count + 1 ))</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    linecount=$((<span class="variable">$linecount</span>+<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;line<span class="variable">$linecount</span> number:<span class="variable">$count</span>&quot;</span></span><br><span class="line">    <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$count</span>))</span><br><span class="line">    count=0</span><br><span class="line"><span class="keyword">done</span>&lt;nowcoder.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum is <span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="13-去掉所有包含this的句子"><a href="#13-去掉所有包含this的句子" class="headerlink" title="13.去掉所有包含this的句子"></a><a href="https://www.nowcoder.com/practice/2c5a46ef755a4f099368f7588361a8af?tpId=195&tqId=36223&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">13.去掉所有包含this的句子</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;flag=0;</span></span><br><span class="line"><span class="string">    for(i=1; i&lt;=NF; i++) &#123;</span></span><br><span class="line"><span class="string">        if ($i == &quot;this&quot;)&#123;</span></span><br><span class="line"><span class="string">            flag=1;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">    if (flag != 1) &#123;</span></span><br><span class="line"><span class="string">        print $0;</span></span><br><span class="line"><span class="string">        flag=0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">grep -v this nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">sed <span class="string">&#x27;/this/d&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">awk <span class="string">&#x27;$0!~/this/ &#123;print $0&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 5</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">     if ($0 !~ /this/) &#123;</span></span><br><span class="line"><span class="string">         print $0</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="14-求平均值"><a href="#14-求平均值" class="headerlink" title="14.求平均值"></a><a href="https://www.nowcoder.com/practice/c44b98aeaf9942d3a61548bff306a7de?tpId=195&tqId=36224&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">14.求平均值</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if(NR==1) &#123;</span></span><br><span class="line"><span class="string">        N=$1</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">        sum+=$1</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    printf(&quot;%.3f&quot;, sum/N)</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2 bash xx.sh nowcoder.txt</span></span><br><span class="line"><span class="built_in">read</span> loop</span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span>((i=0; i &lt; <span class="variable">$loop</span>; ++i)); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> temp</span><br><span class="line">    (( <span class="built_in">sum</span> += temp))</span><br><span class="line">    ((++count))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;scale=3;<span class="variable">$sum</span>/<span class="variable">$count</span>&quot;</span> | bc</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="15-去掉不需要的单词"><a href="#15-去掉不需要的单词" class="headerlink" title="15.去掉不需要的单词"></a><a href="https://www.nowcoder.com/practice/838a3acde92c4805a22ac73ca04e503b?tpId=195&tqId=36225&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">15.去掉不需要的单词</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    for (i=1; i&lt;=NF; i++) &#123;</span></span><br><span class="line"><span class="string">        if ($i ~ /.*[bB]+.*/) &#123;</span></span><br><span class="line"><span class="string">            continue</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            print $i</span></span><br><span class="line"><span class="string">        &#125;   </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk <span class="string">&#x27;/!*[B|b]*/ &#123;print $0&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="16-判断输入的是否为IP地址"><a href="#16-判断输入的是否为IP地址" class="headerlink" title="16.判断输入的是否为IP地址"></a><a href="https://www.nowcoder.com/practice/ad7b6dbfab2a4267a9991110c57aa64f?tpId=195&tqId=39425&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">16.判断输入的是否为IP地址</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($0 ~ /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.)&#123;3&#125;(25[0-5]|2[0-4][0-9]|1[09][0-9]|[1-9][0-9]|[0-9])$/) &#123;</span></span><br><span class="line"><span class="string">        print(&quot;yes&quot;);</span></span><br><span class="line"><span class="string">    &#125; else if ($0 ~ /[[:digit:]].[[:digit:]].[[:digit:]].[[:digit:]]/)&#123;</span></span><br><span class="line"><span class="string">        print(&quot;no&quot;);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">        print(&quot;error&quot;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk -F <span class="string">&#x27;.&#x27;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if (NF == 4) &#123;</span></span><br><span class="line"><span class="string">        for (i = 1; i &lt; 5; i++) &#123;</span></span><br><span class="line"><span class="string">            if ($i &gt; 255 || $i &lt; 0) &#123;</span></span><br><span class="line"><span class="string">                print(&quot;no&quot;)</span></span><br><span class="line"><span class="string">                break</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (i == 5) &#123;</span></span><br><span class="line"><span class="string">            print(&quot;yes&quot;)</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            print(&quot;error&quot;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">IFS=<span class="string">&#x27;.&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    arr=(<span class="variable">$&#123;line&#125;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;#arr[*]&#125;</span> -ne 4 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;error\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> ((i = 0; i &lt; <span class="variable">$&#123;#arr[*]&#125;</span>; i++)); <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="variable">$&#123;arr[<span class="variable">$&#123;i&#125;</span>]&#125;</span> -gt 255 ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;no\n&quot;</span></span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">        [ <span class="variable">$i</span> == 4 ] &amp;&amp; <span class="built_in">printf</span> <span class="string">&quot;yes\n&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="17-将字段逆序输出文件的每行"><a href="#17-将字段逆序输出文件的每行" class="headerlink" title="17.将字段逆序输出文件的每行"></a><a href="https://www.nowcoder.com/practice/e33fff83fd384a21ba67f3104fb8d646?tpId=195&tqId=39426&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">17.将字段逆序输出文件的每行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    for(i = NF; i &gt;=1; i--) &#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%s&quot;, $i)</span></span><br><span class="line"><span class="string">        if (i != 1) &#123;</span></span><br><span class="line"><span class="string">            printf(&quot;:&quot;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    print &quot;&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt</span><br></pre></td></tr></table></figure>

<h2 id="18-域名进行计数排序处理"><a href="#18-域名进行计数排序处理" class="headerlink" title="18.域名进行计数排序处理"></a><a href="https://www.nowcoder.com/practice/f076c0a3c1274cbe9d615e0f3fd965f1?tpId=195&tqId=39427&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">18.域名进行计数排序处理</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;/&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    arr[$3]++</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in arr) &#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%d %s\n&quot;, arr[i], i)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -r	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="19-打印等腰三角形"><a href="#19-打印等腰三角形" class="headerlink" title="19.打印等腰三角形"></a><a href="https://www.nowcoder.com/practice/1c55ca2b73a34e80bafd5978810dd8ea?tpId=195&tqId=39428&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">19.打印等腰三角形</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">    for(n = 1; n &lt;= 5; n++)&#123;</span></span><br><span class="line"><span class="string">        row = &quot;&quot;;</span></span><br><span class="line"><span class="string">        for(i = 1;i &lt;= 5 - n; i++)&#123;</span></span><br><span class="line"><span class="string">            row = row &quot; &quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        for(i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line"><span class="string">            row = row &quot;*&quot; &quot; &quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        print row</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="20-打印只有一个数字的行"><a href="#20-打印只有一个数字的行" class="headerlink" title="20.打印只有一个数字的行"></a><a href="https://www.nowcoder.com/practice/296c2785e64c46b7ae4c76bf190c2072?tpId=195&tqId=39429&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">20.打印只有一个数字的行</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -F <span class="string">&quot;[0-9]&quot;</span> <span class="string">&#x27;&#123;if(NF==2) print $0&#125;&#x27;</span> nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">let</span> count=0</span><br><span class="line">    <span class="keyword">for</span> (( i = 0; i &lt; <span class="variable">$&#123;#line&#125;</span>; i++))</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            [[ <span class="variable">$&#123;line:i:1&#125;</span> =~ [0-9] ]] &amp;&amp; ((count++))</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> -eq 1 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$line</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">awk -F <span class="string">&quot;&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    for (i = 1; i &lt;= NF; i++) &#123;</span></span><br><span class="line"><span class="string">        if ($i ~ /[0-9]/) &#123;</span></span><br><span class="line"><span class="string">            count++</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (count == 1) &#123;</span></span><br><span class="line"><span class="string">        print($0)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    count = 0</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="21-格式化输出"><a href="#21-格式化输出" class="headerlink" title="21.格式化输出"></a><a href="https://www.nowcoder.com/practice/d91a06bfaff443928065e611b14a0e95?tpId=195&tqId=39430&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">21.格式化输出</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -F <span class="string">&quot;&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    k=0</span></span><br><span class="line"><span class="string">    for (i=NF; i&gt;0; i--) &#123;</span></span><br><span class="line"><span class="string">        k++</span></span><br><span class="line"><span class="string">        str = sprintf(&quot;%s%s&quot;, $i, str)</span></span><br><span class="line"><span class="string">        if (k%3 == 0 &amp;&amp; i&gt;=2 &amp;&amp; NF &gt; 3) &#123;</span></span><br><span class="line"><span class="string">            str = sprintf(&quot;,%s&quot;, str)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    print(str)</span></span><br><span class="line"><span class="string">    str=&quot;&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;FS=&quot;&quot;&#125;&#123;</span></span><br><span class="line"><span class="string">    for(i=1;i&lt;=NF;i++) &#123;</span></span><br><span class="line"><span class="string">    if((NF-i)%3==0 &amp;&amp; i!=NF) printf $i&quot;,&quot;;else printf $i&#125;;printf &quot;\n&quot;&#125;&#x27;</span> nowcoder.txt </span><br></pre></td></tr></table></figure>

<h2 id="22-格式化输出"><a href="#22-格式化输出" class="headerlink" title="22.格式化输出"></a><a href="https://www.nowcoder.com/practice/d91a06bfaff443928065e611b14a0e95?tpId=195&tqId=39430&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">22.格式化输出</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;res[$1] = (res[$1] == &quot;&quot; ? $2 : (res[$1] &quot;\n&quot; $2))</span></span><br><span class="line"><span class="string"> &#125;END&#123;</span></span><br><span class="line"><span class="string">     for(k in res)&#123;</span></span><br><span class="line"><span class="string">         print &quot;[&quot;k&quot;]&quot;</span></span><br><span class="line"><span class="string">         print res[k]</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        arr=(<span class="variable">$&#123;line/:/ &#125;</span>)</span><br><span class="line">		 map[<span class="string">&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$&#123;map[&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;]&#125;</span><span class="variable">$&#123;arr[1]&#125;</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line">k=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!map[*]&#125;</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        [ <span class="variable">$k</span> -eq 0 ] &amp;&amp; k=1 &amp;&amp; tmp=<span class="string">&quot;[<span class="variable">$i</span>]\n<span class="variable">$&#123;map[$i]&#125;</span>&quot;</span> &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;[<span class="variable">$i</span>]\n<span class="variable">$&#123;map[$i]&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$tmp</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">arr=(<span class="variable">$&#123;line/:/ &#125;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ map[<span class="string">&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;</span>] ]; <span class="keyword">then</span></span><br><span class="line">        map[<span class="string">&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;</span>]=<span class="variable">$&#123;map[&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;]&#125;</span><span class="string">&quot;\n&quot;</span><span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        map[<span class="string">&quot;<span class="variable">$&#123;arr[0]&#125;</span>&quot;</span>]=<span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">declare</span> -a tmp</span><br><span class="line">tmp+=$(<span class="variable">$&#123;!map[*]&#125;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">sort</span> -n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">echo</span> <span class="variable">$&#123;!map[*]&#125;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">sort</span> -n); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;[<span class="variable">$i</span>]&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$&#123;map[$i]&#125;</span>\n&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="23-nginx日志分析1-IP统计"><a href="#23-nginx日志分析1-IP统计" class="headerlink" title="23.nginx日志分析1-IP统计"></a><a href="https://www.nowcoder.com/practice/3f2f45c74a1b415db17234f9cfd51469?tpId=195&tqId=39432&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">23.nginx日志分析1-IP统计</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if(substr($4, 2, 11) == &quot;23/Apr/2020&quot;) &#123;</span></span><br><span class="line"><span class="string">        res[$1]++;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;END &#123;</span></span><br><span class="line"><span class="string">    for(k in res) &#123;</span></span><br><span class="line"><span class="string">        print res[k] &quot; &quot; k</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -nr -k 1 -t <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($4 ~ /\[23\/Apr\/2020.*/) &#123;</span></span><br><span class="line"><span class="string">        res[$1]++;</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;END &#123;</span></span><br><span class="line"><span class="string">    for(k in res) &#123;</span></span><br><span class="line"><span class="string">        print res[k] &quot; &quot; k</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -nr -k 1 -t <span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="24-nginx日志分析2-统计某个时间段的IP"><a href="#24-nginx日志分析2-统计某个时间段的IP" class="headerlink" title="24.nginx日志分析2-统计某个时间段的IP"></a><a href="https://www.nowcoder.com/practice/ddbdd73859fa4fd48bbae7dd2e55f4b9?tpId=195&tqId=39433&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">24.nginx日志分析2-统计某个时间段的IP</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($0 ~ /\[23\/Apr\/2020:2[0-2]/) &#123;</span></span><br><span class="line"><span class="string">        a[$1]=1</span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    print (length(a))</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">grep <span class="string">&quot;23/Apr/2020&quot;</span> | <span class="built_in">cut</span> -c <span class="string">&#x27;-12&#x27;</span> | <span class="built_in">sort</span> -u | <span class="built_in">wc</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        a=(<span class="variable">$line</span>)</span><br><span class="line">        [[ <span class="variable">$&#123;a[3]&#125;</span> =~ 23/Apr/2020:2[0-2] ]] &amp;&amp; ((map[<span class="string">&quot;<span class="variable">$&#123;a[0]&#125;</span>&quot;</span>]=0))</span><br><span class="line">    <span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$&#123;#map[*]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="25-nginx日志分析3-统计访问3次以上的IP"><a href="#25-nginx日志分析3-统计访问3次以上的IP" class="headerlink" title="25.nginx日志分析3-统计访问3次以上的IP"></a><a href="https://www.nowcoder.com/practice/e1846855de79495fbb017b8ddf6ba969?tpId=195&tqId=39434&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">25.nginx日志分析3-统计访问3次以上的IP</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    map[$1]++</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in map) &#123;</span></span><br><span class="line"><span class="string">        if (map[i] &gt; 3) &#123;</span></span><br><span class="line"><span class="string">            printf (&quot;%d %s\n&quot;, map[i], i)</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> nowcoder.txt | <span class="built_in">sort</span> -rn -k1 -t <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">    tmp=(<span class="variable">$line</span>)</span><br><span class="line">        ((map[<span class="variable">$tmp</span>[1]]+=1))</span><br><span class="line"><span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">declare</span> -a tmpArray</span><br><span class="line">tmp=0</span><br><span class="line">index=0</span><br><span class="line"><span class="keyword">for</span> (j=0; j&lt;=3;j++); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!map[*]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;map[i]&#125;</span> gt tmp ]; <span class="keyword">then</span></span><br><span class="line">            tmp=<span class="variable">$&#123;map[i]&#125;</span></span><br><span class="line">            index=i</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    tmpArray[index]=tmp</span><br><span class="line">    <span class="built_in">unset</span> map[index]</span><br><span class="line">    tmp=0</span><br><span class="line">    index=0</span><br><span class="line"><span class="keyword">done</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line"><span class="built_in">sort</span> -rn -k1 tmp.txt</span><br></pre></td></tr></table></figure>

<h2 id="26-nginx日志分析4-查询某个IP的详细访问情况"><a href="#26-nginx日志分析4-查询某个IP的详细访问情况" class="headerlink" title="26.nginx日志分析4-查询某个IP的详细访问情况"></a><a href="https://www.nowcoder.com/practice/d0d81982176b4d5ebf032dbfb4a850d6?tpId=195&tqId=39435&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">26.nginx日志分析4-查询某个IP的详细访问情况</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($1 == &quot;192.168.1.22&quot;) &#123;</span></span><br><span class="line"><span class="string">        a[$7]++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in a)&#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%d %s\n&quot;,a[i], i)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>

<h2 id="27-nginx日志分析5-统计爬虫抓取404的次数"><a href="#27-nginx日志分析5-统计爬虫抓取404的次数" class="headerlink" title="27.nginx日志分析5-统计爬虫抓取404的次数"></a><a href="https://www.nowcoder.com/practice/3a3573822a854710a259d89066aad695?tpId=195&tqId=39436&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">27.nginx日志分析5-统计爬虫抓取404的次数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        a=(<span class="variable">$line</span>)</span><br><span class="line">        [ <span class="variable">$&#123;a[8]&#125;</span> == <span class="string">&quot;404&quot;</span> ] &amp;&amp; [ <span class="variable">$&#123;a[14]&#125;</span> == <span class="string">&#x27;+http://www.baidu.com/search/spider.html)&quot;&#x27;</span> ] &amp;&amp; ((b++))</span><br><span class="line">    <span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="built_in">printf</span> <span class="variable">$b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($9 == &quot;404&quot; &amp;&amp; $15 ~/baidu/) &#123;</span></span><br><span class="line"><span class="string">        k++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    print(k)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">grep <span class="string">&quot;baidu&quot;</span> |grep 404|<span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<h2 id="28-nginx日志分析6-统计每分钟的请求数"><a href="#28-nginx日志分析6-统计每分钟的请求数" class="headerlink" title="28.nginx日志分析6-统计每分钟的请求数"></a><a href="https://www.nowcoder.com/practice/9a37600d342c47ed9e9a0fd33c1c189e?tpId=195&tqId=39437&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">28.nginx日志分析6-统计每分钟的请求数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    a[sprintf(&quot;%s:%s&quot;, $2, $3)]++</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in a) &#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%d %s\n&quot;, a[i], i)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>

<h2 id="29-netstat练习1-查看各个状态的连接数"><a href="#29-netstat练习1-查看各个状态的连接数" class="headerlink" title="29.netstat练习1-查看各个状态的连接数"></a><a href="https://www.nowcoder.com/practice/f46a302d14e04b149bb50670f255293a?tpId=195&tqId=39438&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">29.netstat练习1-查看各个状态的连接数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($1 == &quot;tcp&quot;) &#123;</span></span><br><span class="line"><span class="string">        arr[$6]++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in arr) &#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%s %d\n&quot;, i, arr[i])</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -nrk2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">declare</span> -A map</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        tmp=(<span class="variable">$line</span>)</span><br><span class="line">        [ <span class="variable">$&#123;tmp[0]&#125;</span> == <span class="string">&quot;tcp&quot;</span> ] &amp;&amp; ((map[<span class="string">&quot;<span class="variable">$&#123;tmp[5]&#125;</span>&quot;</span>]++))</span><br><span class="line">    <span class="keyword">done</span> &lt; nowcoder.txt</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">InsertSort</span></span>()&#123;</span><br><span class="line">    tmp=()</span><br><span class="line">    <span class="keyword">for</span> ve <span class="keyword">in</span> <span class="variable">$&#123;map[*]&#125;</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            tmp[<span class="variable">$&#123;#tmp[*]&#125;</span>]=<span class="variable">$ve</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    q=<span class="variable">$&#123;#tmp[*]&#125;</span></span><br><span class="line">    <span class="keyword">for</span> ((i=0;i&lt;<span class="variable">$q</span>;i++))</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">for</span> ((j=<span class="variable">$i</span>+1;j&lt;<span class="variable">$q</span>;j++))</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                    <span class="keyword">if</span> [ <span class="variable">$&#123;tmp[$i]&#125;</span> -lt <span class="variable">$&#123;tmp[$j]&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">                        t=<span class="variable">$&#123;tmp[$i]&#125;</span></span><br><span class="line">                        tmp[<span class="variable">$i</span>]=<span class="variable">$&#123;tmp[$j]&#125;</span></span><br><span class="line">                        tmp[<span class="variable">$j</span>]=<span class="variable">$t</span></span><br><span class="line">                    <span class="keyword">fi</span></span><br><span class="line">                <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">InsertSort</span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;q; i++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> ve <span class="keyword">in</span> <span class="variable">$&#123;!map[*]&#125;</span></span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> [ <span class="variable">$&#123;tmp[$i]&#125;</span> -eq <span class="variable">$&#123;map[$ve]&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">                    <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$ve</span> <span class="variable">$&#123;map[$ve]&#125;</span>\n&quot;</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="30-netstat练习2-查看和3306端口建立的连接"><a href="#30-netstat练习2-查看和3306端口建立的连接" class="headerlink" title="30.netstat练习2-查看和3306端口建立的连接"></a><a href="https://www.nowcoder.com/practice/534b95941ffb495b9ba57fbfc3cd723a?tpId=195&tqId=39439&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">30.netstat练习2-查看和3306端口建立的连接</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">if($0 ~&quot;3306&quot;)&#123;</span></span><br><span class="line"><span class="string">    if($6==&quot;ESTABLISHED&quot;)&#123;</span></span><br><span class="line"><span class="string">        a[$5]++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">for(i in a)&#123;</span></span><br><span class="line"><span class="string">    print a[i],i</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | sed <span class="string">&#x27;s/:3306//&#x27;</span> | <span class="built_in">sort</span> -nr -k1</span><br></pre></td></tr></table></figure>

<h2 id="31-netstat练习3-输出每个IP的连接数"><a href="#31-netstat练习3-输出每个IP的连接数" class="headerlink" title="31.netstat练习3-输出每个IP的连接数"></a><a href="https://www.nowcoder.com/practice/f601fc4f35b5453ba661531051b6ce69?tpId=195&tqId=39440&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">31.netstat练习3-输出每个IP的连接数</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($1 == &quot;tcp&quot;) &#123;</span></span><br><span class="line"><span class="string">        split($5, a, &quot;:&quot;)</span></span><br><span class="line"><span class="string">        t[a[1]]++</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    for (i in t)&#123;</span></span><br><span class="line"><span class="string">        printf(&quot;%s %d\n&quot;, i, t[i])</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> -nrk2</span><br></pre></td></tr></table></figure>

<h2 id="32-netstat练习4-输出和3306端口建立连接总的各个状态的数目"><a href="#32-netstat练习4-输出和3306端口建立连接总的各个状态的数目" class="headerlink" title="32.netstat练习4-输出和3306端口建立连接总的各个状态的数目"></a><a href="https://www.nowcoder.com/practice/5ce76fd1513d4eacae68ad3b2aca1fbb?tpId=195&tqId=39441&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">32.netstat练习4-输出和3306端口建立连接总的各个状态的数目</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($1 == &quot;tcp&quot; &amp;&amp; $5 ~ /3306/) &#123;</span></span><br><span class="line"><span class="string">        if ($6 == &quot;ESTABLISHED&quot;) &#123;</span></span><br><span class="line"><span class="string">            es++</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        ans++</span></span><br><span class="line"><span class="string">        arr[$5]=0</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    printf(&quot;TOTAL_IP %d\nESTABLISHED %d\nTOTAL_LINK %d&quot;, length(arr), es, ans)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="33-业务分析-提取值"><a href="#33-业务分析-提取值" class="headerlink" title="33.业务分析-提取值"></a><a href="https://www.nowcoder.com/practice/f144e52a3e054426a4d265ff38399748?tpId=195&tqId=39442&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">33.业务分析-提取值</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    if ($0 ~ /Server version/) &#123;</span></span><br><span class="line"><span class="string">        sub(/.*:/, &quot;&quot;, $0)</span></span><br><span class="line"><span class="string">        printf(&quot;serverVersion:%s\n&quot;, $0)</span></span><br><span class="line"><span class="string">        next</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if ($0 ~ /Server number/) &#123;</span></span><br><span class="line"><span class="string">        sub(/.*:/, &quot;&quot;, $0)</span></span><br><span class="line"><span class="string">        printf(&quot;serverName:%s\n&quot;, $0)</span></span><br><span class="line"><span class="string">        next</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if ($0 ~ /OS Version/) &#123;</span></span><br><span class="line"><span class="string">        sub(/.+Name:/, &quot;&quot;, $0)</span></span><br><span class="line"><span class="string">        t=$0</span></span><br><span class="line"><span class="string">        sub(/,.*/, &quot;&quot;, $0)</span></span><br><span class="line"><span class="string">        sub(/.*:/, &quot;&quot;, t)</span></span><br><span class="line"><span class="string">        printf(&quot;osName:%s\nosVersion:%s&quot;, $0, t)</span></span><br><span class="line"><span class="string">        exit</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="34-ps分析-统计VSZ-RSS各自总和"><a href="#34-ps分析-统计VSZ-RSS各自总和" class="headerlink" title="34.ps分析-统计VSZ,RSS各自总和"></a><a href="https://www.nowcoder.com/practice/7094b5f96e1a4c998ce01baf407beee6?tpId=195&tqId=39443&rp=1&ru=/exam/oj&qru=/exam/oj&sourceUrl=/exam/oj?page=1&tab=SHELL%E7%AF%87&topicId=195&difficulty=undefined&judgeStatus=undefined&tags=&title=">34.ps分析-统计VSZ,RSS各自总和</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    v += $5</span></span><br><span class="line"><span class="string">    r += $6</span></span><br><span class="line"><span class="string">&#125; END &#123;</span></span><br><span class="line"><span class="string">    printf(&quot;MEM TOTAL\nVSZ_SUM:%0.1fM,RSS_SUM:%0.3fM&quot;, v/1024, r/1024)</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>bash练习</tag>
      </tags>
  </entry>
  <entry>
    <title>conda使用教程</title>
    <url>/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=944424445&bvid=BV18W4y1E7sw&cid=881784737&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>


<blockquote>
<p>针对 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>参考教程：<a href="https://blog.csdn.net/weixin_64316191/article/details/127435729">conda 的安装和卸载</a></p>
<h2 id="虚拟环境管理"><a href="#虚拟环境管理" class="headerlink" title="虚拟环境管理"></a>虚拟环境管理</h2><ol>
<li>conda env list （列出虚拟环境信息）</li>
<li>conda create -n <env_name> (创建虚拟环境) <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令示例</span></span><br><span class="line">conda create -n py38 -y</span><br><span class="line">conda create -n py39 python=3.9 -y  # 官方推荐使用这种方式</span><br><span class="line">conda create -n py39_2 -y &amp;&amp; conda install -n py39_2 python=3.9 -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较两种创建方式有何不同，并无任何不同</span></span><br><span class="line">diff miniconda3/envs/py39 miniconda3/envs/py39_2</span><br></pre></td></tr></table></figure>
 <img src="/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/d12c93ef45d64d26959ebb08f504be54.png" class="" title="在这里插入图片描述">
 可以看到，在创建环境时指定 python 版本，和创建完环境后安装 python 的指定版本两者导致的结果并无不同，那为什么官方推荐在创建环境时使用 python=3.9 的方式指定 python<br>  版本呢？ 这是因为如果您要在该虚拟环境中使用 python，就应该在创建环境之初下载 python3.9 ，之后在这个虚拟环境中下载的其他包都会匹配 python3.9的依赖与约束。如果安装了很多其他包之后再安装 python3.9，处理环境依赖就会变得较为复杂，甚至导致一些不易察觉的 bug。</li>
<li>conda activate <env_name> (进入虚拟环境) <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令示例</span></span><br><span class="line">conda activate py39</span><br></pre></td></tr></table></figure></li>
<li>conda deactivate <env_name> (退出虚拟环境)  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令示例</span></span><br><span class="line">conda deactivate </span><br></pre></td></tr></table></figure></li>
<li>conda remove -n <env_name> –all 删除虚拟环境 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令示例</span></span><br><span class="line">conda create -n test -y</span><br><span class="line">conda env list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 <span class="built_in">test</span> 虚拟环境</span></span><br><span class="line">conda remove -n test --all</span><br><span class="line">conda env list</span><br></pre></td></tr></table></figure></li>
<li>导出虚拟环境 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">适用于在相同操作系统版本下 <span class="built_in">clone</span> 虚拟环境</span></span><br><span class="line">conda list --explicit &gt; spec-list.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">适用于所有平台之间 <span class="built_in">clone</span> 虚拟环境，这里的平台指的是操作系统，如win、centos、ubuntu</span></span><br><span class="line">conda env export &gt; environment.yml</span><br></pre></td></tr></table></figure></li>
<li>根据导出的文件创建虚拟环境 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">代码示例</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据导出包创建 env_name1 的虚拟环境</span></span><br><span class="line">conda create -n env_name1 --file spec-list.txt</span><br><span class="line">conda env create --file environment.yml</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="channels-管理"><a href="#channels-管理" class="headerlink" title="channels 管理"></a>channels 管理</h2><p><strong>conda 处理 channels 的优先级的步骤:</strong><br>    1. 按通道优先级从高到低对包进行排序。<br>    2. 将捆绑的软件包（具有相同通道优先级的软件包）从最高版本号到最低版本号排序。例如，如果 channel A 包含 NumPy 1.12.0 和 1.13.1，则 NumPy 1.13.1 将被排序更高。<br>    3. 将仍然绑定的软件包（具有相同通道优先级和相同版本的软件包）从最高到最低内部版本号排序。例如，如果 channelA 同时包含 NumPy 1.12.0 build 1 和 build 2，则 build 2 首先排序。通道B 中的任何包都将排在通道A 之下。<br>    4. 安装排序列表中满足安装规范的第一个包</p>
<ol>
<li>列出 conda 中配置的 channels，根据从低到高的优先级排列 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --get channels </span><br></pre></td></tr></table></figure></li>
<li>添加 channels，添加国内的 channels 也就是我们常说的添加国内源 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加中科大源</span></span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加清华大学源（偶尔抽风，此时需要更换为其他国内镜像源，更换国内镜像源的教程可以查看《conda安装教程》）</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加阿里云源</span></span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/free</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/main</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/conda-forge</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/bioconda</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></li>
<li>删除 channels <ul>
<li>方法 1 （通过命令删除）：  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先查看 channels</span></span><br><span class="line">conda config --get channels</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定的 channels</span></span><br><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除配置的所有镜像源</span></span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure></li>
<li>方法 2 （编辑 .condarc 文件删除想要删除 channels 对应的行）  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.condarc</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>安装包时暂时添加 channels，此 channels 处于最高优先级 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install -c bioconda presto</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>使用 conda 安装包之前，需要在以下链接中搜索 conda 包，找到安装对应包的命令后再进行安装，如果不能在下面的链接中找到安装方法，即表明该包不能通过 conda 安装。<br><a href="https://anaconda.org/search">搜 conda 包</a></p>
<img src="/2022/12/29/conda%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/d801ccb2ddcb4be0b856700d701fee5e.png" class="" title="在这里插入图片描述">

<ol>
<li>conda list （查看当前虚拟环境已经安装的包）</li>
<li>conda install <package_name>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令示例</span></span><br><span class="line">conda install --help</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-y: <span class="built_in">yes</span></span></span><br><span class="line">conda install requests -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c: 临时增加一个 channel ，并且增加的 channels 会处于最高优先级</span></span><br><span class="line">conda install -c bioconda presto</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-vv: 显示下载过程中的详细日志，方便定位问题</span></span><br><span class="line">conda install numpy -y -vv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台下载</span></span><br><span class="line">nohup conda install pandas -y &amp;</span><br></pre></td></tr></table></figure></li>
<li>conda 官方建议，使用 conda 安装的 python包和使用 pip 安装的 python 包是有略微不同的，如果可能，尽量使用 conda 来安装包。<a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-pkgs.html?highlight=pip#id5">参考链接</a><ul>
<li>在 conda 4.6 以后，conda 可以识别 pip 安装的 python包，不过目前这一功能还处于实验阶段。</li>
<li>在 conda 中应该优先使用 conda 安装包，不要混用 conda 和 pip，可以设置一个虚拟环境专门用户 pip 管理 python 包</li>
<li>conda 和 pip 都可以根据文件批量安装 python 包  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip list --format=freeze &gt; requirements.txt</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">conda install -n env_name --file requirements.txt</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2></li>
</ul>
</li>
</ol>
<h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><ol>
<li>conda config –show <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 channels</span></span><br><span class="line">conda config --help</span><br><span class="line">conda config --get channels</span><br><span class="line">conda config --remove &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
我们很难记住那么多配置项的作用，如果需要可以查阅 conda 官方教程对各配置项的详解<br><a href="https://conda.io/projects/conda/en/latest/configuration.html#">conda 配置项的作用</a></li>
</ol>
]]></content>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>conda的安装和卸载</title>
    <url>/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=559359158&bvid=BV1xe4y1U7Fe&cid=881565520&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<iframe src="//player.bilibili.com/player.html?aid=731773217&bvid=BV1aD4y1r7H1&cid=881602406&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<blockquote>
<p>针对 ubuntu20.04<br>ubuntu20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>下载 conda 的安装脚本（这里使用清华大学的镜像）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~  # 推荐将 conda 安装在家目录下</span><br><span class="line">wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py39_4.10.3-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li>
<li>执行conda安装脚本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash Miniconda3-py39_4.10.3-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li>
<li>阅读并同意conda的相关协议，不停地回车然后输入yes再回车就安装成功了, 执行脚本后输入的文字的顺序可以参考这个<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">回车</span><br><span class="line">q</span><br><span class="line">yes</span><br><span class="line">回车</span><br><span class="line">yes</span><br></pre></td></tr></table></figure></li>
<li>为了让安装立即生效，需要执行 .bashrc 脚本，这样会立即进入到 conda 的 base 环境下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>添加官方源和国内源，这<strong>几乎</strong>是提速 conda 的唯一方式了。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加官方源</span></span><br><span class="line">conda config --add channels r # R软件包</span><br><span class="line">conda config --add channels conda-forge # Conda社区维护的不在默认通道中的软件</span><br><span class="line">conda config --add channels bioconda # 生物信息学类工具</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加国内源头 （选其一添加即可）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加中科大源</span></span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加清华大学源（偶尔抽风，此时需要换其他国内源）</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加阿里云源</span></span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/free</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/pkgs/main</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/conda-forge</span><br><span class="line">conda config --add channels https://mirrors.aliyun.com/anaconda/cloud/bioconda</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></li>
<li>查看 conda 源是否配置成功，可以看出各 channel 的优先级（从上到下优先级依次增加）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda config --get channels</span><br></pre></td></tr></table></figure>
<img src="/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/048bebbd30d24fe182b924fd13e647d8.png" class="" title="在这里插入图片描述"></li>
</ol>
<p><strong>安装完成！</strong></p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>conda 的卸载很方便，因为 conda 的安装并不会污染其他系统目录，conda 几乎将所有数据都保存在 miniconda3 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf .conda</span><br><span class="line">rm -rf .condarc</span><br><span class="line">rm -rf miniconda3</span><br></pre></td></tr></table></figure>
<p>然后再删除 ~/.bashrc 文件中的 conda 初始化添加的语句，也就是删除图示内容</p>
<img src="/2022/12/29/conda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/2dfb6c21b1514a6e9952b78b92e704ad.png" class="" title="在这里插入图片描述">
<p>使用文字描述一下这个动作：使用 vim 编辑 .bashrc，将光标移动到要删除的文字后方，输入 i 进入 vim 的编辑模式，然后敲击键盘上的”Backspace” 删除相应文字，文字删除完毕后，按键盘上的 “Esc” 进入 vim 的命令模式，输入 “:wq”  然后回车保存对文件的更改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>删完之后执行一下 .bashrc 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p><strong>卸载完成！</strong></p>
<h2 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h2><p>所谓重装，就是将原来安装的 conda 卸载后再重新安装一次。（参考上述步骤）</p>
<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="更换镜像源："><a href="#更换镜像源：" class="headerlink" title="更换镜像源："></a>更换镜像源：</h3><p>首先删除当前配置的源，然后根据上述教程重新配置源即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除当前配置的源</span></span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客小技巧</title>
    <url>/2022/12/29/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h1><h2 id="视频插件"><a href="#视频插件" class="headerlink" title="视频插件"></a>视频插件</h2><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">hexo-tag-aplayer</a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 插入网络视频</span><br><span class="line">&#123;% dplayer &quot;url=https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/mp4/mp4_demo.mp4&quot; %&#125;</span><br><span class="line"></span><br><span class="line"># 插入acfun 视频</span><br><span class="line">&lt;iframe src=&quot;https://www.acfun.cn/player/ac12945786&quot; style=&quot;width:100%;height:500px;min-width:375px;min-height:200px&quot; id=&quot;ACPlayer-re&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line"># 插入 B 站视频</span><br><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=606228531&amp;bvid=BV1y84y1t7Y9&amp;cid=922973653&amp;page=1&quot; style=&quot;width:100%;height:500px;min-width:375px;min-height:200px&quot;scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<iframe src="https://www.acfun.cn/player/ac12945786" style="width:100%;height:500px;min-width:375px;min-height:200px" id="ACPlayer-re" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
<span id="more"></span>


<iframe src="//player.bilibili.com/player.html?aid=606228531&bvid=BV1y84y1t7Y9&cid=922973653&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>




<h2 id="其他好用的-hexo-插件"><a href="#其他好用的-hexo-插件" class="headerlink" title="其他好用的 hexo 插件"></a>其他好用的 hexo 插件</h2><ol>
<li><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">二次元看板娘：hexo-helper-live2d</a></li>
<li><a href="https://github.com/netcan/hexo-generator-index-pin-top">博客文章置顶：hexo-generator-index-pin-top</a></li>
</ol>
]]></content>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>用户和用户组</title>
    <url>/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>用户和用户组是用来划分权限的抽象概念，用户除了作为权限的抽象之外。我们通常还需要借助用户名和密码来登陆系统。</p>
<p>用户和用户组是多对多的关系，即1个用户可以对应多个用户组，1个用户组也可以包含多个用户。</p>
<img src="/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/image-20221225211630067.png" class="" title="image-20221225211630067">

<span id="more"></span>

<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>useradd：通常用于在脚本中创建用户</p>
<p>adduser：交互式地创建用户，手动设置密码，自动创建家目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line">groupadd xiyougroup</span><br><span class="line"><span class="comment"># 创建用户，并把用户添加到用户组</span></span><br><span class="line">sudo useradd -m -d /home/xiyou -s /bin/bash -g xiyougroup xiyou</span><br><span class="line"><span class="comment"># 为 xiyou 用户设置密码为 xiyou</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;xiyou\nxiyou&quot;</span> | sudo passwd xiyou</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换当前用户为 xiyou，需要输入密码</span></span><br><span class="line">su xiyou </span><br><span class="line"><span class="comment"># 交互式地创建用户</span></span><br><span class="line">sudo adduser xiyou2</span><br></pre></td></tr></table></figure>

<h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><p>usermod：修改用户信息</p>
<p>userdel：删除用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改用户名</span></span><br><span class="line">usermod -l 新用户名 旧用户名</span><br><span class="line"><span class="comment"># 修改用户家目录</span></span><br><span class="line">usermod -d 新家目录 用户名</span><br><span class="line"><span class="comment"># 锁定用户不能登陆</span></span><br><span class="line">usermod -L 用户名</span><br><span class="line"><span class="comment"># 解除用户锁定</span></span><br><span class="line">usermod -U 用户名</span><br><span class="line"><span class="comment"># 查看用户状态</span></span><br><span class="line">passwd -S 用户名</span><br><span class="line"><span class="comment"># 删除用户的同时删除家目录</span></span><br><span class="line">usermod -r 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">userdel 用户名</span><br><span class="line"><span class="comment"># 删除用户名和用户的家目录</span></span><br><span class="line">userdel -r 用户名 </span><br></pre></td></tr></table></figure>

<h2 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看新增用户组命令的使用方法</span></span><br><span class="line">addgroup --<span class="built_in">help</span></span><br><span class="line">groupadd --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line">groupadd xiyougroup</span><br></pre></td></tr></table></figure>

<h2 id="管理用户组"><a href="#管理用户组" class="headerlink" title="管理用户组"></a>管理用户组</h2><p>groups：查看用户组信息</p>
<p>id：查看用户的 uid 和 gid 信息</p>
<p>groupmod：修改用户组信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统中所有的用户组</span></span><br><span class="line"><span class="built_in">cat</span> /etc/group</span><br><span class="line"><span class="comment"># 查看当前用户所在的用户组</span></span><br><span class="line"><span class="built_in">groups</span></span><br><span class="line"><span class="comment"># 查看某用户所在的用户组</span></span><br><span class="line"><span class="built_in">groups</span> txb</span><br><span class="line"><span class="comment"># 查看用户id、用户组、用户组id</span></span><br><span class="line"><span class="built_in">id</span> txb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户组名</span></span><br><span class="line">groupmod -n 新组名 旧组名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户组 id</span></span><br><span class="line">groupmod -g 组<span class="built_in">id</span> 组名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户组</span></span><br><span class="line">groupdel 组名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到某个用户组</span></span><br><span class="line">gpasswd -a 用户名 组名</span><br></pre></td></tr></table></figure>

<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><p>passwd:修改用户密码信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd </span><br><span class="line"></span><br><span class="line"><span class="comment"># 锁定用户密码，用户不能登陆</span></span><br><span class="line">passwd -l 用户名</span><br><span class="line"><span class="comment"># 解除锁定</span></span><br><span class="line">passwd -u 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户的密码是否被锁定</span></span><br><span class="line">passwd -S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户密码，删除后用户不能登陆系统，重新设置密码后可以登陆系统</span></span><br><span class="line">passed -d 用户名</span><br></pre></td></tr></table></figure>

<img src="/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/image-20221214121232905.png" class="" title="image-20221214121232905">

<p>查看系统在线人员信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">who</span></span><br></pre></td></tr></table></figure>

<img src="/2022/12/29/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/image-20221229170041437.png" class="" title="image-20221229170041437">

<p>强制用户下线：</p>
<p>任何用户都可让自己强制下线，强制其他用户下线需要 root 权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pts/0 是用户使用的终端的名称</span></span><br><span class="line">sudo pkill -<span class="built_in">kill</span> -t pts/2</span><br></pre></td></tr></table></figure>





<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>在rstudio-server中使用R包的不同版本</title>
    <url>/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=986974785&bvid=BV1xt4y1T7Gd&cid=881793170&page=1"style="width:100%;height:500px;min-width:375px;min-height:200px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>R 不支持在一个目录下安装同一个包的多个版本</strong>，在加载 R 包时，它按照系统中配置的 libpaths 的优先级从高到低查找，在某个 libpath 下找到这个包后，将这个包加载到环境中，即使后面找到这个包的其他版本，也不会再次加载了。（R包加载机制）</p>
<p>如：在执行 library(“uwot”) 时，R 就会依次搜索 libpath 找到 uwot 的位置，即使 libpaths 中有多个 uwot，它找到第一个 uwot 后，就将 uwot 加载到环境中，而不会再加载后续找到的 uwot 包到环境中了。</p>
<p>不过我们可以将当前加载到环境中的 uwot 这个包 unload，然后加载其他 libpath 中的 uwot 包。后面我会演示这个步骤。（切换 uwot 版本的原理）</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统中配置好的 libpath 输出，按照优先级从高到低的方式输出</span></span><br><span class="line">.libPaths<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 示例输出：</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;/home/txb/R/x86_64-pc-linux-gnu-library/4.2&quot;</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span> <span class="string">&quot;/usr/local/lib/R/site-library&quot;</span>              </span><br><span class="line"><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span> <span class="string">&quot;/usr/lib/R/site-library&quot;</span>                    </span><br><span class="line"><span class="punctuation">[</span><span class="number">4</span><span class="punctuation">]</span> <span class="string">&quot;/usr/lib/R/library&quot;</span> </span><br></pre></td></tr></table></figure>
<p>如图：/home/txb/rpackage 目录下的初始 uwot 版本是 0.1.14，我在这个目录下重新安装了 uwot 的 0.1.13 版本。两个版本没有共存，而是将原来的 uwot 0.1.14 版本卸载掉了，安装上了 uwot 的 0.1.13 版本。这就是我们为什么要构造新的 libpath 的原因 —— 同一个 libpath 下的包只有1个版本。</p>
<img src="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/5464ff7939c74430acfb02a24a88e690.png" class="" title="在这里插入图片描述">
<img src="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/5ede430fd04f42f29a09540c89da992b.png" class="" title="在这里插入图片描述">

<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>R 包的安装目录是使用 lib 参数指定的，指定这个参数可以将 R 包下载到对应的目录。在指定目录下安装好R包后，通过 .libPaths() 函数将该目录配置为新增的 libpath。</p>
<p>通过在 Console 中执行 .libPaths() 函数配置好的 libpath 仅在当前 rsession 中生效，“Start New Session” 之后，配置的 libpath 就会失效。</p>
<p>为了让 .libPaths() 配置的 libpath 永久生效，可以将相关的配置命令写入的 ~/.Rprofile 中，这样在“Start New Session” 之后，配置的 libpath 依然有效。</p>
<p>实现方式 1: 将 R 包安装在 rpackage 目录并配置</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将包安装在指定的 libpath 示例：</span></span><br><span class="line"><span class="comment"># 注意：libpath 必须在系统中存在，如果不存在，需要新建对应的目录：mkdir -p /home/txb/rpackage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 R 包下载在指定目录命令示例：</span></span><br><span class="line">remotes<span class="operator">::</span>install_github<span class="punctuation">(</span><span class="string">&quot;jlmelville/uwot&quot;</span><span class="punctuation">,</span> lib<span class="operator">=</span><span class="string">&quot;/home/txb/rpackage&quot;</span><span class="punctuation">)</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span> lib<span class="operator">=</span><span class="string">&quot;/home/txb/rpackage&quot;</span><span class="punctuation">)</span></span><br><span class="line">devtools<span class="operator">::</span>install_github<span class="punctuation">(</span><span class="string">&quot;xxx/xxx&quot;</span><span class="punctuation">,</span> lib<span class="operator">=</span><span class="string">&quot;/home/txb/rpackage&quot;</span><span class="punctuation">)</span></span><br><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span> lib<span class="operator">=</span><span class="string">&quot;/home/txb/rpackage&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看未添加 libpath 之前 uwot 的版本</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">&quot;uwot&quot;</span><span class="punctuation">)</span></span><br><span class="line">packageVersion<span class="punctuation">(</span><span class="string">&quot;uwot&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 向 R 包的 libpaths 中新增一个 libpath，并将它放在第 1 个元素 （最高优先级）</span></span><br><span class="line">.libPaths<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;/home/txb/rpackage&quot;</span><span class="punctuation">,</span>.libPaths<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 查看添加 libpath 之后 uwot 的版本</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">&quot;uwot&quot;</span><span class="punctuation">)</span></span><br><span class="line">packageVersion<span class="punctuation">(</span><span class="string">&quot;uwot&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p>实现方式 2：使用 conda 安装 R 包并配置 libpath</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 conda 安装指定版本的 R 包</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 创建 conda 环境</span></span></span><br><span class="line">conda create -n r-reticulate r-uwot==0.1.11 -y</span><br><span class="line">conda activate r-reticulate </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 libpath</span></span><br><span class="line">.libPaths(c(&quot;/home/txb/miniconda3/envs/r-reticulate/lib/R/library&quot;, .libPaths()))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看此时 R 找到的第 1 个 R 包的版本。</span></span><br><span class="line">library(&quot;uwot&quot;)</span><br><span class="line">packageVersion(&quot;uwot&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h3><p>结合 rstudio-server 查看 R 包的版本。在这个步骤我先 “Start New Session” 将原先配置的 libpath 取消掉（后面会说明原因）。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">.libPaths<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;/home/txb/rpackage&quot;</span><span class="punctuation">,</span>.libPaths<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">&quot;uwot&quot;</span><span class="punctuation">)</span></span><br><span class="line">packageVersion<span class="punctuation">(</span><span class="string">&quot;uwot&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">.libPaths<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;/home/txb/miniconda3/envs/r-reticulate/lib/R/library&quot;</span><span class="punctuation">,</span> .libPaths<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">&quot;uwot&quot;</span><span class="punctuation">)</span></span><br><span class="line">packageVersion<span class="punctuation">(</span><span class="string">&quot;uwot&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Seurat 中会 import uwot，此时 uwot 无法 unload，想要切换 uwot 版本，有两种方式。</span></span><br><span class="line"><span class="comment"># 1. 将 Seurat unload</span></span><br><span class="line"><span class="comment"># 2. “Start New Session”，然后再选中想要使用的 uwot 版本 (推荐)</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">&quot;Seurat&quot;</span><span class="punctuation">)</span></span><br><span class="line">detach<span class="punctuation">(</span><span class="string">&quot;package:Seurat&quot;</span><span class="punctuation">,</span> unload <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<img src="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/e69c3a3181f7466bafb4e6f27f02fd80.png" class="" title="请添加图片描述">
<img src="/2022/12/29/%E5%9C%A8rstudio-server%E4%B8%AD%E4%BD%BF%E7%94%A8R%E5%8C%85%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/24267bfcfa654dd2bb5ab21f0f909982.png" class="" title="请添加图片描述">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 让 libpath 永久生效，将相关命令写入到文件</span><br><span class="line">file.edit(&quot;~/.Rprofile&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>rstudio-server</tag>
        <tag>R包</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装R包</title>
    <url>/2022/12/29/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85R%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=774448127&bvid=BV1k14y1577d&cid=881813168&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>CRAN 在国内下载速度很快，因为它在国内有很多镜像。</p>
<h3 id="1-设置国内镜像源（可选）"><a href="#1-设置国内镜像源（可选）" class="headerlink" title="1.设置国内镜像源（可选）"></a>1.设置国内镜像源（<strong>可选</strong>）</h3><ul>
<li><p>使用 install 下载：<a href="https://cran.r-project.org/mirrors.html%EF%BC%88%E9%95%9C%E5%83%8F%E6%BA%90%E5%88%97%E8%A1%A8%EF%BC%89">https://cran.r-project.org/mirrors.html（镜像源列表）</a></p>
  <figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 CRAN 镜像下载安装包 (通常不需要,因为 CRAN 的 R 包下载速度不慢)</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;devtools&quot;</span><span class="punctuation">,</span> repos <span class="operator">=</span> <span class="string">&quot;https://mirrors.ustc.edu.cn/CRAN/&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用 BiocManager 下载 <a href="https://www.bioconductor.org/about/mirrors/%EF%BC%88%E9%95%9C%E5%83%8F%E6%BA%90%E5%88%97%E8%A1%A8%EF%BC%89">https://www.bioconductor.org/about/mirrors/（镜像源列表）</a></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从 BiocManager 镜像安装 XVector</span></span><br><span class="line">options(BioC_mirror=&quot;https://mirrors.tuna.tsinghua.edu.cn/bioconductor&quot;)</span><br><span class="line">BiocManager::install(&quot;XVector&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向 ~/.Rprofile 文件中写入配置镜像的代码可以永久配置镜像</span></span><br><span class="line">file.edit(&quot;~/.Rprofile&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-搜索-R-包，找到安装命令"><a href="#2-搜索-R-包，找到安装命令" class="headerlink" title="2.搜索 R 包，找到安装命令"></a>2.搜索 R 包，找到安装命令</h3><ul>
<li>在浏览器中搜索关键字：“xxx install” （推荐 google 搜索）</li>
<li>CRAN <a href="https://cran.r-project.org/web/packages/available_packages_by_name.html">https://cran.r-project.org/web/packages/available_packages_by_name.html</a> （能够在这里搜到的 R 包都能够通过 install.packages(“xxx”) 安装）</li>
<li>Bioconductor <a href="https://www.bioconductor.org/help/search/index.html?/%EF%BC%8C%EF%BC%88%E8%83%BD%E5%A4%9F%E5%9C%A8%E8%BF%99%E9%87%8C%E6%90%9C%E5%88%B0%E7%9A%84">https://www.bioconductor.org/help/search/index.html?/，（能够在这里搜到的</a> R 包都能通过 BiocManager::install(“xxx”) 的方式安装）</li>
<li>GitHub <a href="https://github.com/">https://github.com/</a> （通常在 github 仓库的 README.md 文件会提供安装方法）</li>
</ul>
<h3 id="3-安装-R-包"><a href="#3-安装-R-包" class="headerlink" title="3.安装 R 包"></a>3.安装 R 包</h3><h3 id="安装R包的不同方式"><a href="#安装R包的不同方式" class="headerlink" title="安装R包的不同方式"></a>安装R包的不同方式</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># R 包安装工具的下载方式, 养成好习惯，安装包时指定 lib，这样能把R包安装在指定的目录下</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;devtools&quot;</span><span class="punctuation">,</span> lib <span class="operator">=</span> <span class="string">&quot;/usr/local/lib/R/site-library&quot;</span><span class="punctuation">)</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;remotes&quot;</span><span class="punctuation">,</span> lib <span class="operator">=</span> <span class="string">&quot;/usr/local/lib/R/site-library&quot;</span><span class="punctuation">)</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;BiocManager&quot;</span><span class="punctuation">,</span> lib <span class="operator">=</span> <span class="string">&quot;/usr/local/lib/R/site-library&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>从 CRAN 安装：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">install.packages(<span class="string">&quot;stringr&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>从 Bioconductor 安装：</p>
  <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">BiocManager<span class="operator">::</span>install<span class="punctuation">(</span><span class="string">&quot;XVector&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li>
<li><p>从 GitHub 在线安装：</p>
<p>  推荐一个 GitHub 代理网站 <a href="https://ghproxy.com/">https://ghproxy.com/</a>, 感谢该网站站长为中国开源做出的贡献！</p>
  <figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里 R 包对应的 GitHub 链接是 https://github.com/tidyverse/stringr</span></span><br><span class="line">devtools<span class="operator">::</span>install_github<span class="punctuation">(</span><span class="string">&quot;tidyverse/stringr&quot;</span><span class="punctuation">)</span></span><br><span class="line">remotes<span class="operator">::</span>install_github<span class="punctuation">(</span><span class="string">&quot;tidyverse/stringr&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 remotes 可以在安装时指定完整的 GitHub 链接，方便我们使用 GitHub 代理</span></span><br><span class="line">remotes<span class="operator">::</span>install_git<span class="punctuation">(</span><span class="string">&quot;https://github.com/tidyverse/stringr&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用国内代理下载 R 包源码并安装</span></span><br><span class="line">remotes<span class="operator">::</span>install_git<span class="punctuation">(</span><span class="string">&quot;https://ghproxy.com/https://github.com/tidyverse/stringr&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li>
<li><p>从 GitHub 离线安装：</p>
  <figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设我们将安装好的 zip包命名为 main.zip</span></span><br><span class="line">devtools<span class="operator">::</span>install_local<span class="punctuation">(</span><span class="string">&quot;main.zip&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 可以参考 https://ghproxy.com 使用 github 代理下载文件</span></span><br></pre></td></tr></table></figure>

<p>  zip 包需要从 GitHub 下载(如图):</p>
  <img src="/2022/12/29/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85R%E5%8C%85/a8af53aad80d4526923c61101c473a44.png" class="" title="在这里插入图片描述"></li>
</ul>
<ul>
<li><p>从在线源码安装：</p>
  <figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的 &quot;https://cran.r-project.org/src/contrib/stringr_1.4.1.tar.gz&quot; 就是源码的下载路径</span></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;https://cran.r-project.org/src/contrib/stringr_1.4.1.tar.gz&quot;</span><span class="punctuation">,</span> repos<span class="operator">=</span><span class="literal">NULL</span><span class="punctuation">,</span> type<span class="operator">=</span><span class="string">&quot;source&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li>
<li><p>从离线源码安装：</p>
  <figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将源码下载到本地，然后使用以下方式编译安装</span></span><br><span class="line"></span><br><span class="line">install.packages<span class="punctuation">(</span><span class="string">&#x27;/tmp/stringr_1.4.1.tar.gz&#x27;</span><span class="punctuation">,</span> repos<span class="operator">=</span><span class="literal">NULL</span><span class="punctuation">,</span> type<span class="operator">=</span><span class="string">&quot;source&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 下载方式示例：</span></span><br><span class="line">wget <span class="string">&quot;https://cran.r-project.org/src/contrib/stringr_1.4.1.tar.gz&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>其实归根结底所有的 R 包都是通过源码安装的，不过是下载源码的渠道不一样</strong></p>
<h3 id="卸载-R-包"><a href="#卸载-R-包" class="headerlink" title="卸载 R 包"></a>卸载 R 包</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令示例，stringr 是包的名称</span></span><br><span class="line">remove.packages<span class="punctuation">(</span><span class="string">&quot;stringr&quot;</span><span class="punctuation">,</span> lib <span class="operator">=</span> <span class="string">&quot;/usr/local/lib/R/site-library&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>R包</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux课程大纲</title>
    <url>/2022/12/29/Linux%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=902282431&bvid=BV1tP4y1U7zP&cid=883084717&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="前置知识介绍"><a href="#前置知识介绍" class="headerlink" title="前置知识介绍"></a>前置知识介绍</h2><ul>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/127679905">终端、工作目录、文件、路径、命令和参数（pwd, cd, ls）</a></li>
</ul>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127694578">创建文件（touch、mkdir、vim、重定向（&gt;，&gt;&gt;））</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127705049">删除文件（rm，rmdir）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127719789">编辑文件内容（vim，nano，重定向（&gt;，&gt;&gt;））</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127724318">查看文件内容（cat，head，tail，less，more）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127747062">查找文件（find，ls，locate，whereis，which）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127752707">传输文件（scp，ftp，wget，curl）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127797596">压缩文件（tar，zip，unzip，rar，unrar）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127875749">移动和拷贝文件（mv，cp，ln）</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_64316191/article/details/127913210">文件的权限和属性（chmod，chown）</a></p>
</li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/127944137">进程介绍</a></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/127955269">进程的后台运行（nohup，&amp;，jobs，fg，ctrl+z）</a><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/127974403">正则表达式</a></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128002636">Linux教程之文本处理（grep）</a></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128010025">Linux教程之文本处理（sed，xargs，wc）</a></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128028680">awk</a><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128046805">ping和github代理</a><h2 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h2></li>
<li><a href="#">用户和用户组管理</a><h2 id="ubuntu-软件包管理"><a href="#ubuntu-软件包管理" class="headerlink" title="ubuntu 软件包管理"></a>ubuntu 软件包管理</h2></li>
<li><a href="http://t.csdn.cn/bCc6Z">ubuntu包管理工具之apt</a><h2 id="bash-教程"><a href="#bash-教程" class="headerlink" title="bash 教程"></a>bash 教程</h2></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128179419">bash 教程</a><h2 id="bash-练习"><a href="#bash-练习" class="headerlink" title="bash 练习"></a>bash 练习</h2></li>
<li><a href="https://blog.csdn.net/weixin_64316191/article/details/128309677">bash练习</a><h2 id="生信常用软件介绍"><a href="#生信常用软件介绍" class="headerlink" title="生信常用软件介绍"></a>生信常用软件介绍</h2></li>
<li>rstudio</li>
<li>apptainer</li>
<li>docker<h2 id="linux使用小技巧"><a href="#linux使用小技巧" class="headerlink" title="linux使用小技巧"></a>linux使用小技巧</h2></li>
<li>命令使用方法查询：<a href="https://git.io/linux">https://git.io/linux</a></li>
<li>查看系统资源（free，du，df，top）</li>
<li>无root权限安装软件</li>
<li><a href="https://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html">理解.profile 和 .bashrc的工作原理</a></li>
</ul>
]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>终端-工作目录-文件-路径-命令-参数(pwd,cd,ls)</title>
    <url>/2022/12/30/%E7%BB%88%E7%AB%AF-%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6-%E8%B7%AF%E5%BE%84-%E5%91%BD%E4%BB%A4-%E5%8F%82%E6%95%B0-pwd-cd-ls/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=902282431&bvid=BV1tP4y1U7zP&cid=883084717&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="1-终端（terminal）"><a href="#1-终端（terminal）" class="headerlink" title="1.终端（terminal）"></a>1.终端（terminal）</h2><p>终端是一种输入输出设备，用于人与计算机交互，早期是一种计算机硬件。（电传打字机）电传打字机将用户输入的文字翻译成纸带上的孔，然后将纸带输入到计算机中获得用户输入的文字。终端是人与计算机交互的桥梁。</p>
<img src="/2022/12/30/%E7%BB%88%E7%AB%AF-%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6-%E8%B7%AF%E5%BE%84-%E5%91%BD%E4%BB%A4-%E5%8F%82%E6%95%B0-pwd-cd-ls/f818a5fd2ddc4ea1a021ba2fa7a027ed.jpeg" class="" title="请添加图片描述">


<p>现在使用的终端是使用软件模拟出来的虚拟终端，用于人与计算机交互，输出系统是屏幕，输入系统是键盘。如：<a href="https://bash.aliyun.com/%EF%BC%88%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86%EF%BC%89">https://bash.aliyun.com/（使用支付宝扫码登陆）</a></p>
<img src="/2022/12/30/%E7%BB%88%E7%AB%AF-%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6-%E8%B7%AF%E5%BE%84-%E5%91%BD%E4%BB%A4-%E5%8F%82%E6%95%B0-pwd-cd-ls/0b2c8f22ae844f4182e8f5ba780661fa.png" class="" title="请添加图片描述">




<p>我们可以在终端输入命令来与计算机进行交互。</p>
<h2 id="2-工作目录（work-directory）"><a href="#2-工作目录（work-directory）" class="headerlink" title="2.工作目录（work directory）"></a>2.工作目录（work directory）</h2><p>工作目录是在终端中使用<code>pwd</code>（print work directory）命令输出的目录，通常也被称为“当前所在的目录”。</p>
<p>它的意义是执行命令时如果涉及到目录，可以以它为参考来指定其他目录。当命令涉及到目录却并未指定时，则默认使用工作目录。如使用<code>ls</code>(list information about the files)列出某个目录下的文件和目录信息时，如果不指定目录，则默认列出工作目录下的文件和目录信息。使用<code>cd</code>（change directory）可以切换工作目录，将当前的工作目录切换为 /tmp 的命令为<code>cd /tmp</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出当前的工作目录</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 不指定目录，列出当前工作目录下的文件信息</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 指定目录，输入 tmp 目录下的文件信息</span></span><br><span class="line"><span class="built_in">ls</span> /tmp</span><br><span class="line"><span class="comment"># 将当前的工作目录切换为 /tmp</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="comment"># 不指定目录，列出当前工作目录(tmp)下的文件</span></span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h2 id="3-文件和目录"><a href="#3-文件和目录" class="headerlink" title="3.文件和目录"></a>3.文件和目录</h2><p>文件是一种数据的组织形式，通常人们以<strong>文件名</strong>来称呼一个文件，如：“新建文本文档.txt”。</p>
<p>目录是一种组织文件的方式，不同目录下可能存在着拥有相同名称的文件或目录，为了消除歧义，人们称呼某个文件或目录时，会称呼为 “xx目录下的xx文件”、“xx目录下的xx目录”。但这还不够，因为一个系统中可能存在多个 a 目录。当说到 “a 目录下的 xx 文件” 时还是可能存在歧义。</p>
<pre class="mermaid">flowchart TB
A("/") --> B(bin)
A("/") --> C(usr)
B(bin) --> D(xiyou.txt)
C(usr) --> E(bin)
E(bin) --> F(xiyou.txt)</pre>

<p>为了彻底消除歧义，可以用<strong>路径</strong>来指代文件，在 linux 系统中，不同的文件或目录拥有不同的路径，也就是说每个文件或目录对应的路径是唯一的，使用路径来指代文件就没有歧义了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将工作目录切换为 /</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="comment"># 输出工作目录下的文件和目录信息</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 将各做目录切换为 /usr 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr</span><br><span class="line"><span class="comment"># 输出工作目录下的文件和目录信息</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 根据上图可以看到 / 目录下和 /usr 目录下都有 bin 目录 两个 bin 目录下都有 xiyou.txt文件，此时可以通过路径来区分它们</span></span><br><span class="line">/bin</span><br><span class="line">/usr/bin</span><br><span class="line">/bin/xiyou.txt</span><br><span class="line">/usr/bin/xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="4-路径"><a href="#4-路径" class="headerlink" title="4.路径"></a>4.路径</h2><p>在 linux 系统中，目录和文件都有其对应的路径，路径是区分不同文件或不同目录的唯一标识，目录和文件的区别是目录名可以作为文件路径的前缀，但文件名不能作为目录路径的前缀。假设在 /tmp 目录下有一个文件 xiyou.txt ，则目录 tmp 的路径为 /tmp， xiyou.txt 的路径是 /tmp/xiyou.txt。</p>
<pre class="mermaid">graph LR
A("/") --> B(tmp)
B(tmp) --> C(xiyou.txt)</pre>



<p>下图中 lib 的路径为<code>/usr/lib</code>，xiyou.txt 的路径为 <code>/tmp/xiyou.txt</code></p>
<pre class="mermaid">graph TB
/("/")--> tmp
/("/") --> bin
/("/") --> usr
/("/") --> home
home --> bash
usr --> lib
tmp --> xiyou.txt</pre>

<p>根目录：”/“ 代表根目录，是系统中<strong>所有</strong>目录的前缀。</p>
<p>绝对路径：绝对路径是以 “/“（根目录）为标准，相对于根目录的文件路径，前文中所说的路径都是绝对路径。</p>
<p>相对路径：当路径不以”/“开头时，则路径相对于当前的工作目录。使用 “.” 指代当前工作目录，使用”..”指代当前工作目录的父目录。使用 “../../“ 来指代当前文件的父目录的父目录，以此类推……</p>
<p>家目录：”~”代表家目录，它的格式是 “/home/<username>“，如果用户名为 bash 的话，则家目录为 /home/bash<br>上一个工作目录：”-“代表最近一次 cd 切换前的工作目录，使用 cd 切换工作目录后如果想要切换回上一次的工作目录，可以使用<code>cd -</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tips：当前的工作目录可以用命令 pwd 查看</span></span><br><span class="line"><span class="comment"># 切换工作目录为根目录</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="comment"># 切换到 tmp 工作目录，注意这里的路径是相对路径，是相对于当前工作目录的路径，不以 &quot;/&quot; 开头，不过当前的工作目录是 /， 相对于 / 的 tmp 目录对应的路径是 /tmp 。</span></span><br><span class="line"><span class="built_in">cd</span> tmp</span><br><span class="line"><span class="comment"># 此时工作目录是 /tmp， 可是使用 &quot;..&quot;指代它的上一层目录， 它的上一层目录就是根目录 /</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 切换工作目录为家目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 使用 pwd 查看家目录的路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 切换工作目录为根目录 /</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<h2 id="5-命令和参数"><a href="#5-命令和参数" class="headerlink" title="5.命令和参数"></a>5.命令和参数</h2><p>上文中使用到的<code>pwd</code>，<code>ls</code>，<code>cd</code>是 linux 中的命令。</p>
<p>命令是 linux 中的可执行程序，执行后会让计算机做某种操作。</p>
<p>参数是跟在命令后的描述信息，它们就像电路中的开关一样，控制着命令的执行过程和结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前文中的 cd /tmp ，cd 是命令，/tmp 是参数，这个参数描述的是切换的目录的路径</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l 是 ls 的参数，它描述的是将目录下的文件以 list 的形式列出</span></span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以多个参数搭配使用，下面这个命令表示以 list 的形式列出路径为 /etc 的目录下的文件</span></span><br><span class="line"><span class="built_in">ls</span>  -l /etc </span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数的形式多种多样，这里的 --color=never 会让 ls 的输出内容不以颜色来区分文件类型</span></span><br><span class="line"><span class="built_in">ls</span> -l /tmp --color=never</span><br></pre></td></tr></table></figure>

<h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p>在 linux 中，大多数命令可以通过 命令  –help 的方式查看命令的使用方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例:</span></span><br><span class="line"><span class="built_in">ls</span> --<span class="built_in">help</span></span><br><span class="line"><span class="built_in">pwd</span> --<span class="built_in">help</span></span><br><span class="line"><span class="built_in">cd</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>创建文件(touch,mkdir,vim,重定向)</title>
    <url>/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=689969785&bvid=BV1c24y127Nq&cid=886497148&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p><code>cd /tmp</code> (我们首先将工作目录切换到这个目录，之后所有的命令都在这个工作目录下执行)</p>
<p><code>mkdir xiyouyun</code> (创建一个目录，目录的名称为 xiyouyun，它的路径为 /tmp/xiyouyun)</p>
<p><code>cd xiyouyun</code> (切换工作目录的路径到 /tmp/xiyouyun，使用 xiyouyun 而不是 /tmp/xiyouyun 并不会导致错误，这是因为当前的工作目录是 /tmp，所以在这个工作目录下可以用 xiyouyun 来代替 /tmp/xiyouyun)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前工作目录的路径，路径中包含 xiyouyun，说明目录创建成功，当然，此前 change directory 成功也说明了目录创建成功。</span></span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/a682106b92ea4cb887e0a59158f71a20.png" class="" title="在这里插入图片描述">

<h2 id="touch-touch-txt-创建一个空文件"><a href="#touch-touch-txt-创建一个空文件" class="headerlink" title="touch touch.txt(创建一个空文件)"></a><code>touch touch.txt</code>(创建一个空文件)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前目录下的文件信息，查看文件是否被创建</span></span><br><span class="line"><span class="built_in">ls</span> </span><br><span class="line"><span class="comment"># 查看 touch.txt 文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> touch.txt</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/b4313903902a420e8f79aba24a1816ce.png" class="" title="在这里插入图片描述">

<h2 id="使用vim创建一个文件并向其中写入内容"><a href="#使用vim创建一个文件并向其中写入内容" class="headerlink" title="使用vim创建一个文件并向其中写入内容"></a>使用vim创建一个文件并向其中写入内容</h2><p>输入<code>vim vim.txt</code>命令后进入到 vim 界面，在英文输入法模式按 <kbd>i</kbd>，切换到 vim 的输入模式，输入内容 hello，xiyouyun，然后按下<kbd>Esc</kbd>，再依次输入”:wq” 3 个字符，然后按下回车，文件内容写入完毕。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前目录下的文件信息，查看文件是否被创建</span></span><br><span class="line"><span class="built_in">ls</span> </span><br><span class="line"><span class="comment"># 查看 vim.txt 文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> vim.txt</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/626cb50b4d1d4693af2c85a00dda8ef5.gif" class="" title="请添加图片描述">

<h2 id="使用-echo-创建文件并写入内容"><a href="#使用-echo-创建文件并写入内容" class="headerlink" title="使用 echo 创建文件并写入内容"></a>使用 echo 创建文件并写入内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用重定向符号 &gt; 向 echo.txt 写入 hello</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; echo.txt</span><br><span class="line"><span class="comment"># 使用 cat 查看 echo.txt 文件的内容， 使用相对于工作目录的相对路径</span></span><br><span class="line"><span class="built_in">cat</span> echo.txt</span><br><span class="line"><span class="comment"># 使用重定向符号 &gt; 向 echo.txt 写入 xiyouyun</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xiyouyun&quot;</span> &gt; echo.txt</span><br><span class="line"><span class="comment"># 使用 cat 查看 echo.txt 文件的内容，可以看到第一次写入的内容被第二次写入的内容覆盖了，文件内容只包含第二次写入的内容</span></span><br><span class="line"><span class="built_in">cat</span> echo.txt</span><br><span class="line"><span class="comment"># 如果想要持续写入一个文件而不发生覆盖，需要使用追加重定向符号（&gt;&gt;）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello， xiyouyun&quot;</span> &gt;&gt; echo.txt</span><br><span class="line"><span class="comment"># 查看文件内容，可以看到，之前文件中的内容并没有被覆盖，而是在之前的文件内容后面追加了新的内容</span></span><br><span class="line"><span class="built_in">cat</span> echo.txt</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/6d74fdb3efcf448a94e61331f4907ac3.gif" class="" title="请添加图片描述">

<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="创建多层目录"><a href="#创建多层目录" class="headerlink" title="创建多层目录"></a>创建多层目录</h3><p>mkdir 还有一个 -p 参数，可以用来创建多层目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">mkdir</span> -p father/son</span><br><span class="line"><span class="built_in">mkdir</span> -p grandfather/father/son </span><br><span class="line"><span class="comment"># tree 可以查看目录的组织结构，后面的 “| grep  -A 1 father” 可以暂时忽略它的含义</span></span><br><span class="line">tree | grep  -A 1 father</span><br></pre></td></tr></table></figure>
<p>上面的代码执行后，会创建一个名为 father 的目录，在它的下面还有一个名为 son 的目录。<br>还有创建一个 grandfather 的目录，在它的下面有一个名为 father 的目录，father 目录的下面还有一个名为 son 的目录。</p>
<img src="/2022/12/30/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6-touch-mkdir-vim-%E9%87%8D%E5%AE%9A%E5%90%91/1e0579cecbab44b2b156745e67ca2a78.png" class="" title="在这里插入图片描述"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>删除文件(rm,rmdir)</title>
    <url>/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=559933357&bvid=BV1Se4y117LF&cid=886499421&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<blockquote>
<p>适用于 ubuntu 20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统 <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="rmdir-删除一个空目录"><a href="#rmdir-删除一个空目录" class="headerlink" title="rmdir 删除一个空目录"></a>rmdir 删除一个<strong>空目录</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /tmp 目录下创建一个名为 xiyouyun 的目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp </span><br><span class="line"><span class="built_in">mkdir</span> xiyouyun</span><br><span class="line"><span class="comment"># 将工作目录切换为 xiyouyun</span></span><br><span class="line"><span class="built_in">cd</span> xiyouyun</span><br><span class="line"><span class="comment"># 在 xiyouyun 目录下创建一个名为 to_delete 的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> to_delete</span><br><span class="line"><span class="comment"># 查看当前工作目录下的文件信息，确认 to_delete 目录是否被创建</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 删除 to_delete 目录</span></span><br><span class="line"><span class="built_in">rmdir</span> to_delete</span><br><span class="line"><span class="comment"># 查看当前目录下的文件信息，确认 to_delete 目录是否被删除</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 在当前工作目录下生成一个 xiyou.txt 的文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello, xiyouyun&quot;</span> &gt; xiyou.txt</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 此时 xiyouyun 目录下存在一个名为 xiyou.txt 的文件，不能被删除</span></span><br><span class="line"><span class="built_in">rmdir</span> /tmp/xiyouyun</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/66760ee238304567a8faaa25fc06113d.gif" class="" title="请添加图片描述">

<h2 id="rm-删除文件或目录"><a href="#rm-删除文件或目录" class="headerlink" title="rm 删除文件或目录"></a>rm 删除文件或目录</h2><p>支持<strong>正则表达式</strong>匹配待删除的文件或目录, <code>*</code> 在匹配文件路径时可以代表任意字符。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /tmp 目录下创建一个名为 xiyouyun 的目录</span></span><br><span class="line"><span class="built_in">cd</span> /tmp </span><br><span class="line"><span class="built_in">mkdir</span> xiyouyun</span><br><span class="line"><span class="comment"># 将工作目录切换为xiyouyun</span></span><br><span class="line"><span class="built_in">cd</span> xiyouyun</span><br><span class="line"><span class="comment"># 在 /tmp/xiyouyun 目录下创建 9 个文件，分别为 1.txt、2.txt …… 9.txt，可以暂时忽略这里的语法</span></span><br><span class="line"><span class="built_in">touch</span> &#123;1..9&#125;.txt</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 删除文件 1.txt</span></span><br><span class="line"><span class="built_in">rm</span> 1.txt</span><br><span class="line"><span class="comment"># 删除文件 9.txt, * 可以表示后面的 .txt, * 在表示路径时可以表示任意字符，因此这里的 9* 可以被解释为 9.txt</span></span><br><span class="line"><span class="built_in">rm</span> 9*</span><br><span class="line"><span class="comment"># 创建两个目录 father/son 此时在 father 目录下会创建一个名为 son 的子目录，因此创建后 father 目录不是空目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p father/son</span><br><span class="line"><span class="comment"># 查看目录层级结构，如果系统中不存在这个命令，可以借助 ls 查看当前工作目录下的文件，或者通过 apt install tree 安装这个软件。</span></span><br><span class="line">tree</span><br><span class="line"><span class="comment"># 删除 father 目录，以及 father 目录下面的所有文件</span></span><br><span class="line"><span class="comment"># 失败，rmdir 只能删除空目录</span></span><br><span class="line"><span class="built_in">rmdir</span> father </span><br><span class="line"><span class="comment"># rm 命令默认删除文件，使用 -r 参数可以删除目录，-i 参数会在删除目录前一一询问用户是否删除该的文件，输入 yes 并回车就会将对应的文件删除</span></span><br><span class="line"><span class="built_in">rm</span> -r -i father </span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># rm 的 -f 参数表示在删除文件时不用输入 yes 确认，强制删除。</span></span><br><span class="line"><span class="built_in">mkdir</span> -p father/son</span><br><span class="line"><span class="comment"># 这里的 -r 和 -f 可以连在一起写作 -rf，效果同分开写相同，下面这条命令会删除 father 目录和 father 目录下的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf father</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/a0d6499fd4d84ad3a97da2560780719a.gif" class="" title="请添加图片描述">

<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="区分文件和目录"><a href="#区分文件和目录" class="headerlink" title="区分文件和目录"></a>区分文件和目录</h3><p><code>mkdir</code> 能够创建目录，<code>touch</code> 能够创建文件，那么怎么区分文件或目录呢？</p>
<ul>
<li><p>使用 <code>ls</code> 输出当前工作目录下的文件信息时，会通过不同的颜色来区分目录和文件，但这种方式不一定总是可靠。因为光凭颜色只能看出有一种颜色表示目录，另一种颜色表示文件，不能看出哪一种颜色对应目录，哪一种颜色对应文件。</p>
</li>
<li><p>在 windows 中可以通过文件后缀（如：1.txt）来区分文件和目录，文件有后缀，目录没后缀，这在 linux 系统中也不可行。</p>
</li>
<li><p>这里介绍一种方法：使用 <code>ls -l</code> 以 list（列表）的形式列出当前工作目录下的所有文件信息，每个文件或目录对应一行，看每一行的第 1 个字符就可以判断对应的文件信息是目录还是文件了。第 1 个字符为 <code>d</code> 的行表示该行对应的文件类型为目录，第 1 个字符为<code>-</code>的行表示该行对应的文件类型为文件。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 xiyouyun 目录，如果 /tmp/xiyoyun 目录存在，不做操作</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /tmp/xiyouyun</span><br><span class="line"><span class="built_in">cd</span> /tmp/xiyouyun</span><br><span class="line"><span class="comment"># 创建 1 个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> directory</span><br><span class="line"><span class="comment"># 创建一个名为 file 的文件，文件名不带后缀</span></span><br><span class="line"><span class="built_in">touch</span> file</span><br><span class="line"><span class="built_in">ls</span> -l</span><br></pre></td></tr></table></figure>
  <img src="/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/f91c9d36a4254f928bb367c8635a1b49.png" class="" title="在这里插入图片描述">
  <img src="/2022/12/30/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-rm-rmdir/8dd46bbd1fec48c984fde6ae5ece2ed7.gif" class="" title="请添加图片描述"></li>
</ul>
<h3 id="删除文件的最佳实践"><a href="#删除文件的最佳实践" class="headerlink" title="删除文件的最佳实践"></a><strong>删除文件的最佳实践</strong></h3><p>我们之前说到 rmdir 和鸡肋，只能用来删除空目录，这是一种非常保守的做法。但 rm -rf 的时候会直接删除文件而无法找回，这是不是又有点激进呢？</p>
<p>在使用图形化界面的电脑中，有一个“回收站（trash）”的概念，我们删除文件后，文件会被放入到”回收站“中，并不会立即被删除。此时文件还可以从”回收站“中恢复，只有在做完“清空回收站“后，文件才会被真正删除。而在终端中，你使用 rm 删掉一个文件后就无法恢复了，文件不会被放入回收站。</p>
<p>这对初学者并不友好，慎重使用 rm 这个命令是需要刻意训练的。因为在图形化界面中删除一个文件后可以在想要使用这个文件时将它从 trash 中恢复，这会让人们在做出删除操作时很草率，这可能导致误删文件之后后悔莫及。</p>
<p>这里我给大家介绍一个新命令：mv（move），它有两个参数 mv [source_path] [target_path]，第 1 个参数是想要删除的文件或目录的路径，第 2 个参数是 trash 的路径，trash 是一个目录。文件或目录会被移动到 trash 目录中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在家目录下创建 trash，之前的文章有说到，在路径中 ~ 可以表示家目录</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/trash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 9 个文件</span></span><br><span class="line"><span class="built_in">touch</span> xiyou&#123;1..9&#125;.txt</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将刚刚的 9 个文件放入 trash, 上文的内容有说到，在路径中的 * 可以表示任意字符</span></span><br><span class="line"><span class="built_in">mv</span> xiyou*.txt ~/trash</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将xiyou9.txt文件从 trash 中恢复到当前目录中, 之前的文章有说到，在路径中 . 可以代表当前的工作目录</span></span><br><span class="line"><span class="built_in">mv</span> ~/trash/xiyou9.txt .</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p><strong>为了避免“回收站”占用空间过大，记得使用 rm 命令定期删除其中不再需要的文件哦~</strong></p>
<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑文件(vim,nano)</title>
    <url>/2022/12/30/%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6-vim-nano/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=474968672&bvid=BV1AK411U73x&cid=887434972&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<blockquote>
<p>针对 ubuntu20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>使用 nano 或 vim 编辑一个文件时，都是使用命令加文件的绝对路径或相对路径。如果该路径对应的文件不存在，写入内容后，文件会自动创建。<br>为了方便演示，这里我在 /tmp 目录下创建 xiyouyun 目录作为工作目录, 之后的命令在 <code>/tmp/xiyouyun</code>工作目录下执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/xiyouyun</span><br><span class="line"><span class="built_in">cd</span> /tmp/xiyouyun</span><br></pre></td></tr></table></figure>

<h2 id="简单编辑"><a href="#简单编辑" class="headerlink" title="简单编辑"></a>简单编辑</h2><h3 id="nano：nano-filepath"><a href="#nano：nano-filepath" class="headerlink" title="nano：nano [filepath]"></a>nano：nano [filepath]</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 nano 编辑一个文件</span></span><br><span class="line">nano /tmp/xiyouyun/nano.txt</span><br></pre></td></tr></table></figure>
<p>如果你只想用 nano 做简单的编辑，在编辑完文件后按 Ctrl + s 保存文件，然后按 Ctrl + x 退出编辑，编辑内容就被写入文件了。</p>
<img src="/2022/12/30/%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6-vim-nano/afa24840d5cd4fc4b2996c2fc8b9f9a9.gif" class="" title="请添加图片描述">

<h3 id="vim：vim-filepath"><a href="#vim：vim-filepath" class="headerlink" title="vim：vim [filepath]"></a>vim：vim [filepath]</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 vim 编辑一个文件</span></span><br><span class="line">vim /tmp/xiyouyun/vim.txt</span><br></pre></td></tr></table></figure>
<p>如果你只想用 vim 做简单编辑，你需要掌握它的<strong>3</strong>种工作模式。当使用命令进入 vim vim.txt 进入 vim 时，此时是<strong>命令模式</strong>，输入<kbd>i</kbd>进入 vim 的<strong>输入模式</strong>，此时可以编辑文件内容，编辑好内容后，按<kbd>Esc</kbd>回到命令模式，输入”:”进入到 vim 的<strong>编辑模式</strong>，此时可以对文件进行保存，如输入”:wq”后回车是对文件进行保存并退出。</p>
<pre class="mermaid">    graph TB
    A(命令模式) -->|a,i,o| B(输入模式)
    B(输入模式) -->|Esc| A(命令模式)
    A(命令模式) -->|输入:| C(编辑模式)
    C(编辑模式) -->|Esc或完成一次编辑| A(命令模式)</pre>
<img src="/2022/12/30/%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6-vim-nano/a49e4934abac460a86cbef6611f54ebc.gif" class="" title="请添加图片描述">

<h2 id="复杂编辑"><a href="#复杂编辑" class="headerlink" title="复杂编辑"></a>复杂编辑</h2><h3 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h3><p>如果你想使用 nano 做一下复杂编辑，你需要掌握一些快捷键。<br>进入 nano 的编辑窗口后，使用 <kbd>Ctrl</kbd> + <kbd>G</kbd> 查看使用说明，在使用说明中首字母 “^” 表示<kbd>Ctrl</kbd>，首字母”M”可以用<kbd>Alt</kbd>、<kbd>Esc</kbd>、<kbd>Cmd</kbd>中的任意一个来实现，这里我使用<kbd>Alt</kbd>。<br><strong>常用的快捷键：</strong></p>
<blockquote>
<p>Ctrl + G 可以查看 nano 使用说明，使用<kbd>↓</kbd> 和 <kbd>↑</kbd>滚动查看使用说明，再按一次 Ctrl + G 退出使用说明。</p>
<p>Alt + # 显示行号，这里的 “#” 需要借助<kbd>Shift</kbd> 才能打出来。</p>
<p>Ctrl + _ 跳转到指定行，这里的“_”需要借助<kbd>Shift</kbd>才能打出来。</p>
<p>Ctrl + s 保存写入文件的内容</p>
<p>Ctrl + x 退出编辑模式，一般来说退出之前需要保存文件内容，也可不保存退出，这样文件更改就不会生效。</p>
<p>Alt + u 撤销上一次的更改</p>
<p>Alt + e 重做上一次撤销的更改</p>
<p>Ctrl + \ 替换文件中的内容</p>
<p>Ctrl + q 搜索文件中的内容</p>
<p>Ctrl + r 读取另一个文件中的内容，加载到当前编辑的文件中</p>
<p>Ctrl + a 将光标跳转到行首</p>
<p>Ctrl + e 将光标跳转到行尾</p>
<p>Ctrl + p 将光标跳转到上一行，也可以用<kbd>↑</kbd>代替</p>
<p>Ctrl + n 将光标跳转到下一行，也可用<kbd>↓</kbd>代替</p>
<p>Alt + \ 跳转到文件的第一行</p>
<p>Alt + / 跳转到文件的最后一行</p>
<p>Ctrl + y 跳转到上一页</p>
<p>Ctrl + v 跳转到下一页</p>
<p>Ctrl + t 剪切从当前位置到文件末尾的全部内容</p>
<p>Ctrl + 6 选择文本，此时移动光标就会选中部分文本</p>
<p>Alt + 6 复制选中的文本</p>
<p>Ctrl + k 剪切当前行</p>
<p>Ctrl + u 粘贴</p>
</blockquote>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>如果你想用 vim 做一些复杂编辑，你需要掌握它在<strong>命令模式</strong>下的一些快捷键，还需要掌握一些在编辑模式下的命令。</p>
<p><strong>vim 常用快捷键和命令：</strong></p>
<blockquote>
<p>命令模式：<br>    dd 删除当前行<br>    yy 复制当前行<br>    p / P 粘贴缓冲区中的内容（可以是复制或者剪切的内<br>    容）<br>    u 撤销更改<br>    Ctrl + r 重做撤销的更改<br>    gg 跳转到文件的第一行<br>    Shift + g 跳转到文件的最后一行<br>    d + Shift + g 删除从当前行到文件末尾的所有内容<br>    d + g + g 删除从当前行到文件开头的所有内容<br>    v 移动光标选中文本<br>    y 复制选中的文本<br>    “&gt;” 右移选中的文本<br>    “&lt;” 左移选中的文本<br>    d 剪切选中的文本<br>    i 进入到输入模式<br>    <number> + d + d 删除当前行后的 number 行，<br>    这里的 <number> 替换为想要删除的行数<br>    Shift + z + z 退出 vim，保存改动的内容<br>    Shift + z + q 退出 vim，不保存改动的内容<br>    ：进入到编辑模式<br>编辑模式：<br>    :set number 显示行号<br>    :wq 保存并退出<br>    :q 退出vim，只有当文件未做改动时才能成功退出<br>    :q! 退出 vim，并放弃所有的更改<br>    :r <filename> 在光标后读入另一个文件的内容，<br>    这里的<filename>替换为想要读入的文件名<br>    :w <filename> 文件内容另存为 filename，这里<br>    的<filename>替换为想要保存的文件名<br>    /<search_text> 从当前行往后搜索字符串，支持正<br>    则表达式，这里的<search_test>替换为想要搜索的字符<br>    串模式<br>    ?<search_test> 从当前行往前搜索字符串，支持正<br>    则表达式，这里的<search_test>替换为想要搜索的字<br>    符串模式<br>    以上两种搜索方式都可以用 n 移动到后一个匹配项，N<br>    移动到前一个匹配项<br>    %s/<match>/<replace> 检索第一个匹配的字符<br>    串，并将其替换为另一个字符串。这里的<match>替换为<br>    要搜索的字符串模式，<replace>替换为要替换的字符串<br>    %s/<match>/<replace>/g 检索所有匹配的字符<br>    串，并将所有匹配的字符串替换为另一个字符串。这里的<br>    <match>替换为要搜索的字符串模式，<replace> 替换<br>    为要替换的字符串<br>    %s/<match>/<replace>/g 检索所有匹配的字符串，<br>    并将所有匹配的字符串替换为另一个字符串，不过在替换每一个<br>    匹配的字符串时都会询问用户是否替换。这里的<match>替<br>    换为要搜索的字符串模式，<replace>替换为要替换的字符<br>    串<br>输入模式：<br>    输入模式无快捷键</p>
</blockquote>
<p>将以下内容写入到 ~/.vimrc 中，可以对 vim 进行设置，设置立即生效<br> vim ~/.vimrc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示行号</span></span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="comment"># 复制粘贴时保持文件缩进格式</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">paste</span></span><br></pre></td></tr></table></figure>

<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>查看文件(cat,head,tail,less,more)</title>
    <url>/2022/12/30/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6-cat-head-tail-less-more/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=690104074&bvid=BV1k24y127zf&cid=888455696&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>
<blockquote>
<p>针对 ubuntu20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<p>查看一个文件内容的方式是命令 + 文件路径<br>这里先构建 1 个文件，方便后面命令演示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/xiyouyun</span><br><span class="line"><span class="comment"># 这样可以少打几个字符，这里的 $_ 等价于 /tmp/xiyouyun</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line"><span class="comment"># 向文件中写入内容, 以下命令会向文件中写入 1000 行 hello,xiyouyun</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> hello xiyouyun &quot;</span> &gt;&gt; xiyou.txt; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 cat 查看文件的全部内容</span></span><br><span class="line"><span class="built_in">cat</span> xiyou.txt</span><br><span class="line"><span class="comment"># 查看文件时显示行号</span></span><br><span class="line"><span class="built_in">cat</span> -b xiyou.txt</span><br><span class="line"><span class="comment"># 查看文件时显示隐藏字符</span></span><br><span class="line"><span class="built_in">cat</span> -A xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从文件的开始部分查看文件内容，默认 10 行</span></span><br><span class="line"><span class="built_in">head</span> xiyou.txt</span><br><span class="line"><span class="comment"># 查看文件的前 10 行</span></span><br><span class="line"><span class="built_in">head</span> -n 10 xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从文件的尾部查看文件内容，默认 10 行</span></span><br><span class="line"><span class="built_in">tail</span> xiyou.txt</span><br><span class="line"><span class="comment"># 查看文件的后 10 行</span></span><br><span class="line"><span class="built_in">tail</span> -n 10 xiyou.txt</span><br><span class="line"><span class="comment"># 向 ping.txt 中持续写入内容，可以暂时不管这条命令的含义</span></span><br><span class="line">ping g.cn &gt; ping.txt &amp;</span><br><span class="line"><span class="comment"># 查看文件的尾部，如果文件内容持续增长，则会动态刷新显示</span></span><br><span class="line"><span class="built_in">tail</span> -f ping.txt</span><br></pre></td></tr></table></figure>

<h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 less 查看文件的头部部分，按 Enter 滚动查看后面的行, 按 q 退出查看，按空格支持翻页</span></span><br><span class="line"><span class="comment"># 使用方向键支持上下滚动查看，使用 ?text 支持在当前页搜索</span></span><br><span class="line">less xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 more 查看文件的头部部分，more 只支持向下滚动，不能上下滚动，按 q 退出查看</span></span><br><span class="line">more xiyou.txt</span><br></pre></td></tr></table></figure>

<h2 id="补充内容："><a href="#补充内容：" class="headerlink" title="补充内容："></a>补充内容：</h2><h3 id="如何快速清空-1-个文件？"><a href="#如何快速清空-1-个文件？" class="headerlink" title="如何快速清空 1 个文件？"></a><strong>如何快速清空 1 个文件？</strong></h3><h4 id="使用重定向"><a href="#使用重定向" class="headerlink" title="使用重定向"></a>使用重定向</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向文件中写入内容, 以下命令会向文件中写入 1000 行 hello,xiyouyun</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> hello xiyouyun &quot;</span> &gt;&gt; xiyou.txt; <span class="keyword">done</span>;</span><br><span class="line"><span class="comment"># 清空一个文件</span></span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; xiyou.txt</span><br></pre></td></tr></table></figure>

<h4 id="使用-vim"><a href="#使用-vim" class="headerlink" title="使用 vim"></a>使用 vim</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向文件中写入内容, 以下命令会向文件中写入 1000 行 hello,xiyouyun</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> hello xiyouyun &quot;</span> &gt;&gt; xiyou.txt; <span class="keyword">done</span>;</span><br><span class="line"><span class="comment"># 进入 vim 的命令模式，清空 1 个文件分为 3 步：</span></span><br><span class="line">	<span class="comment"># 1. 使用 gg 将光标跳转到文件的第 1 行</span></span><br><span class="line">	<span class="comment"># 2. 使用 d + Shift + g 清空整个文件</span></span><br><span class="line">	<span class="comment"># 3. 使用 Shift + z + z 保存文件</span></span><br><span class="line">vim xiyou.txt</span><br></pre></td></tr></table></figure>

<h3 id="如何查看隐藏字符？"><a href="#如何查看隐藏字符？" class="headerlink" title="如何查看隐藏字符？"></a><strong>如何查看隐藏字符？</strong></h3><p>你想要编写一个 bash 脚本（一种能在 linux 系统上执行的程序），但你不会使用 linux 上的编辑器（nano 和 vim），所以你在你自己的 windows 电脑上编辑好后，将文件上传到 linux 上。却发现脚本并不能执行，这是因为在 windows 中使用的换行符和 linux 中使用的换行符是不同的，但是使用 <code>cat &lt;filename&gt;</code> 是看不出隐藏的换行符的。此时需要使用 <code>cat -A &lt;filename&gt;</code> 查看。如果你想让 windows 上编写的 bash 脚本能够在 linux 上执行怎么办呢？有两种办法:</p>
<ol>
<li><p>不要将在 win 上编写的脚本文件上传到 linux，而是复制文件的内容到 linux 的文件中。通常可以用Ctrl + Shift + v 在 linux 中粘贴内容。</p>
</li>
<li><p>将文件上传到 linux 后，借助工具 dos2unix 将文件的格式转化为 linux 使用的格式</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个工具需要使用 apt install dos2unix 安装</span></span><br><span class="line"><span class="comment"># 假设有个 windows 换行格式的文件名为 xiyou.txt，你可以用以下命令将其转化为 linux 换行格式</span></span><br><span class="line"><span class="built_in">cat</span> -A xiyou.txt</span><br><span class="line">dos2unix xiyou.txt</span><br><span class="line"><span class="comment"># 通过查看文件中的隐藏字符对比两个文件有何变化</span></span><br><span class="line"><span class="built_in">cat</span> -A xiyou.txt</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
  <entry>
    <title>查找文件(find,ls,locate,whereis,which)</title>
    <url>/2022/12/30/%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6-find-ls-locate-whereis-which/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=220016762&bvid=BV1M841187rx&cid=889543162&page=1" style="width:100%;height:500px;min-width:375px;min-height:200px"scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<span id="more"></span>

<blockquote>
<p>针对 ubuntu20.04<br>ubuntu 20.04 是 “西柚云” 主要使用的操作系统  <a href="https://www.xiyoucloud.net/aff/VKRWMUHQ">西柚云官网</a></p>
</blockquote>
<h2 id="文件的属性"><a href="#文件的属性" class="headerlink" title="文件的属性"></a>文件的属性</h2><p>文件的属性有：文件的大小（size），文件的名称（name），文件的类型（type），文件的路径（path），文件的修改日期（modify_time）……我们可以根据文件的属性，在系统中查找符合筛选条件的文件。</p>
<h2 id="ls-列出指定路径下的文件信息"><a href="#ls-列出指定路径下的文件信息" class="headerlink" title="ls 列出指定路径下的文件信息"></a>ls 列出指定路径下的文件信息</h2><p>ls 配合 grep 可以通过文件名筛选文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 筛选路径 /etc/apt 目录下文件名中包含 list 的文件，这里的 “| grep list” 的原理可以先不管 </span></span><br><span class="line"><span class="built_in">ls</span> /etc/apt | grep list</span><br></pre></td></tr></table></figure>

<h2 id="find-可以对文件的属性进行筛选"><a href="#find-可以对文件的属性进行筛选" class="headerlink" title="find 可以对文件的属性进行筛选"></a>find 可以对文件的属性进行筛选</h2><p>find 命令可以对几乎所有的文件属性进行筛选，<strong>在 linux 系统中 * 可以匹配路径中的任意字符</strong><br>这里只列举几个常用的例子，更多的文件属性筛选可以查看文档：<a href="https://wangchujiang.com/linux-command/c/find.html">https://wangchujiang.com/linux-command/c/find.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出 /tmp 目录下的所有文件和目录</span></span><br><span class="line">find /tmp</span><br><span class="line"><span class="comment"># 列出 /etc/apt 目录下文件或目录名以 list 或 d 结尾的文件</span></span><br><span class="line">find /etc/apt <span class="string">&quot;*.list -o *.d&quot;</span></span><br><span class="line"><span class="comment"># 在前一条命令的基础上筛选文件类型为“文件”的</span></span><br><span class="line">find /etc/apt <span class="string">&quot;*.list -o *.d&quot;</span> -<span class="built_in">type</span> f</span><br><span class="line"><span class="comment"># 筛选文件类型为“目录”</span></span><br><span class="line">find /etc/apt <span class="string">&quot;*.list -o *.d&quot;</span> -<span class="built_in">type</span> d</span><br><span class="line"><span class="comment"># 默认会搜索路径下的所有子目录，通过 maxdepth 可以让它只搜索当前搜索到第 1 层子目录就不再继续往下搜索了</span></span><br><span class="line">find /etc/apt <span class="string">&quot;*.list -o *.d&quot;</span> -maxdepth 1 -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure>

<h2 id="locate-查找系统中的文件"><a href="#locate-查找系统中的文件" class="headerlink" title="locate 查找系统中的文件"></a>locate 查找系统中的文件</h2><p>locate 命令来自于 mlocate 软件，需要使用命令 <code>apt install mlocate</code>安装，其用于<strong>快速</strong>定位软件的位置，支持正则表达式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到系统中 python 文件的位置</span></span><br><span class="line">locate *.py</span><br><span class="line"><span class="comment"># 列出系统中所有的文件名以 .R 结尾的文件</span></span><br><span class="line">locate *.R</span><br></pre></td></tr></table></figure>

<h2 id="whereis-定位系统中二进制文件的位置"><a href="#whereis-定位系统中二进制文件的位置" class="headerlink" title="whereis 定位系统中二进制文件的位置"></a>whereis 定位系统中二进制文件的位置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定位系统 R 可执行程序的位置</span></span><br><span class="line">whereis R</span><br><span class="line"><span class="comment"># 定位系统中 python 可执行程序的位置</span></span><br><span class="line">whereis python</span><br></pre></td></tr></table></figure>

<h2 id="which-查找命令的绝对路径"><a href="#which-查找命令的绝对路径" class="headerlink" title="which 查找命令的绝对路径"></a>which 查找命令的绝对路径</h2><p>这在系统中安装了多个版本的软件时十分实用。如在 conda 环境中通常安装了多个 python 环境，可以使用这种方式定位到当前使用 python 命令使用的是哪个路径下的 python。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看执行 python 命令时，使用的是哪个路径下的程序</span></span><br><span class="line"><span class="built_in">which</span> python</span><br><span class="line"><span class="comment"># 查看执行 R 命令时，使用的是哪个路径下的程序</span></span><br><span class="line"><span class="built_in">which</span> R</span><br></pre></td></tr></table></figure>

<h2 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h2><h3 id="find-常用操作"><a href="#find-常用操作" class="headerlink" title="find 常用操作"></a>find 常用操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除修改时间超过 1 天的文件（保留最近 24 小时的文件）</span></span><br><span class="line">find . -<span class="built_in">type</span> f -mtime 1 -<span class="built_in">exec</span>  <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选当前目录下大于 10MB 的文件</span></span><br><span class="line">find . -size +10M</span><br><span class="line"></span><br><span class="line"><span class="comment"># find 查找目录时跳过 tmp 目录</span></span><br><span class="line">find . -path <span class="string">&quot;/tmp&quot;</span> -prune -o -<span class="built_in">type</span> f -name *.bam -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>西柚云Linux教程</tag>
      </tags>
  </entry>
</search>
